///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR      26/Oct/2021  17:01:07
// Copyright 1996-2021 IAR Systems AB.
//
//    Source file  =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\ADC.c
//    Command line =  
//        -f C:\Users\aly\AppData\Local\Temp\EW92E6.tmp
//        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\ADC.c
//        --cpu=m8 -ms -o
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj
//        -lCN
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
//        -lB
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
//        --initializers_in_flash --no_cross_call --no_clustering --no_tbaa
//        --debug -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -Ohz)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List\ADC.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME `ADC`

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBLIC ADC_get_select_ch
        PUBLIC ADC_init
        PUBLIC ADC_switch_off
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADMUX
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

// D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\ADC.c
//    1 #include <iom8.h>

        ASEGN ABSOLUTE:DATA:NOROOT,027H
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,026H
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,024H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2
//    2 #include <ina90.h>
//    3 #include <string.h>
//    4 #include <pgmspace.h>
//    5 #include <stdio.h>
//    6 #include "main.h"
//    7 #include "USART.h"
//    8 #include "DS1Wire.h"
//    9 #include "Timers.h"
//   10 #include "ADC.h"
//   11 #include "RF_transmitter.h"
//   12 #include "Util.h"
//   13 
//   14 

        RSEG `CODE`:CODE:NOROOT(1)
//   15 void ADC_init(void)
ADC_init:
        CODE
//   16 {
//   17   // Установка источника опорного напряжения - внутренний 2.56 В (bit 6, bit 7)
//   18   // Результат выровнен в право (bit 5)
//   19   // Мультиплексор переключен на канал 0
//   20   ADMUX  = b11000000;
        LDI     R16, 192
        OUT     0x07, R16
//   21 
//   22   // АЦП включен в однократном режиме, прерывания запрещенв, тактовая частота в 128 раз ниже частоты кварца 
//   23   ADCSRA  = b10000111;
        LDI     R16, 135
        REQUIRE ?Subroutine0
        REQUIRE _A_ADMUX
        REQUIRE _A_ADCSRA
        ;               // Fall through to label ?Subroutine0
//   24   
//   25 }

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine0:
        OUT     0x06, R16
        RET
//   26 

        RSEG `CODE`:CODE:NOROOT(1)
//   27 unsigned int ADC_get_select_ch(unsigned char ch)
ADC_get_select_ch:
        CODE
//   28 {
//   29   ADMUX  = (ADMUX & 0xF0) | ( ch & 0x0F) ;
        IN      R17, 0x07
        ANDI    R17, 0xF0
        ANDI    R16, 0x0F
        OR      R17, R16
        OUT     0x07, R17
//   30   ADCSRA  = b11010111; // Очищаем флаг прерывания и стартуем 
        LDI     R16, 215
        OUT     0x06, R16
//   31   
//   32   while ((ADCSRA & b00010000)==0); // Ждем появления флага ADIF
??ADC_get_select_ch_0:
        SBIS    0x06, 0x04
        RJMP    ??ADC_get_select_ch_0
//   33   
//   34   return ADC;
        IN      R16, 0x04
        IN      R17, 0x05
        RET
        REQUIRE _A_ADMUX
        REQUIRE _A_ADCSRA
        REQUIRE _A_ADC
//   35 }
//   36 
//   37 

        RSEG `CODE`:CODE:NOROOT(1)
//   38 void ADC_switch_off(void)
ADC_switch_off:
        CODE
//   39 {
//   40   ADMUX  = 0;
        LDI     R16, 0
        OUT     0x07, R16
//   41   ADCSRA  = 0;
        RJMP    ?Subroutine0
        REQUIRE _A_ADMUX
        REQUIRE _A_ADCSRA
//   42 }  

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//   43 
//   44 
// 
//  4 bytes in segment ABSOLUTE
// 40 bytes in segment CODE
// 
// 40 bytes of CODE memory
//  0 bytes of DATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none

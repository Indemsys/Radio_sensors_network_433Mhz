///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR      26/Oct/2021  17:01:07
// Copyright 1996-2021 IAR Systems AB.
//
//    Source file  =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\RF_transmitter.c
//    Command line =  
//        -f C:\Users\aly\AppData\Local\Temp\EW92E7.tmp
//        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\RF_transmitter.c
//        --cpu=m8 -ms -o
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj
//        -lCN
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
//        -lB
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
//        --initializers_in_flash --no_cross_call --no_clustering --no_tbaa
//        --debug -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -Ohz)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List\RF_transmitter.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME RF_transmitter

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?SS_SHR_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??TIMER1_COMPB_interrupt::??INTVEC 14`
        PUBLIC RF_send
        PUBLIC TIMER1_COMPB_interrupt
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC bit_count
        PUBLIC pack_len
        PUBLIC preamble
        PUBLIC ptr_pack
        PUBLIC sended_cnt

TIMER1_COMPB_interrupt SYMBOL "TIMER1_COMPB_interrupt"
`??TIMER1_COMPB_interrupt::??INTVEC 14` SYMBOL "??INTVEC 14", TIMER1_COMPB_interrupt

        EXTERN GetBlockCRC
        EXTERN TIMER1_CTC_Init
        EXTERN TIMER1_CTC_Stop
        EXTERN TIMER1_OCB_force_state
        EXTERN TIMER1_OCB_int_dis
        EXTERN TIMER1_OCB_int_en
        EXTERN TIMER1_OCB_outmod_set0
        EXTERN TIMER1_OCB_outmod_set1
        EXTERN flags
        EXTERN rc4_crypt
        EXTERN rc4_setup
        EXTERN wp

// D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\RF_transmitter.c
//    1 #include <iom8.h>
//    2 #include <ina90.h>
//    3 #include <string.h>
//    4 #include <pgmspace.h>
//    5 #include <stdio.h>
//    6 #include "main.h"
//    7 #include "Timers.h"
//    8 #include "RF_transmitter.h"
//    9 #include "RF_settings.h"
//   10 #include "Util.h"
//   11 #include "rc4.h"
//   12 
//   13 extern TPARAMS wp;   // Рабочие параметры в RAM
//   14 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   15 volatile unsigned long   preamble;   // Текущий остаток преамбулы для передачи
preamble:
        DS8 4

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   16 unsigned int   bit_count;  // Счетчик посылаемых бит
bit_count:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   17 unsigned char  sended_cnt; // Количество посланных байта
sended_cnt:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   18 volatile char *ptr_pack;   // Указатель на буфер содержащий посылаемый пакет
ptr_pack:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   19 unsigned char  pack_len;   // Длина посылаемого пакета
pack_len:
        DS8 1
//   20 
//   21 extern volatile tflags flags;
//   22 extern unsigned int rf_bitrate;
//   23 
//   24 
//   25 /*----------------------------------------------------------------------
//   26 Отправка пакета передатчику
//   27 
//   28 Аргументы:
//   29 *buf - указатель на буффер с данным
//   30 cnt - количество данных в буфере
//   31 
//   32 ------------------------------------------------------------------------*/

        RSEG `CODE`:CODE:NOROOT(1)
//   33 void RF_send(char *buf,unsigned char cnt)
RF_send:
        CODE
//   34 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R25:R24, R17:R16
        MOV     R26, R18
//   35   unsigned int crc;
//   36   crc=GetBlockCRC((unsigned char*)buf,cnt);
        MOV     R20, R18
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        RCALL   GetBlockCRC
//   37   buf[cnt]  =(crc>>8);
        LDI     R27, 0
        MOVW    R31:R30, R25:R24
        ADD     R30, R26
        ADC     R31, R27
        ST      Z, R17
//   38   buf[cnt+1]=(crc & 0xFF);
        STD     Z+1, R16
//   39 
//   40   rc4_setup((unsigned char*)&wp.keycode, 4);
        LDI     R18, 4
        LDI     R16, LOW((wp + 13))
        LDI     R17, HIGH((wp + 13))
        RCALL   rc4_setup
//   41   rc4_crypt((unsigned char*)buf, 11 );
        LDI     R18, 11
        LDI     R19, 0
        MOVW    R17:R16, R25:R24
        RCALL   rc4_crypt
//   42 
//   43   // Назначение глобальных переменных используемых обработчиком прерывания
//   44   preamble       = 0xFFFF0000 | wp.preamble;
        LDI     R30, LOW(wp)
        LDI     R31, (wp) >> 8
        LDD     R20, Z+9
        LDD     R21, Z+10
        LDI     R22, 255
        LDI     R30, LOW(preamble)
        LDI     R31, (preamble) >> 8
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R22
//   45   bit_count      = 0;
        LDI     R30, LOW(bit_count)
        LDI     R31, (bit_count) >> 8
        ST      Z, R27
        STD     Z+1, R27
//   46   sended_cnt     = 0;
        STS     sended_cnt, R27
//   47   ptr_pack       = buf;
        LDI     R30, LOW(ptr_pack)
        LDI     R31, (ptr_pack) >> 8
        ST      Z, R24
        STD     Z+1, R25
//   48   pack_len       = cnt + 2; // С учетом добавленной контролльной суммы
        SUBI    R26, 254
        STS     pack_len, R26
//   49 
//   50   flags.centre   =0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R18, Z
        ANDI    R18, 0xFD
        ST      Z, R18
//   51   flags.lastb    =0;
        LD      R18, Z
        ANDI    R18, 0xF7
        ST      Z, R18
//   52   flags.done     =0;
        LD      R18, Z
        ANDI    R18, 0xFB
        ST      Z, R18
//   53   flags.preamble =1;
        LD      R18, Z
        ORI     R18, 0x01
        ST      Z, R18
//   54 
//   55   // Взвести бит на выходе к передатчику
//   56   // Разрешить прерывания таймера 1 по каналу A каждые полбита
//   57   TIMER1_CTC_Init(wp.rf_bitrate);
        LDI     R30, LOW(wp)
        LDI     R31, (wp) >> 8
        LDD     R16, Z+5
        LDD     R17, Z+6
        RCALL   TIMER1_CTC_Init
//   58   //TIMER1_OCB_force_state((unsigned char)PREAMBLE>>15);
//   59   TIMER1_OCB_force_state(1);
        LDI     R16, 1
        RCALL   TIMER1_OCB_force_state
//   60   TIMER1_OCB_int_en();
        RCALL   TIMER1_OCB_int_en
//   61 
//   62 }
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//   63 
//   64 #pragma vector=TIMER1_COMPB_vect

        RSEG `CODE`:CODE:NOROOT(1)
        CALL_GRAPH_ROOT TIMER1_COMPB_interrupt, "interrupt"
//   65 __interrupt void TIMER1_COMPB_interrupt( void )
TIMER1_COMPB_interrupt:
        CODE
//   66 {
        ST      -Y, R4
        ST      -Y, R27
        ST      -Y, R26
        ST      -Y, R25
        ST      -Y, R24
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R3
        ST      -Y, R2
        ST      -Y, R1
        ST      -Y, R0
        ST      -Y, R23
        ST      -Y, R22
        ST      -Y, R21
        ST      -Y, R20
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R4, 0x3F
        REQUIRE ?Register_R4_is_cg_reg
//   67 
//   68   if (flags.preamble)
        LDS     R16, sended_cnt
        LDI     R17, 0
        LDS     R30, ptr_pack
        LDS     R31, (ptr_pack + 1)
        ADD     R30, R16
        ADC     R31, R17
        LDI     R26, LOW(flags)
        LDI     R27, (flags) >> 8
        LD      R16, X
        SBRS    R16, 0
        RJMP    ??TIMER1_COMPB_interrupt_0
//   69   {
//   70 
//   71     preamble<<=1;
        LDS     R16, preamble
        LDS     R17, (preamble + 1)
        LDS     R18, (preamble + 2)
        LDS     R19, (preamble + 3)
        LSL     R16
        ROL     R17
        ROL     R18
        ROL     R19
        STS     preamble, R16
        STS     (preamble + 1), R17
        STS     (preamble + 2), R18
        STS     (preamble + 3), R19
//   72     bit_count++;
        LDI     R26, LOW(bit_count)
        LDI     R27, (bit_count) >> 8
        LD      R16, X+
        LD      R17, X
        SUBI    R16, 255
        SBCI    R17, 255
        ST      X, R17
        ST      -X, R16
//   73     if (bit_count==(PREAMBLE_LEN + 16))
        LDS     R24, bit_count
        LDS     R25, (bit_count + 1)
        SBIW    R25:R24, 32
        BRNE    ??TIMER1_COMPB_interrupt_1
//   74     {
//   75       flags.preamble=0;
        LDI     R26, LOW(flags)
        LDI     R27, (flags) >> 8
        LD      R16, X
        ANDI    R16, 0xFE
        ST      X, R16
//   76       bit_count=0;
        LDI     R16, 0
        STS     bit_count, R16
        STS     (bit_count + 1), R16
//   77       // Запрограммируем так, чтобы по прерыванию был сгенерирован правильный перепад для начала первого бита данных
//   78       if ((ptr_pack[sended_cnt] & 0x80)==0)
        LD      R16, Z
        SBRC    R16, 7
        RJMP    ??TIMER1_COMPB_interrupt_2
//   79         TIMER1_OCB_outmod_set0();       // Компаратор выставит 0 на выходе после срабатывания
//   80       else
//   81         TIMER1_OCB_outmod_set1();       // Компаратор выставит 1 на выходе после срабатывания
//   82     }
//   83     else
//   84     {
//   85       if (preamble & 0x80000000ul)
//   86         TIMER1_OCB_outmod_set1();        // Компаратор выставит 1 на выходе после срабатывания
//   87       else
//   88         TIMER1_OCB_outmod_set0();        // Компаратор выставит 0 на выходе после срабатывания
//   89     }
//   90 
//   91   }
//   92   else
//   93   {
//   94     if (flags.centre)
//   95     {
//   96       // Здесь середина передаваемого бита
//   97       flags.centre=0;
//   98 
//   99       bit_count++; // Увиличить счетчик переданных битов
//  100       if (bit_count==8)
//  101       {
//  102         bit_count=0;
//  103         sended_cnt++;
//  104         if (sended_cnt==pack_len) flags.lastb=1;
//  105       }
//  106       if (flags.lastb) TIMER1_OCB_outmod_set0();
//  107       else
//  108       {
//  109         // Определить перепад в начале следующего бита (если 1, то 0->1;  если 0, то 1->0)
//  110         if ((ptr_pack[sended_cnt] & (0x80 >> bit_count))==0)
//  111           TIMER1_OCB_outmod_set0();
//  112         else
//  113           TIMER1_OCB_outmod_set1();
//  114       }
//  115     }
//  116     else
//  117     {
//  118       // Здесь начало/конец передачи бита
//  119 
//  120       flags.centre=1;  // Следующее прерывание будет в центре бита
//  121 
//  122       if  (flags.lastb)
//  123       {
//  124         // Здесь закончился последний бит последнего байта
//  125         TIMER1_OCB_int_dis();
//  126         TIMER1_CTC_Stop();
//  127         flags.done=1;
//  128       }
//  129       else
//  130       {
//  131         // Определить перепад в центре бита (если 1, то 1->0;  если 0, то 0->1)
//  132         if ((ptr_pack[sended_cnt] & (0x80 >> bit_count))==0)
//  133           TIMER1_OCB_outmod_set1();
//  134         else
//  135           TIMER1_OCB_outmod_set0();
??TIMER1_COMPB_interrupt_3:
        RCALL   TIMER1_OCB_outmod_set0
//  136       }
//  137     }
//  138   }
//  139 }
??TIMER1_COMPB_interrupt_4:
        OUT     0x3F, R4
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R20, Y+
        LD      R21, Y+
        LD      R22, Y+
        LD      R23, Y+
        LD      R0, Y+
        LD      R1, Y+
        LD      R2, Y+
        LD      R3, Y+
        LD      R30, Y+
        LD      R31, Y+
        LD      R24, Y+
        LD      R25, Y+
        LD      R26, Y+
        LD      R27, Y+
        LD      R4, Y+
        RETI
??TIMER1_COMPB_interrupt_1:
        LDI     R30, LOW(preamble)
        LDI     R31, (preamble) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R16, Z+3
        SBRC    R16, 7
        RJMP    ??TIMER1_COMPB_interrupt_2
        RJMP    ??TIMER1_COMPB_interrupt_3
??TIMER1_COMPB_interrupt_0:
        LD      R16, X
        SBRS    R16, 1
        RJMP    ??TIMER1_COMPB_interrupt_5
        MOVW    R31:R30, R27:R26
        LD      R16, Z
        ANDI    R16, 0xFD
        ST      Z, R16
        LDS     R30, bit_count
        LDS     R31, (bit_count + 1)
        ADIW    R31:R30, 1
        CPI     R30, 8
        CPC     R31, R17
        BRNE    ??TIMER1_COMPB_interrupt_6
        LDI     R30, 0
        LDI     R31, 0
        LDS     R16, sended_cnt
        INC     R16
        STS     sended_cnt, R16
        LDS     R17, pack_len
        CP      R16, R17
        BRNE    ??TIMER1_COMPB_interrupt_6
        LD      R16, X
        ORI     R16, 0x08
        ST      X, R16
??TIMER1_COMPB_interrupt_6:
        STS     bit_count, R30
        STS     (bit_count + 1), R31
        LDS     R16, flags
        SBRC    R16, 3
        RJMP    ??TIMER1_COMPB_interrupt_3
        LDS     R16, sended_cnt
        LDI     R17, 0
        LDS     R30, ptr_pack
        LDS     R31, (ptr_pack + 1)
        ADD     R30, R16
        ADC     R31, R17
        LD      R18, Z
        LDS     R20, bit_count
        LDI     R16, 128
        RCALL   ?SS_SHR_L02
        AND     R18, R16
        BRNE    ??TIMER1_COMPB_interrupt_2
        RJMP    ??TIMER1_COMPB_interrupt_3
??TIMER1_COMPB_interrupt_5:
        LD      R16, X
        ORI     R16, 0x02
        ST      X, R16
        LD      R16, X
        SBRS    R16, 3
        RJMP    ??TIMER1_COMPB_interrupt_7
        RCALL   TIMER1_OCB_int_dis
        RCALL   TIMER1_CTC_Stop
        MOVW    R31:R30, R27:R26
        LD      R16, Z
        ORI     R16, 0x04
        ST      Z, R16
        RJMP    ??TIMER1_COMPB_interrupt_4
??TIMER1_COMPB_interrupt_7:
        LD      R18, Z
        LDS     R20, bit_count
        LDI     R16, 128
        RCALL   ?SS_SHR_L02
        AND     R18, R16
        BREQ    $+2+2
        RJMP    ??TIMER1_COMPB_interrupt_3
??TIMER1_COMPB_interrupt_2:
        RCALL   TIMER1_OCB_outmod_set1
        RJMP    ??TIMER1_COMPB_interrupt_4

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 14
`??TIMER1_COMPB_interrupt::??INTVEC 14`:
        CODE
        RJMP    TIMER1_COMPB_interrupt

        RSEG INITTAB:CODE:NOROOT(0)
        DATA
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
//  140 
// 
// 518 bytes in segment CODE
//   6 bytes in segment INITTAB
//   2 bytes in segment INTVEC
//  10 bytes in segment NEAR_Z
// 
// 518 bytes of CODE memory (+ 8 bytes shared)
//  10 bytes of DATA memory
//
//Errors: none
//Warnings: none

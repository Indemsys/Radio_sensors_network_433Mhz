###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       26/Oct/2021  17:01:08
# Copyright 1996-2021 IAR Systems AB.
#
#    Source file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\wrk_params.c
#    Command line =  
#        -f C:\Users\aly\AppData\Local\Temp\EW92E9.tmp
#        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\wrk_params.c
#        --cpu=m8 -ms -o
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj
#        -lCN
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
#        -lB
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
#        --initializers_in_flash --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -Ohz)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List\wrk_params.lst
#    Object file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj\wrk_params.r90
#
###############################################################################

D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\wrk_params.c
      1          #include <iom8.h>
      2          #include <ina90.h>
      3          #include <string.h>
      4          #include <pgmspace.h>
      5          #include <stdio.h>
      6          #include <stdlib.h>
      7          #include "main.h"
      8          #include "Util.h"
      9          #include "RF_settings.h"
     10          #include "wrk_params.h"
     11          
     12          /*
     13            Объявления рабочих параметров
     14          */
     15          

   \                                 In  segment EEPROM_N, align 1, keep-with-next
     16          __no_init __eeprom TPARAMS ee_wp;       // Рабочие параметры в EEPROM
   \                     ee_wp:
   \   00000000                      DS8 17

   \                                 In  segment EEPROM_N, align 1, keep-with-next
     17          __no_init __eeprom unsigned int ee_crc; // Контрольная сумма в EEPROM
   \                     ee_crc:
   \   00000000                      DS8 2
     18          

   \                                 In  segment NEAR_N, align 1, keep-with-next
     19          __no_init TPARAMS wp;                   // Рабочие параметры в RAM
   \                     wp:
   \   00000000                      DS8 17
     20          
     21          
     22          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     23          __flash DWAR_TYPE dwvar[]=
   \                     dwvar:
   \   00000000   ............       DC16 `?<Constant "WDTPER">`, ee_wp + 2H, wp + 2H
   \   00000006   00                 DC8 0
   \   00000007   000040E00000       DD 40E00000H, 0H, 40E00000H
   \              0000000040E0
   \   00000013   0000               DC8 0, 0
   \   00000015   0000               DC16 0H
   \   00000017   01                 DC8 1
   \   00000018   ............       DC16 `?<Constant "WDTDVC">`, ee_wp + 3H, wp + 3H
   \   0000001E   00                 DC8 0
   \   0000001F   000040000000       DD 40000000H, 0H, 437F0000H
   \              00000000437F
   \   0000002B   0000               DC8 0, 0
   \   0000002D   0000               DC16 0H
   \   0000002F   01                 DC8 1
   \   00000030   ............       DC16 `?<Constant "WDTDVV">`, ee_wp + 4H, wp + 4H
   \   00000036   00                 DC8 0
   \   00000037   000000000000       DD 0H, 0H, 437F0000H
   \              00000000437F
   \   00000043   0000               DC8 0, 0
   \   00000045   0000               DC16 0H
   \   00000047   01                 DC8 1
   \   00000048   ............       DC16 `?<Constant "BTRATE">`, ee_wp + 5H, wp + 5H
   \   0000004E   02                 DC8 2
   \   0000004F   0000467A0000       DD 467A0000H, 457A0000H, 477FFF00H
   \              457AFF00477F
   \   0000005B   0000               DC8 0, 0
   \   0000005D   0000               DC16 0H
   \   0000005F   02                 DC8 2
   \   00000060   ............       DC16 `?<Constant "SFLAGS">`, ee_wp + 7H, wp + 7H
   \   00000066   02                 DC8 2
   \   00000067   000000000000       DD 0H, 0H, 477FFF00H
   \              0000FF00477F
   \   00000073   0000               DC8 0, 0
   \   00000075   0000               DC16 0H
   \   00000077   02                 DC8 2
   \   00000078   ............       DC16 `?<Constant "PREAMB">`, ee_wp + 9H, wp + 9H
   \   0000007E   02                 DC8 2
   \   0000007F   C20047590000       DD 4759C200H, 0H, 477FFF00H
   \              0000FF00477F
   \   0000008B   0000               DC8 0, 0
   \   0000008D   0000               DC16 0H
   \   0000008F   02                 DC8 2
   \   00000090   ............       DC16 `?<Constant "REFCOD">`, ee_wp + 0BH, wp + 0BH
   \   00000096   02                 DC8 2
   \   00000097   C00044790000       DD 4479C000H, 0H, 477FFF00H
   \              0000FF00477F
   \   000000A3   0000               DC8 0, 0
   \   000000A5   0000               DC16 0H
   \   000000A7   02                 DC8 2
   \   000000A8   ............       DC16 `?<Constant "KEYCOD">`, ee_wp + 0DH, wp + 0DH
   \   000000AE   04                 DC8 4
   \   000000AF   C00044790000       DD 4479C000H, 0H, 4F800000H
   \              000000004F80
   \   000000BB   0000               DC8 0, 0
   \   000000BD   0000               DC16 0H
   \   000000BF   04                 DC8 4
     24          {
     25            {
     26              "WDTPER",                // Строковое описание
     27              &ee_wp.wdt_period,       // Указатель на значение переменной в EEPROM
     28              &wp.wdt_period,          // Указатель на значение переменной в RAM
     29              tunsigned_char,          // Идентификатор типа переменной
     30              7,                       // Значение по умолчанию
     31              0,                       // Минимальное возможное значение
     32              7,                       // Максимальное возможное значение
     33              0,                       // Количество знаков после запятой
     34              0,                       // Аттрибуты переменной
     35              0,                       // Указатель на функцию выполняемую после редактирования
     36              sizeof(unsigned char)    // Длинна переменной
     37            },
     38            {
     39              "WDTDVC",
     40              &ee_wp.wdt_div_const,
     41              &wp.wdt_div_const,
     42              tunsigned_char,
     43              2,
     44              0,
     45              255,
     46              0,
     47              0,
     48              0,
     49              sizeof(unsigned char)
     50            },
     51            {
     52              "WDTDVV",
     53              &ee_wp.wdt_div_var,
     54              &wp.wdt_div_var,
     55              tunsigned_char,
     56              0,
     57              0,
     58              255,
     59              0,
     60              0,
     61              0,
     62              sizeof(unsigned char)
     63            },
     64            {
     65              "BTRATE",
     66              &ee_wp.rf_bitrate,
     67              &wp.rf_bitrate,
     68              tunsigned_int,
     69              16000,
     70              4000,
     71              65535,
     72              0,
     73              0,
     74              0,
     75              sizeof(unsigned int)
     76            },
     77            {
     78              "SFLAGS",
     79              &ee_wp.flags,
     80              &wp.flags,
     81              tunsigned_int,
     82              0,
     83              0,
     84              65535,
     85              0,
     86              0,
     87              0,
     88              sizeof(unsigned int)
     89            },
     90            {
     91              "PREAMB",
     92              &ee_wp.preamble,
     93              &wp.preamble,
     94              tunsigned_int,
     95              PREAMBLE,
     96              0,
     97              65535,
     98              0,
     99              0,
    100              0,
    101              sizeof(unsigned int)
    102            },
    103            {
    104              "REFCOD",
    105              &ee_wp.refcod,
    106              &wp.refcod,
    107              tunsigned_int,
    108              999,
    109              0,
    110              65535,
    111              0,
    112              0,
    113              0,
    114              sizeof(unsigned int)
    115            },
    116            {
    117              "KEYCOD",
    118              &ee_wp.keycode,
    119              &wp.keycode,
    120              tunsigned_long,
    121              999,
    122              0,
    123              0xFFFFFFFF,
    124              0,
    125              0,
    126              0,
    127              sizeof(unsigned long)
    128            },
    129          
    130          
    131          
    132          };
    133          

   \                                 In  segment CODE, align 2, keep-with-next
    134          int get_params_num(void)
   \                     get_params_num:
    135          {
    136            return  (sizeof(dwvar)/sizeof(dwvar[0]));
   \   00000000   E008               LDI     R16, 8
   \   00000002   E010               LDI     R17, 0
   \   00000004   9508               RET
    137          }
    138          

   \                                 In  segment CODE, align 2, keep-with-next
    139          char* get_params_name(unsigned char indx)
   \                     get_params_name:
    140          {
    141            return  dwvar[indx].name;
   \   00000000   E010               LDI     R17, 0
   \   00000002   E148               LDI     R20, 24
   \   00000004   E050               LDI     R21, 0
   \   00000006   ....               RCALL   ?S_EC_MUL_L02
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   ....               SUBI    R30, LOW((-(dwvar) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(dwvar) & 0xFFFF) >> 8
   \   0000000E   9105               LPM     R16, Z+
   \   00000010   9114               LPM     R17, Z
   \   00000012   9508               RET
    142          }
    143          
    144          
    145          /* ==========================================================
    146             Преобразовать параметр в строку
    147             ========================================================== */

   \                                 In  segment CODE, align 2, keep-with-next
    148          void Param_to_str(unsigned char *buf,int indx)
   \                     Param_to_str:
    149          {
   \   00000000   ....               RCALL   ?PROLOGUE6_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   01D8               MOVW    R27:R26, R17:R16
    150            switch (dwvar[indx].vartype)
   \   00000004   0189               MOVW    R17:R16, R19:R18
   \   00000006   E148               LDI     R20, 24
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ....               RCALL   ?S_EC_MUL_L02
   \   0000000C   ....               LDI     R24, LOW(dwvar)
   \   0000000E   ....               LDI     R25, (dwvar) >> 8
   \   00000010   0F80               ADD     R24, R16
   \   00000012   1F91               ADC     R25, R17
   \   00000014   01FC               MOVW    R31:R30, R25:R24
   \   00000016   9636               ADIW    R31:R30, 6
   \   00000018   9104               LPM     R16, Z
   \   0000001A   2300               TST     R16
   \   0000001C   F059               BREQ    ??Param_to_str_0
   \   0000001E   950A               DEC     R16
   \   00000020   F049               BREQ    ??Param_to_str_0
   \   00000022   950A               DEC     R16
   \   00000024   F0D9               BREQ    ??Param_to_str_1
   \   00000026   950A               DEC     R16
   \   00000028   F0C9               BREQ    ??Param_to_str_1
   \   0000002A   950A               DEC     R16
   \   0000002C   F1F1               BREQ    ??Param_to_str_2
   \   0000002E   950A               DEC     R16
   \   00000030   F1E1               BREQ    ??Param_to_str_2
   \   00000032   C097               RJMP    ??Param_to_str_3
    151            {
    152            case tunsigned_char:
    153            case tsigned_char:
    154              *buf++='0';
   \                     ??Param_to_str_0:
   \   00000034   E300               LDI     R16, 48
   \   00000036   930C               ST      X, R16
    155              *buf++='x';
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   E708               LDI     R16, 120
   \   0000003C   8301               STD     Z+1, R16
    156              *buf++=hex_to_ascii(*(char*)dwvar[indx].val>>4);
   \   0000003E   9612               ADIW    R27:R26, 2
   \   00000040   012D               MOVW    R5:R4, R27:R26
   \   00000042   9611               ADIW    R27:R26, 1
   \   00000044   01FC               MOVW    R31:R30, R25:R24
   \   00000046   9634               ADIW    R31:R30, 4
   \   00000048   9105               LPM     R16, Z+
   \   0000004A   91F4               LPM     R31, Z
   \   0000004C   2FE0               MOV     R30, R16
   \   0000004E   8100               LD      R16, Z
   \   00000050   9502               SWAP    R16
   \   00000052   700F               ANDI    R16, 0x0F
   \   00000054   ....               RCALL   hex_to_ascii
   \   00000056   01F2               MOVW    R31:R30, R5:R4
   \   00000058   8300               ST      Z, R16
    157              *buf++=hex_to_ascii(*(char*)dwvar[indx].val);
   \   0000005A   C079               RJMP    ??Param_to_str_4
    158              *buf++=0;
    159          //    sprintf((char*)buf,"%d",*((unsigned char*)dwvar[indx].val));
    160              break;
    161          //    sprintf((char*)buf,"%d",*((signed char*)dwvar[indx].val));
    162          //    break;
    163            case tunsigned_int:
    164            case tsigned_int:
    165          //    sprintf((char*)buf,"%d",*((unsigned int*)dwvar[indx].val));
    166              *buf++='0';
   \                     ??Param_to_str_1:
   \   0000005C   E300               LDI     R16, 48
   \   0000005E   930C               ST      X, R16
    167              *buf++='x';
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   E708               LDI     R16, 120
   \   00000064   8301               STD     Z+1, R16
    168              *buf++=hex_to_ascii(*(int*)dwvar[indx].val>>12);
   \   00000066   9612               ADIW    R27:R26, 2
   \   00000068   012D               MOVW    R5:R4, R27:R26
   \   0000006A   9611               ADIW    R27:R26, 1
   \   0000006C   01FC               MOVW    R31:R30, R25:R24
   \   0000006E   9634               ADIW    R31:R30, 4
   \   00000070   9105               LPM     R16, Z+
   \   00000072   91F4               LPM     R31, Z
   \   00000074   2FE0               MOV     R30, R16
   \   00000076   8101               LDD     R16, Z+1
   \   00000078   9505               ASR     R16
   \   0000007A   9505               ASR     R16
   \   0000007C   9505               ASR     R16
   \   0000007E   9505               ASR     R16
   \   00000080   ....               RCALL   hex_to_ascii
   \   00000082   01F2               MOVW    R31:R30, R5:R4
   \   00000084   8300               ST      Z, R16
    169              *buf++=hex_to_ascii(*(int*)dwvar[indx].val>>8);
   \   00000086   01FC               MOVW    R31:R30, R25:R24
   \   00000088   9634               ADIW    R31:R30, 4
   \   0000008A   9105               LPM     R16, Z+
   \   0000008C   91F4               LPM     R31, Z
   \   0000008E   2FE0               MOV     R30, R16
   \   00000090   8101               LDD     R16, Z+1
   \   00000092   ....               RCALL   hex_to_ascii
   \   00000094   930D               ST      X+, R16
    170              *buf++=hex_to_ascii(*(int*)dwvar[indx].val>>4);
   \   00000096   01FC               MOVW    R31:R30, R25:R24
   \   00000098   9634               ADIW    R31:R30, 4
   \   0000009A   9105               LPM     R16, Z+
   \   0000009C   91F4               LPM     R31, Z
   \   0000009E   2FE0               MOV     R30, R16
   \   000000A0   8100               LD      R16, Z
   \   000000A2   8111               LDD     R17, Z+1
   \   000000A4   E044               LDI     R20, 4
   \   000000A6   ....               RCALL   ?SS_SHR_L02
   \   000000A8   C050               RJMP    ??Param_to_str_5
    171              *buf++=hex_to_ascii(*(int*)dwvar[indx].val);
    172              *buf++=0;
    173          
    174              break;
    175            case tunsigned_long:
    176            case tsigned_long:
    177              *buf++='0';
   \                     ??Param_to_str_2:
   \   000000AA   E300               LDI     R16, 48
   \   000000AC   930C               ST      X, R16
    178              *buf++='x';
   \   000000AE   01FD               MOVW    R31:R30, R27:R26
   \   000000B0   E708               LDI     R16, 120
   \   000000B2   8301               STD     Z+1, R16
    179              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>28);
   \   000000B4   9612               ADIW    R27:R26, 2
   \   000000B6   012D               MOVW    R5:R4, R27:R26
   \   000000B8   9611               ADIW    R27:R26, 1
   \   000000BA   01FC               MOVW    R31:R30, R25:R24
   \   000000BC   9634               ADIW    R31:R30, 4
   \   000000BE   9105               LPM     R16, Z+
   \   000000C0   91F4               LPM     R31, Z
   \   000000C2   2FE0               MOV     R30, R16
   \   000000C4   8103               LDD     R16, Z+3
   \   000000C6   9506               LSR     R16
   \   000000C8   9506               LSR     R16
   \   000000CA   9506               LSR     R16
   \   000000CC   9506               LSR     R16
   \   000000CE   ....               RCALL   hex_to_ascii
   \   000000D0   01F2               MOVW    R31:R30, R5:R4
   \   000000D2   8300               ST      Z, R16
    180              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>24);
   \   000000D4   01FC               MOVW    R31:R30, R25:R24
   \   000000D6   9634               ADIW    R31:R30, 4
   \   000000D8   9105               LPM     R16, Z+
   \   000000DA   91F4               LPM     R31, Z
   \   000000DC   2FE0               MOV     R30, R16
   \   000000DE   8103               LDD     R16, Z+3
   \   000000E0   ....               RCALL   hex_to_ascii
   \   000000E2   930D               ST      X+, R16
    181              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>20);
   \   000000E4   01FC               MOVW    R31:R30, R25:R24
   \   000000E6   9634               ADIW    R31:R30, 4
   \   000000E8   9105               LPM     R16, Z+
   \   000000EA   91F4               LPM     R31, Z
   \   000000EC   2FE0               MOV     R30, R16
   \   000000EE   8100               LD      R16, Z
   \   000000F0   8111               LDD     R17, Z+1
   \   000000F2   8122               LDD     R18, Z+2
   \   000000F4   8133               LDD     R19, Z+3
   \   000000F6   E144               LDI     R20, 20
   \   000000F8   ....               RCALL   ?UL_SHR_L03
   \   000000FA   ....               RCALL   hex_to_ascii
   \   000000FC   930D               ST      X+, R16
    182              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>16);
   \   000000FE   01FC               MOVW    R31:R30, R25:R24
   \   00000100   9634               ADIW    R31:R30, 4
   \   00000102   9105               LPM     R16, Z+
   \   00000104   91F4               LPM     R31, Z
   \   00000106   2FE0               MOV     R30, R16
   \   00000108   8102               LDD     R16, Z+2
   \   0000010A   ....               RCALL   hex_to_ascii
   \   0000010C   930D               ST      X+, R16
    183              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>12);
   \   0000010E   01FC               MOVW    R31:R30, R25:R24
   \   00000110   9634               ADIW    R31:R30, 4
   \   00000112   9105               LPM     R16, Z+
   \   00000114   91F4               LPM     R31, Z
   \   00000116   2FE0               MOV     R30, R16
   \   00000118   8100               LD      R16, Z
   \   0000011A   8111               LDD     R17, Z+1
   \   0000011C   8122               LDD     R18, Z+2
   \   0000011E   8133               LDD     R19, Z+3
   \   00000120   E04C               LDI     R20, 12
   \   00000122   ....               RCALL   ?UL_SHR_L03
   \   00000124   ....               RCALL   hex_to_ascii
   \   00000126   930D               ST      X+, R16
    184              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>8);
   \   00000128   01FC               MOVW    R31:R30, R25:R24
   \   0000012A   9634               ADIW    R31:R30, 4
   \   0000012C   9105               LPM     R16, Z+
   \   0000012E   91F4               LPM     R31, Z
   \   00000130   2FE0               MOV     R30, R16
   \   00000132   8101               LDD     R16, Z+1
   \   00000134   ....               RCALL   hex_to_ascii
   \   00000136   930D               ST      X+, R16
    185              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>4);
   \   00000138   01FC               MOVW    R31:R30, R25:R24
   \   0000013A   9634               ADIW    R31:R30, 4
   \   0000013C   9105               LPM     R16, Z+
   \   0000013E   91F4               LPM     R31, Z
   \   00000140   2FE0               MOV     R30, R16
   \   00000142   8100               LD      R16, Z
   \   00000144   8111               LDD     R17, Z+1
   \   00000146   E044               LDI     R20, 4
   \   00000148   ....               RCALL   ?US_SHR_L02
   \                     ??Param_to_str_5:
   \   0000014A   ....               RCALL   hex_to_ascii
   \   0000014C   930D               ST      X+, R16
    186              *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val);
   \                     ??Param_to_str_4:
   \   0000014E   01FC               MOVW    R31:R30, R25:R24
   \   00000150   9634               ADIW    R31:R30, 4
   \   00000152   9105               LPM     R16, Z+
   \   00000154   91F4               LPM     R31, Z
   \   00000156   2FE0               MOV     R30, R16
   \   00000158   8100               LD      R16, Z
   \   0000015A   ....               RCALL   hex_to_ascii
   \   0000015C   930D               ST      X+, R16
    187              *buf++=0;
   \   0000015E   E000               LDI     R16, 0
   \   00000160   930C               ST      X, R16
    188              break;
    189            case tfloat:
    190          //    sprintf((char*)buf,"%f",*((float*)dwvar[indx].val));
    191              break;
    192            case tdouble:
    193          //    sprintf((char*)buf,"%f",*((double*)dwvar[indx].val));
    194              break;
    195            case tstring:
    196          //    sprintf((char*)buf,"%s",(char*)(dwvar[indx].val));
    197              break;
    198            }
    199          }
   \                     ??Param_to_str_3:
   \   00000162   E0E6               LDI     R30, 6
   \   00000164   ....               RJMP    ?EPILOGUE_B6_L09
    200          
    201          /* ==========================================================
    202             Преобразовать строку в параметр
    203             ========================================================== */

   \                                 In  segment CODE, align 2, keep-with-next
    204          void Str_to_param(unsigned char *buf,int indx)
   \                     Str_to_param:
    205          {
   \   00000000   ....               RCALL   ?PROLOGUE8_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   01C8               MOVW    R25:R24, R17:R16
    206            unsigned char uch_tmp;
    207            signed char sch_tmp;
    208            unsigned int uin_tmp;
    209            signed int sin_tmp;
    210            unsigned long ulg_tmp;
    211            signed long slg_tmp;
    212            float f_tmp;
    213            double d_tmp;
    214            switch (dwvar[indx].vartype)
   \   00000004   0189               MOVW    R17:R16, R19:R18
   \   00000006   E148               LDI     R20, 24
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ....               RCALL   ?S_EC_MUL_L02
   \   0000000C   ....               LDI     R26, LOW(dwvar)
   \   0000000E   ....               LDI     R27, (dwvar) >> 8
   \   00000010   0FA0               ADD     R26, R16
   \   00000012   1FB1               ADC     R27, R17
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   9636               ADIW    R31:R30, 6
   \   00000018   9104               LPM     R16, Z
   \   0000001A   ....               LDI     R30, LOW(`?<Jumptable for Str_to_param>_0`)
   \   0000001C   ....               LDI     R31, (`?<Jumptable for Str_to_param>_0`) >> 8
   \   0000001E   ....               RJMP    ?CV_SWITCH_L06
    215            {
    216            case tunsigned_char:
    217              uch_tmp=strtol((char*)buf,0,0);
   \                     ??Str_to_param_0:
   \   00000020   E040               LDI     R20, 0
   \   00000022   E050               LDI     R21, 0
   \   00000024   E020               LDI     R18, 0
   \   00000026   E030               LDI     R19, 0
   \   00000028   018C               MOVW    R17:R16, R25:R24
   \   0000002A   ....               RCALL   strtol
   \   0000002C   2F50               MOV     R21, R16
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   963F               ADIW    R31:R30, 15
   \   00000032   9105               LPM     R16, Z+
   \   00000034   9115               LPM     R17, Z+
   \   00000036   9125               LPM     R18, Z+
   \   00000038   9134               LPM     R19, Z
   \   0000003A   ....               RCALL   ?F2SL_L04
   \   0000003C   1705               CP      R16, R21
   \   0000003E   F408               BRCC    ??Str_to_param_1
    218              if (uch_tmp>((unsigned char)dwvar[indx].max)) uch_tmp=(unsigned char)dwvar[indx].max;
   \   00000040   2F50               MOV     R21, R16
   \                     ??Str_to_param_1:
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   963B               ADIW    R31:R30, 11
   \   00000046   9105               LPM     R16, Z+
   \   00000048   9115               LPM     R17, Z+
   \   0000004A   9125               LPM     R18, Z+
   \   0000004C   9134               LPM     R19, Z
   \   0000004E   ....               RCALL   ?F2SL_L04
   \   00000050   1750               CP      R21, R16
   \   00000052   F4E0               BRCC    ??Str_to_param_2
    219              if (uch_tmp<((unsigned char)dwvar[indx].min)) uch_tmp=(unsigned char)dwvar[indx].min;
   \   00000054   C01A               RJMP    ??Str_to_param_3
    220              *(unsigned char*)dwvar[indx].val=uch_tmp;
    221              break;
    222            case tsigned_char:
    223              sch_tmp=strtol((char*)buf,0,0);
   \                     ??Str_to_param_4:
   \   00000056   E040               LDI     R20, 0
   \   00000058   E050               LDI     R21, 0
   \   0000005A   E020               LDI     R18, 0
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   018C               MOVW    R17:R16, R25:R24
   \   00000060   ....               RCALL   strtol
   \   00000062   2F50               MOV     R21, R16
   \   00000064   01FD               MOVW    R31:R30, R27:R26
   \   00000066   963F               ADIW    R31:R30, 15
   \   00000068   9105               LPM     R16, Z+
   \   0000006A   9115               LPM     R17, Z+
   \   0000006C   9125               LPM     R18, Z+
   \   0000006E   9134               LPM     R19, Z
   \   00000070   ....               RCALL   ?F2SL_L04
   \   00000072   1705               CP      R16, R21
   \   00000074   F40C               BRGE    ??Str_to_param_5
    224              if (sch_tmp>((signed char)dwvar[indx].max)) sch_tmp=(signed char)dwvar[indx].max;
   \   00000076   2F50               MOV     R21, R16
   \                     ??Str_to_param_5:
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   963B               ADIW    R31:R30, 11
   \   0000007C   9105               LPM     R16, Z+
   \   0000007E   9115               LPM     R17, Z+
   \   00000080   9125               LPM     R18, Z+
   \   00000082   9134               LPM     R19, Z
   \   00000084   ....               RCALL   ?F2SL_L04
   \   00000086   1750               CP      R21, R16
   \   00000088   F40C               BRGE    ??Str_to_param_2
    225              if (sch_tmp<((signed char)dwvar[indx].min)) sch_tmp=(signed char)dwvar[indx].min;
   \                     ??Str_to_param_3:
   \   0000008A   2F50               MOV     R21, R16
    226              *(signed char*)dwvar[indx].val=sch_tmp;
   \                     ??Str_to_param_2:
   \   0000008C   01FD               MOVW    R31:R30, R27:R26
   \   0000008E   9634               ADIW    R31:R30, 4
   \   00000090   91A5               LPM     R26, Z+
   \   00000092   91B4               LPM     R27, Z
   \   00000094   935C               ST      X, R21
    227              break;
   \   00000096   C0DD               RJMP    ??Str_to_param_6
    228            case tunsigned_int:
    229              uin_tmp=strtol((char*)buf,0,0);
   \                     ??Str_to_param_7:
   \   00000098   E040               LDI     R20, 0
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   E020               LDI     R18, 0
   \   0000009E   E030               LDI     R19, 0
   \   000000A0   018C               MOVW    R17:R16, R25:R24
   \   000000A2   ....               RCALL   strtol
   \   000000A4   01B8               MOVW    R23:R22, R17:R16
   \   000000A6   01FD               MOVW    R31:R30, R27:R26
   \   000000A8   963F               ADIW    R31:R30, 15
   \   000000AA   9105               LPM     R16, Z+
   \   000000AC   9115               LPM     R17, Z+
   \   000000AE   9125               LPM     R18, Z+
   \   000000B0   9134               LPM     R19, Z
   \   000000B2   ....               RCALL   ?F2SL_L04
   \   000000B4   1706               CP      R16, R22
   \   000000B6   0717               CPC     R17, R23
   \   000000B8   F408               BRCC    ??Str_to_param_8
    230              if (uin_tmp>((unsigned int)dwvar[indx].max)) uin_tmp=(unsigned int)dwvar[indx].max;
   \   000000BA   01B8               MOVW    R23:R22, R17:R16
   \                     ??Str_to_param_8:
   \   000000BC   01FD               MOVW    R31:R30, R27:R26
   \   000000BE   963B               ADIW    R31:R30, 11
   \   000000C0   9105               LPM     R16, Z+
   \   000000C2   9115               LPM     R17, Z+
   \   000000C4   9125               LPM     R18, Z+
   \   000000C6   9134               LPM     R19, Z
   \   000000C8   ....               RCALL   ?F2SL_L04
   \   000000CA   1760               CP      R22, R16
   \   000000CC   0771               CPC     R23, R17
   \   000000CE   F4F0               BRCC    ??Str_to_param_9
    231              if (uin_tmp<((unsigned int)dwvar[indx].min)) uin_tmp=(unsigned int)dwvar[indx].min;
   \   000000D0   C01C               RJMP    ??Str_to_param_10
    232              *(unsigned int*)dwvar[indx].val=uin_tmp;
    233              break;
    234            case tsigned_int:
    235              sin_tmp=strtol((char*)buf,0,0);
   \                     ??Str_to_param_11:
   \   000000D2   E040               LDI     R20, 0
   \   000000D4   E050               LDI     R21, 0
   \   000000D6   E020               LDI     R18, 0
   \   000000D8   E030               LDI     R19, 0
   \   000000DA   018C               MOVW    R17:R16, R25:R24
   \   000000DC   ....               RCALL   strtol
   \   000000DE   01B8               MOVW    R23:R22, R17:R16
   \   000000E0   01FD               MOVW    R31:R30, R27:R26
   \   000000E2   963F               ADIW    R31:R30, 15
   \   000000E4   9105               LPM     R16, Z+
   \   000000E6   9115               LPM     R17, Z+
   \   000000E8   9125               LPM     R18, Z+
   \   000000EA   9134               LPM     R19, Z
   \   000000EC   ....               RCALL   ?F2SL_L04
   \   000000EE   1706               CP      R16, R22
   \   000000F0   0717               CPC     R17, R23
   \   000000F2   F40C               BRGE    ??Str_to_param_12
    236              if (sin_tmp>((signed int)dwvar[indx].max)) sin_tmp=(signed int)dwvar[indx].max;
   \   000000F4   01B8               MOVW    R23:R22, R17:R16
   \                     ??Str_to_param_12:
   \   000000F6   01FD               MOVW    R31:R30, R27:R26
   \   000000F8   963B               ADIW    R31:R30, 11
   \   000000FA   9105               LPM     R16, Z+
   \   000000FC   9115               LPM     R17, Z+
   \   000000FE   9125               LPM     R18, Z+
   \   00000100   9134               LPM     R19, Z
   \   00000102   ....               RCALL   ?F2SL_L04
   \   00000104   1760               CP      R22, R16
   \   00000106   0771               CPC     R23, R17
   \   00000108   F40C               BRGE    ??Str_to_param_9
    237              if (sin_tmp<((signed int)dwvar[indx].min)) sin_tmp=(signed int)dwvar[indx].min;
   \                     ??Str_to_param_10:
   \   0000010A   01B8               MOVW    R23:R22, R17:R16
    238              *(signed int*)dwvar[indx].val=sin_tmp;
   \                     ??Str_to_param_9:
   \   0000010C   01FD               MOVW    R31:R30, R27:R26
   \   0000010E   9634               ADIW    R31:R30, 4
   \   00000110   9105               LPM     R16, Z+
   \   00000112   91F4               LPM     R31, Z
   \   00000114   2FE0               MOV     R30, R16
   \   00000116   8360               ST      Z, R22
   \   00000118   8371               STD     Z+1, R23
    239              break;
   \   0000011A   C09B               RJMP    ??Str_to_param_6
    240            case tunsigned_long:
    241              ulg_tmp=strtol((char*)buf,0,0);
   \                     ??Str_to_param_13:
   \   0000011C   E040               LDI     R20, 0
   \   0000011E   E050               LDI     R21, 0
   \   00000120   E020               LDI     R18, 0
   \   00000122   E030               LDI     R19, 0
   \   00000124   018C               MOVW    R17:R16, R25:R24
   \   00000126   ....               RCALL   strtol
   \   00000128   0128               MOVW    R5:R4, R17:R16
   \   0000012A   0139               MOVW    R7:R6, R19:R18
   \   0000012C   01FD               MOVW    R31:R30, R27:R26
   \   0000012E   963F               ADIW    R31:R30, 15
   \   00000130   9105               LPM     R16, Z+
   \   00000132   9115               LPM     R17, Z+
   \   00000134   9125               LPM     R18, Z+
   \   00000136   9134               LPM     R19, Z
   \   00000138   ....               RCALL   ?F2UL_L04
   \   0000013A   1504               CP      R16, R4
   \   0000013C   0515               CPC     R17, R5
   \   0000013E   0526               CPC     R18, R6
   \   00000140   0537               CPC     R19, R7
   \   00000142   F410               BRCC    ??Str_to_param_14
    242              if (ulg_tmp>((unsigned long)dwvar[indx].max)) ulg_tmp=(unsigned long)dwvar[indx].max;
   \   00000144   0128               MOVW    R5:R4, R17:R16
   \   00000146   0139               MOVW    R7:R6, R19:R18
   \                     ??Str_to_param_14:
   \   00000148   01FD               MOVW    R31:R30, R27:R26
   \   0000014A   963B               ADIW    R31:R30, 11
   \   0000014C   9105               LPM     R16, Z+
   \   0000014E   9115               LPM     R17, Z+
   \   00000150   9125               LPM     R18, Z+
   \   00000152   9134               LPM     R19, Z
   \   00000154   ....               RCALL   ?F2UL_L04
   \   00000156   1640               CP      R4, R16
   \   00000158   0651               CPC     R5, R17
   \   0000015A   0662               CPC     R6, R18
   \   0000015C   0673               CPC     R7, R19
   \   0000015E   F528               BRCC    ??Str_to_param_15
    243              if (ulg_tmp<((unsigned long)dwvar[indx].min)) ulg_tmp=(unsigned long)dwvar[indx].min;
   \   00000160   C022               RJMP    ??Str_to_param_16
    244              *(unsigned long*)dwvar[indx].val=ulg_tmp;
    245              break;
    246            case tsigned_long:
    247              slg_tmp=strtol((char*)buf,0,0);
   \                     ??Str_to_param_17:
   \   00000162   E040               LDI     R20, 0
   \   00000164   E050               LDI     R21, 0
   \   00000166   E020               LDI     R18, 0
   \   00000168   E030               LDI     R19, 0
   \   0000016A   018C               MOVW    R17:R16, R25:R24
   \   0000016C   ....               RCALL   strtol
   \   0000016E   0128               MOVW    R5:R4, R17:R16
   \   00000170   0139               MOVW    R7:R6, R19:R18
   \   00000172   01FD               MOVW    R31:R30, R27:R26
   \   00000174   963F               ADIW    R31:R30, 15
   \   00000176   9105               LPM     R16, Z+
   \   00000178   9115               LPM     R17, Z+
   \   0000017A   9125               LPM     R18, Z+
   \   0000017C   9134               LPM     R19, Z
   \   0000017E   ....               RCALL   ?F2SL_L04
   \   00000180   1504               CP      R16, R4
   \   00000182   0515               CPC     R17, R5
   \   00000184   0526               CPC     R18, R6
   \   00000186   0537               CPC     R19, R7
   \   00000188   F414               BRGE    ??Str_to_param_18
    248              if (slg_tmp>((signed long)dwvar[indx].max)) slg_tmp=(signed long)dwvar[indx].max;
   \   0000018A   0128               MOVW    R5:R4, R17:R16
   \   0000018C   0139               MOVW    R7:R6, R19:R18
   \                     ??Str_to_param_18:
   \   0000018E   01FD               MOVW    R31:R30, R27:R26
   \   00000190   963B               ADIW    R31:R30, 11
   \   00000192   9105               LPM     R16, Z+
   \   00000194   9115               LPM     R17, Z+
   \   00000196   9125               LPM     R18, Z+
   \   00000198   9134               LPM     R19, Z
   \   0000019A   ....               RCALL   ?F2SL_L04
   \   0000019C   1640               CP      R4, R16
   \   0000019E   0651               CPC     R5, R17
   \   000001A0   0662               CPC     R6, R18
   \   000001A2   0673               CPC     R7, R19
   \   000001A4   F414               BRGE    ??Str_to_param_15
    249              if (slg_tmp<((signed long)dwvar[indx].min)) slg_tmp=(signed long)dwvar[indx].min;
   \                     ??Str_to_param_16:
   \   000001A6   0128               MOVW    R5:R4, R17:R16
   \   000001A8   0139               MOVW    R7:R6, R19:R18
    250              *(signed long*)dwvar[indx].val=slg_tmp;
   \                     ??Str_to_param_15:
   \   000001AA   01FD               MOVW    R31:R30, R27:R26
   \   000001AC   9634               ADIW    R31:R30, 4
   \   000001AE   9105               LPM     R16, Z+
   \   000001B0   91F4               LPM     R31, Z
   \   000001B2   2FE0               MOV     R30, R16
   \   000001B4   8240               ST      Z, R4
   \   000001B6   8251               STD     Z+1, R5
   \   000001B8   8262               STD     Z+2, R6
   \   000001BA   8273               STD     Z+3, R7
    251              break;
   \   000001BC   C04A               RJMP    ??Str_to_param_6
    252            case tfloat:
    253              f_tmp=atof((char*)buf);
   \                     ??Str_to_param_19:
   \   000001BE   018C               MOVW    R17:R16, R25:R24
   \   000001C0   ....               RCALL   atof
   \   000001C2   0108               MOVW    R1:R0, R17:R16
   \   000001C4   0119               MOVW    R3:R2, R19:R18
    254              if (f_tmp>((float)dwvar[indx].max)) f_tmp=(float)dwvar[indx].max;
   \   000001C6   01FD               MOVW    R31:R30, R27:R26
   \   000001C8   963F               ADIW    R31:R30, 15
   \   000001CA   9105               LPM     R16, Z+
   \   000001CC   9115               LPM     R17, Z+
   \   000001CE   9125               LPM     R18, Z+
   \   000001D0   9134               LPM     R19, Z
   \   000001D2   01A0               MOVW    R21:R20, R1:R0
   \   000001D4   01B1               MOVW    R23:R22, R3:R2
   \   000001D6   ....               RCALL   ?F_CMP_LT_L04
   \   000001D8   F410               BRCC    ??Str_to_param_20
   \   000001DA   0108               MOVW    R1:R0, R17:R16
   \   000001DC   0119               MOVW    R3:R2, R19:R18
    255              if (f_tmp<((float)dwvar[indx].min)) f_tmp=(float)dwvar[indx].min;
   \                     ??Str_to_param_20:
   \   000001DE   01FD               MOVW    R31:R30, R27:R26
   \   000001E0   963B               ADIW    R31:R30, 11
   \   000001E2   9145               LPM     R20, Z+
   \   000001E4   9155               LPM     R21, Z+
   \   000001E6   9165               LPM     R22, Z+
   \   000001E8   9174               LPM     R23, Z
   \   000001EA   0180               MOVW    R17:R16, R1:R0
   \   000001EC   0191               MOVW    R19:R18, R3:R2
   \   000001EE   ....               RCALL   ?F_CMP_LT_L04
   \   000001F0   F410               BRCC    ??Str_to_param_21
   \   000001F2   010A               MOVW    R1:R0, R21:R20
   \   000001F4   011B               MOVW    R3:R2, R23:R22
    256              *(float*)dwvar[indx].val=f_tmp;
   \                     ??Str_to_param_21:
   \   000001F6   01FD               MOVW    R31:R30, R27:R26
   \   000001F8   9634               ADIW    R31:R30, 4
   \   000001FA   91A5               LPM     R26, Z+
   \   000001FC   91B4               LPM     R27, Z
   \   000001FE   920D               ST      X+, R0
   \   00000200   921D               ST      X+, R1
   \   00000202   922D               ST      X+, R2
   \   00000204   923C               ST      X, R3
    257              break;
   \   00000206   C025               RJMP    ??Str_to_param_6
    258            case tdouble:
    259              d_tmp=atof((char*)buf);
   \                     ??Str_to_param_22:
   \   00000208   018C               MOVW    R17:R16, R25:R24
   \   0000020A   ....               RCALL   atof
   \   0000020C   0108               MOVW    R1:R0, R17:R16
   \   0000020E   0119               MOVW    R3:R2, R19:R18
    260              if (d_tmp>((double)dwvar[indx].max)) d_tmp=(double)dwvar[indx].max;
   \   00000210   01FD               MOVW    R31:R30, R27:R26
   \   00000212   963F               ADIW    R31:R30, 15
   \   00000214   9105               LPM     R16, Z+
   \   00000216   9115               LPM     R17, Z+
   \   00000218   9125               LPM     R18, Z+
   \   0000021A   9134               LPM     R19, Z
   \   0000021C   01A0               MOVW    R21:R20, R1:R0
   \   0000021E   01B1               MOVW    R23:R22, R3:R2
   \   00000220   ....               RCALL   ?F_CMP_LT_L04
   \   00000222   F410               BRCC    ??Str_to_param_23
   \   00000224   0108               MOVW    R1:R0, R17:R16
   \   00000226   0119               MOVW    R3:R2, R19:R18
    261              if (d_tmp<((double)dwvar[indx].min)) d_tmp=(double)dwvar[indx].min;
   \                     ??Str_to_param_23:
   \   00000228   01FD               MOVW    R31:R30, R27:R26
   \   0000022A   963B               ADIW    R31:R30, 11
   \   0000022C   9145               LPM     R20, Z+
   \   0000022E   9155               LPM     R21, Z+
   \   00000230   9165               LPM     R22, Z+
   \   00000232   9174               LPM     R23, Z
   \   00000234   0180               MOVW    R17:R16, R1:R0
   \   00000236   0191               MOVW    R19:R18, R3:R2
   \   00000238   ....               RCALL   ?F_CMP_LT_L04
   \   0000023A   F410               BRCC    ??Str_to_param_24
   \   0000023C   010A               MOVW    R1:R0, R21:R20
   \   0000023E   011B               MOVW    R3:R2, R23:R22
    262              *(double*)dwvar[indx].val=d_tmp;
   \                     ??Str_to_param_24:
   \   00000240   01FD               MOVW    R31:R30, R27:R26
   \   00000242   9634               ADIW    R31:R30, 4
   \   00000244   9105               LPM     R16, Z+
   \   00000246   91F4               LPM     R31, Z
   \   00000248   2FE0               MOV     R30, R16
   \   0000024A   8200               ST      Z, R0
   \   0000024C   8211               STD     Z+1, R1
   \   0000024E   8222               STD     Z+2, R2
   \   00000250   8233               STD     Z+3, R3
    263              break;
    264            }
    265          }
   \                     ??Str_to_param_6:
   \   00000252   E0E8               LDI     R30, 8
   \   00000254   ....               RJMP    ?EPILOGUE_B8_L09
    266          
    267          // ==========================================================
    268          //  Перезаписать в EEPROM установки по умолчанию. Если нет ошибки то возвращает 0
    269          // ==========================================================

   \                                 In  segment CODE, align 2, keep-with-next
    270          void Restore_default_settings(void)
   \                     Restore_default_settings:
    271          {
   \   00000000   ....               RCALL   ?PROLOGUE5_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
    272            unsigned int i;
    273          
    274            // Загрузить параметры значениями по умолчанию
    275            for (i=0;i<get_params_num();i++)
   \   00000002   E0A0               LDI     R26, 0
   \   00000004   E0B0               LDI     R27, 0
   \   00000006   E008               LDI     R16, 8
   \   00000008   2E40               MOV     R4, R16
    276            {
    277              switch (dwvar[i].vartype)
   \                     ??Restore_default_settings_0:
   \   0000000A   018D               MOVW    R17:R16, R27:R26
   \   0000000C   E148               LDI     R20, 24
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ....               RCALL   ?S_EC_MUL_L02
   \   00000012   ....               LDI     R24, LOW(dwvar)
   \   00000014   ....               LDI     R25, (dwvar) >> 8
   \   00000016   0F80               ADD     R24, R16
   \   00000018   1F91               ADC     R25, R17
   \   0000001A   01FC               MOVW    R31:R30, R25:R24
   \   0000001C   9636               ADIW    R31:R30, 6
   \   0000001E   9104               LPM     R16, Z
   \   00000020   ....               LDI     R30, LOW(`?<Jumptable for Restore_default_settings>_0`)
   \   00000022   ....               LDI     R31, (`?<Jumptable for Restore_default_settings>_0`) >> 8
   \   00000024   ....               RJMP    ?CV_SWITCH_L06
    278              {
    279              case tunsigned_char:
    280                *(unsigned char*)dwvar[i].val=(unsigned char)dwvar[i].defval; break;
    281              case tsigned_char:
    282                *(signed char*)dwvar[i].val=(signed char)dwvar[i].defval; break;
   \                     ??Restore_default_settings_1:
   \   00000026   01FC               MOVW    R31:R30, R25:R24
   \   00000028   9637               ADIW    R31:R30, 7
   \   0000002A   9105               LPM     R16, Z+
   \   0000002C   9115               LPM     R17, Z+
   \   0000002E   9125               LPM     R18, Z+
   \   00000030   9134               LPM     R19, Z
   \   00000032   ....               RCALL   ?F2SL_L04
   \   00000034   2F20               MOV     R18, R16
   \   00000036   01FC               MOVW    R31:R30, R25:R24
   \   00000038   9634               ADIW    R31:R30, 4
   \   0000003A   9105               LPM     R16, Z+
   \   0000003C   91F4               LPM     R31, Z
   \   0000003E   2FE0               MOV     R30, R16
   \   00000040   8320               ST      Z, R18
   \   00000042   C039               RJMP    ??Restore_default_settings_2
    283              case tunsigned_int:
    284                *(unsigned int*)dwvar[i].val=(unsigned int)dwvar[i].defval; break;
    285              case tsigned_int:
    286                *(signed int*)dwvar[i].val=(signed int)dwvar[i].defval; break;
   \                     ??Restore_default_settings_3:
   \   00000044   01FC               MOVW    R31:R30, R25:R24
   \   00000046   9637               ADIW    R31:R30, 7
   \   00000048   9105               LPM     R16, Z+
   \   0000004A   9115               LPM     R17, Z+
   \   0000004C   9125               LPM     R18, Z+
   \   0000004E   9134               LPM     R19, Z
   \   00000050   ....               RCALL   ?F2SL_L04
   \   00000052   2F20               MOV     R18, R16
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   9634               ADIW    R31:R30, 4
   \   00000058   9105               LPM     R16, Z+
   \   0000005A   91F4               LPM     R31, Z
   \   0000005C   2FE0               MOV     R30, R16
   \   0000005E   8320               ST      Z, R18
   \   00000060   8311               STD     Z+1, R17
   \   00000062   C029               RJMP    ??Restore_default_settings_2
    287              case tunsigned_long:
    288                *(unsigned long*)dwvar[i].val=(unsigned long)dwvar[i].defval; break;
   \                     ??Restore_default_settings_4:
   \   00000064   01FC               MOVW    R31:R30, R25:R24
   \   00000066   9637               ADIW    R31:R30, 7
   \   00000068   9105               LPM     R16, Z+
   \   0000006A   9115               LPM     R17, Z+
   \   0000006C   9125               LPM     R18, Z+
   \   0000006E   9134               LPM     R19, Z
   \   00000070   ....               RCALL   ?F2UL_L04
   \   00000072   C007               RJMP    ??Restore_default_settings_5
    289              case tsigned_long:
    290                *(signed long*)dwvar[i].val=(signed long)dwvar[i].defval; break;
   \                     ??Restore_default_settings_6:
   \   00000074   01FC               MOVW    R31:R30, R25:R24
   \   00000076   9637               ADIW    R31:R30, 7
   \   00000078   9105               LPM     R16, Z+
   \   0000007A   9115               LPM     R17, Z+
   \   0000007C   9125               LPM     R18, Z+
   \   0000007E   9134               LPM     R19, Z
   \   00000080   ....               RCALL   ?F2SL_L04
   \                     ??Restore_default_settings_5:
   \   00000082   2F40               MOV     R20, R16
   \   00000084   01FC               MOVW    R31:R30, R25:R24
   \   00000086   9634               ADIW    R31:R30, 4
   \   00000088   9105               LPM     R16, Z+
   \   0000008A   91F4               LPM     R31, Z
   \   0000008C   2FE0               MOV     R30, R16
   \   0000008E   8340               ST      Z, R20
   \   00000090   8311               STD     Z+1, R17
   \   00000092   8322               STD     Z+2, R18
   \   00000094   8333               STD     Z+3, R19
   \   00000096   C00F               RJMP    ??Restore_default_settings_2
    291              case tfloat:
    292                *(float*)dwvar[i].val=dwvar[i].defval; break;
    293              case tdouble:
    294                *(double*)dwvar[i].val=dwvar[i].defval; break;
   \                     ??Restore_default_settings_7:
   \   00000098   01FC               MOVW    R31:R30, R25:R24
   \   0000009A   9637               ADIW    R31:R30, 7
   \   0000009C   9145               LPM     R20, Z+
   \   0000009E   9155               LPM     R21, Z+
   \   000000A0   9165               LPM     R22, Z+
   \   000000A2   9174               LPM     R23, Z
   \   000000A4   01FC               MOVW    R31:R30, R25:R24
   \   000000A6   9634               ADIW    R31:R30, 4
   \   000000A8   9105               LPM     R16, Z+
   \   000000AA   91F4               LPM     R31, Z
   \   000000AC   2FE0               MOV     R30, R16
   \   000000AE   8340               ST      Z, R20
   \   000000B0   8351               STD     Z+1, R21
   \   000000B2   8362               STD     Z+2, R22
   \   000000B4   8373               STD     Z+3, R23
    295              }
    296            }
   \                     ??Restore_default_settings_2:
   \   000000B6   9611               ADIW    R27:R26, 1
   \   000000B8   944A               DEC     R4
   \   000000BA   F009               BREQ    $+2+2
   \   000000BC   CFA6               RJMP    ??Restore_default_settings_0
    297          
    298            // Выполнение инициализационных функций параметров
    299            for (i=0;i<get_params_num();i++)
   \   000000BE   E0A0               LDI     R26, 0
   \   000000C0   E0B0               LDI     R27, 0
   \   000000C2   E088               LDI     R24, 8
   \                     ??Restore_default_settings_8:
   \   000000C4   018D               MOVW    R17:R16, R27:R26
   \   000000C6   E148               LDI     R20, 24
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ....               RCALL   ?S_EC_MUL_L02
   \   000000CC   ....               LDI     R30, LOW(dwvar)
   \   000000CE   ....               LDI     R31, (dwvar) >> 8
   \   000000D0   0FE0               ADD     R30, R16
   \   000000D2   1FF1               ADC     R31, R17
   \   000000D4   9675               ADIW    R31:R30, 21
   \   000000D6   9125               LPM     R18, Z+
   \   000000D8   9134               LPM     R19, Z
   \   000000DA   3020               CPI     R18, 0
   \   000000DC   0735               CPC     R19, R21
   \   000000DE   F011               BREQ    ??Restore_default_settings_9
    300            {
    301              if (dwvar[i].func!=0) dwvar[i].func();
   \   000000E0   01F9               MOVW    R31:R30, R19:R18
   \   000000E2   9509               ICALL
    302            }
   \                     ??Restore_default_settings_9:
   \   000000E4   9611               ADIW    R27:R26, 1
   \   000000E6   958A               DEC     R24
   \   000000E8   F769               BRNE    ??Restore_default_settings_8
    303          
    304            Save_Params_To_EEPROM();
   \   000000EA   ....               RCALL   Save_Params_To_EEPROM
    305          }
   \   000000EC   E0E5               LDI     R30, 5
   \   000000EE   ....               RJMP    ?EPILOGUE_B5_L09
    306          // ==========================================================
    307          //  Сохранить всю область рабочих параметров в EEPROM
    308          // ==========================================================

   \                                 In  segment CODE, align 2, keep-with-next
    309          void Save_Params_To_EEPROM(void)
   \                     Save_Params_To_EEPROM:
    310          {
    311            wp.version = PRG_VERSION;
   \   00000000   ....               LDI     R30, LOW(wp)
   \   00000002   ....               LDI     R31, (wp) >> 8
   \   00000004   E60A               LDI     R16, 106
   \   00000006   E010               LDI     R17, 0
   \   00000008   8300               ST      Z, R16
   \   0000000A   8311               STD     Z+1, R17
    312            ee_wp      = wp;
   \   0000000C   ....               LDI     R20, LOW(ee_wp)
   \   0000000E   ....               LDI     R21, (ee_wp) >> 8
   \   00000010   E111               LDI     R17, 17
   \   00000012   E020               LDI     R18, 0
   \   00000014   ....               RCALL   ?ML_SRAM_EEPROM_16_16_L07
    313            ee_crc     = GetBlockCRC((unsigned char*)&wp,sizeof(wp));
   \   00000016   E141               LDI     R20, 17
   \   00000018   E050               LDI     R21, 0
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   ....               LDI     R16, LOW(wp)
   \   00000020   ....               LDI     R17, (wp) >> 8
   \   00000022   ....               RCALL   GetBlockCRC
   \   00000024   ....               LDI     R20, LOW(ee_crc)
   \   00000026   ....               LDI     R21, (ee_crc) >> 8
   \   00000028   ....               RJMP    __eeput16_16
    314          
    315          }
    316          
    317          
    318          // ==========================================================
    319          //  Восстановить область рабочих параметров из EEPROM
    320          // ==========================================================

   \                                 In  segment CODE, align 2, keep-with-next
    321          unsigned char Restore_settings_from_eeprom(void)
   \                     Restore_settings_from_eeprom:
    322          {
    323            wp = ee_wp;
   \   00000000   ....               LDI     R30, LOW(wp)
   \   00000002   ....               LDI     R31, (wp) >> 8
   \   00000004   ....               LDI     R20, LOW(ee_wp)
   \   00000006   ....               LDI     R21, (ee_wp) >> 8
   \   00000008   E111               LDI     R17, 17
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   ....               RCALL   ?ML_EEPROM_SRAM_16_16_L07
    324            if (ee_crc != GetBlockCRC((unsigned char*)&wp,sizeof(wp)))
   \   0000000E   E141               LDI     R20, 17
   \   00000010   E050               LDI     R21, 0
   \   00000012   E060               LDI     R22, 0
   \   00000014   E070               LDI     R23, 0
   \   00000016   ....               LDI     R16, LOW(wp)
   \   00000018   ....               LDI     R17, (wp) >> 8
   \   0000001A   ....               RCALL   GetBlockCRC
   \   0000001C   0198               MOVW    R19:R18, R17:R16
   \   0000001E   ....               LDI     R20, LOW(ee_crc)
   \   00000020   ....               LDI     R21, (ee_crc) >> 8
   \   00000022   ....               RCALL   __eeget16_16
   \   00000024   1702               CP      R16, R18
   \   00000026   0713               CPC     R17, R19
   \   00000028   F011               BREQ    ??Restore_settings_from_eeprom_0
    325              return 0;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   9508               RET
    326            else
    327              return 1;
   \                     ??Restore_settings_from_eeprom_0:
   \   0000002E   E001               LDI     R16, 1
   \   00000030   9508               RET
    328          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "WDTPER">>`:
   \   00000000   445750545245       DC8 "WDTPER"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "WDTDVC">>`:
   \   00000000   445744544356       DC8 "WDTDVC"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "WDTDVV">>`:
   \   00000000   445744545656       DC8 "WDTDVV"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "BTRATE">>`:
   \   00000000   544241524554       DC8 "BTRATE"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "SFLAGS">>`:
   \   00000000   4653414C5347       DC8 "SFLAGS"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "PREAMB">>`:
   \   00000000   52504145424D       DC8 "PREAMB"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "REFCOD">>`:
   \   00000000   45524346444F       DC8 "REFCOD"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "KEYCOD">>`:
   \   00000000   454B4359444F       DC8 "KEYCOD"
   \              00          

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for Str_to_param>_0`:
   \   00000000   00                 DB      0
   \   00000001   00                 DB      0
   \   00000002   ....               DW      (??Str_to_param_6) /2
   \   00000004   0008               DW      8
   \   00000006   ....               DW      (??Str_to_param_0) /2
   \   00000008   ....               DW      (??Str_to_param_4) /2
   \   0000000A   ....               DW      (??Str_to_param_7) /2
   \   0000000C   ....               DW      (??Str_to_param_11) /2
   \   0000000E   ....               DW      (??Str_to_param_13) /2
   \   00000010   ....               DW      (??Str_to_param_17) /2
   \   00000012   ....               DW      (??Str_to_param_19) /2
   \   00000014   ....               DW      (??Str_to_param_22) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for Restore_default_settings>_0`:
   \   00000000   00                 DB      0
   \   00000001   00                 DB      0
   \   00000002   ....               DW      (??Restore_default_settings_2) /2
   \   00000004   0008               DW      8
   \   00000006   ....               DW      (??Restore_default_settings_1) /2
   \   00000008   ....               DW      (??Restore_default_settings_1) /2
   \   0000000A   ....               DW      (??Restore_default_settings_3) /2
   \   0000000C   ....               DW      (??Restore_default_settings_3) /2
   \   0000000E   ....               DW      (??Restore_default_settings_4) /2
   \   00000010   ....               DW      (??Restore_default_settings_6) /2
   \   00000012   ....               DW      (??Restore_default_settings_7) /2
   \   00000014   ....               DW      (??Restore_default_settings_7) /2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "WDTPER">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "WDTPER">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "WDTDVC">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "WDTDVC">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "WDTDVV">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "WDTDVV">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "BTRATE">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "BTRATE">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "SFLAGS">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "SFLAGS">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "PREAMB">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "PREAMB">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "REFCOD">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "REFCOD">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "KEYCOD">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "KEYCOD">>`
    329          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      6      2   Param_to_str
        6      2   -> hex_to_ascii
        6      2 ?SS_SHR_L02
        6      2 ?S_EC_MUL_L02
        6      2 ?UL_SHR_L03
        6      2 ?US_SHR_L02
      5      2   Restore_default_settings
        5      2   -- Indirect call
        5      2   -> Save_Params_To_EEPROM
        5      2 ?CV_SWITCH_L06
        5      2 ?F2SL_L04
        5      2 ?F2UL_L04
        5      2 ?S_EC_MUL_L02
      0      2   Restore_settings_from_eeprom
        0      2   -> GetBlockCRC
        0      2 ?ML_EEPROM_SRAM_16_16_L07
        0      2 __eeget16_16
      0      2   Save_Params_To_EEPROM
        0      2   -> GetBlockCRC
        0      2 ?ML_SRAM_EEPROM_16_16_L07
        0      2 __eeput16_16
      8      2   Str_to_param
        8      2   -> atof
        8      2   -> strtol
        8      2 ?CV_SWITCH_L06
        8      2 ?F2SL_L04
        8      2 ?F2UL_L04
        8      2 ?F_CMP_LT_L04
        8      2 ?S_EC_MUL_L02
      0      2   get_params_name
        0      2 ?S_EC_MUL_L02
      0      2   get_params_num


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "BTRATE">
       7  ?<Constant "KEYCOD">
       7  ?<Constant "PREAMB">
       7  ?<Constant "REFCOD">
       7  ?<Constant "SFLAGS">
       7  ?<Constant "WDTDVC">
       7  ?<Constant "WDTDVV">
       7  ?<Constant "WDTPER">
       7  ?<Initializer for <Constant "BTRATE">>
       7  ?<Initializer for <Constant "KEYCOD">>
       7  ?<Initializer for <Constant "PREAMB">>
       7  ?<Initializer for <Constant "REFCOD">>
       7  ?<Initializer for <Constant "SFLAGS">>
       7  ?<Initializer for <Constant "WDTDVC">>
       7  ?<Initializer for <Constant "WDTDVV">>
       7  ?<Initializer for <Constant "WDTPER">>
      22  ?<Jumptable for Restore_default_settings>_0
      22  ?<Jumptable for Str_to_param>_0
     358  Param_to_str
     240  Restore_default_settings
      50  Restore_settings_from_eeprom
      42  Save_Params_To_EEPROM
     598  Str_to_param
     192  dwvar
       2  ee_crc
      17  ee_wp
      20  get_params_name
       6  get_params_num
      17  wp
       6  -- Other

 
 1 314 bytes in segment CODE
    19 bytes in segment EEPROM_N
     6 bytes in segment INITTAB
   192 bytes in segment NEAR_F
    56 bytes in segment NEAR_I
    56 bytes in segment NEAR_ID
    17 bytes in segment NEAR_N
    44 bytes in segment SWITCH
 
 1 606 bytes of CODE  memory (+ 6 bytes shared)
    73 bytes of DATA  memory
    19 bytes of XDATA memory

Errors: none
Warnings: none

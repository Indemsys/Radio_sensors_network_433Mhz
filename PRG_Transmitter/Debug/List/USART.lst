###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       26/Oct/2021  17:01:07
# Copyright 1996-2021 IAR Systems AB.
#
#    Source file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\USART.c
#    Command line =  
#        -f C:\Users\aly\AppData\Local\Temp\EW92E5.tmp
#        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\USART.c
#        --cpu=m8 -ms -o
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj
#        -lCN
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
#        -lB
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
#        --initializers_in_flash --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -Ohz)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List\USART.lst
#    Object file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj\USART.r90
#
###############################################################################

D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\USART.c
      1          #include <iom8.h>

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UCSRC
   \                     _A_UCSRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1
      2          #include <ina90.h>
      3          
      4          #include "main.h"
      5          
      6          
      7          #define USART_RX_BUFFER_SIZE 32     /* 2,4,8,16,32,64,128 or 256 bytes */
      8          #define USART_TX_BUFFER_SIZE 32     /* 2,4,8,16,32,64,128 or 256 bytes */
      9          #define USART_RX_BUFFER_MASK ( USART_RX_BUFFER_SIZE - 1 )
     10          #define USART_TX_BUFFER_MASK ( USART_TX_BUFFER_SIZE - 1 )
     11          #if ( USART_RX_BUFFER_SIZE & USART_RX_BUFFER_MASK )
     12          #error RX buffer size is not a power of 2
     13          #endif
     14          #if ( USART_TX_BUFFER_SIZE & USART_TX_BUFFER_MASK )
     15          #error TX buffer size is not a power of 2
     16          #endif
     17          
     18          /* Static Variables */

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19          static unsigned char USART_RxBuf[USART_RX_BUFFER_SIZE];
   \                     USART_RxBuf:
   \   00000000                      DS8 32

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     20          static volatile unsigned char USART_RxHead;
   \                     USART_RxHead:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     21          static volatile unsigned char USART_RxTail;
   \                     USART_RxTail:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     22          static unsigned char USART_TxBuf[USART_TX_BUFFER_SIZE];
   \                     USART_TxBuf:
   \   00000000                      DS8 32

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     23          static volatile unsigned char USART_TxHead;
   \                     USART_TxHead:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     24          static volatile unsigned char USART_TxTail;
   \                     USART_TxTail:
   \   00000000                      DS8 1
     25          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     26          static volatile unsigned char tx_complete;
   \                     tx_complete:
   \   00000000                      DS8 1
     27          
     28          #include "USART.h"
     29          
     30          
     31          /*
     32          Инициализация UART
     33          
     34          корость расчитываеться по формуле UBRR = Fosc/(8*BAUD) - 1
     35          */

   \                                 In  segment CODE, align 2, keep-with-next
     36          void USART_Init( unsigned int baudrate )
   \                     USART_Init:
     37          {
     38            unsigned char x;
     39          
     40            UBRRH = (unsigned char) (baudrate>>8);
   \   00000000   BD10               OUT     0x20, R17
     41            UBRRL = (unsigned char) baudrate;
   \   00000002   B909               OUT     0x09, R16
     42          
     43            UCSRA = (1 << U2X);
   \   00000004   E002               LDI     R16, 2
   \   00000006   B90B               OUT     0x0B, R16
     44            /* Enable UART receiver and transmitter */
     45            UCSRB = ( ( 1 << RXCIE ) | ( 1 << RXEN ) | ( 1 << TXEN ) | ( 1 << TXCIE ));
   \   00000008   ED08               LDI     R16, 216
   \   0000000A   B90A               OUT     0x0A, R16
     46          
     47            /* Set frame format: 8 data 2stop */
     48            UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
   \   0000000C   E80E               LDI     R16, 142
   \   0000000E   BD00               OUT     0x20, R16
     49          
     50            /* Flush receive buffer */
     51            x = 0;
     52          
     53            USART_RxTail = x;
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     USART_RxTail, R16
     54            USART_RxHead = x;
   \   00000016   9300....           STS     USART_RxHead, R16
     55            USART_TxTail = x;
   \   0000001A   9300....           STS     USART_TxTail, R16
     56            USART_TxHead = x;
   \   0000001E   9300....           STS     USART_TxHead, R16
     57          }
   \   00000022   9508               RET
   \   00000024                      REQUIRE _A_UCSRC
   \   00000024                      REQUIRE _A_UBRRL
   \   00000024                      REQUIRE _A_UCSRA
   \   00000024                      REQUIRE _A_UCSRB
     58          
     59          

   \                                 In  segment CODE, align 2, keep-with-next
     60          void USART_close(void)
   \                     USART_close:
     61          {
     62            UCSRA = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   B90B               OUT     0x0B, R16
     63            UCSRB = 0;
   \   00000004   B90A               OUT     0x0A, R16
     64            UCSRC = 0;
   \   00000006   BD00               OUT     0x20, R16
     65          }
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_UCSRA
   \   0000000A                      REQUIRE _A_UCSRB
   \   0000000A                      REQUIRE _A_UCSRC
     66          
     67          /* Interrupt handlers */
     68          #pragma vector=USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     69          __interrupt void USART_RX_interrupt( void )
   \                     USART_RX_interrupt:
     70          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B73F               IN      R19, 0x3F
     71            unsigned char data;
     72            unsigned char tmphead;
     73          
     74            /* Read the received data */
     75            data = UDR;
   \   0000000E   B12C               IN      R18, 0x0C
     76            /* Calculate buffer index */
     77            tmphead = ( USART_RxHead + 1 ) & USART_RX_BUFFER_MASK;
   \   00000010   9100....           LDS     R16, USART_RxHead
   \   00000014   9503               INC     R16
   \   00000016   710F               ANDI    R16, 0x1F
     78            USART_RxHead = tmphead;      /* Store new index */
   \   00000018   9300....           STS     USART_RxHead, R16
     79          
     80            if ( tmphead == USART_RxTail )
   \   0000001C   9110....           LDS     R17, USART_RxTail
     81            {
     82              /* ERROR! Receive buffer overflow */
     83            }
     84          
     85            USART_RxBuf[tmphead] = data; /* Store received data in buffer */
   \   00000020   E0F0               LDI     R31, 0
   \   00000022   2FE0               MOV     R30, R16
   \   00000024   ....               SUBI    R30, LOW((-(USART_RxBuf) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(USART_RxBuf) & 0xFFFF) >> 8
   \   00000028   8320               ST      Z, R18
     86          
     87          }
   \   0000002A   BF3F               OUT     0x3F, R19
   \   0000002C   9109               LD      R16, Y+
   \   0000002E   9119               LD      R17, Y+
   \   00000030   9129               LD      R18, Y+
   \   00000032   9139               LD      R19, Y+
   \   00000034                      REQUIRE ?Subroutine0
   \   00000034                      REQUIRE _A_UDR
   \   00000034                      ;               // Fall through to label ?Subroutine0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   91E9               LD      R30, Y+
   \   00000002   91F9               LD      R31, Y+
   \   00000004   9518               RETI
     88          

   \                                 In  segment CODE, align 2, keep-with-next
     89          void wait_until_tx_complete(void)
   \                     wait_until_tx_complete:
     90          {
     91            while (tx_complete != 0 );
   \                     ??wait_until_tx_complete_0:
   \   00000000   9100....           LDS     R16, tx_complete
   \   00000004   2300               TST     R16
   \   00000006   F7E1               BRNE    ??wait_until_tx_complete_0
     92          }
   \   00000008   9508               RET
     93          
     94          
     95          #pragma vector=USART_TXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     96          __interrupt void USART_TXC_interrupt( void )
   \                     USART_TXC_interrupt:
     97          {
   \   00000000   930A               ST      -Y, R16
     98            if ((UCSRB & (1<<UDRIE)) == 0) tx_complete = 0;
   \   00000002   9955               SBIC    0x0A, 0x05
   \   00000004   C003               RJMP    ??USART_TXC_interrupt_0
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     tx_complete, R16
     99          }
   \                     ??USART_TXC_interrupt_0:
   \   0000000C   9109               LD      R16, Y+
   \   0000000E   9518               RETI
   \   00000010                      REQUIRE _A_UCSRB
    100          
    101          
    102          #pragma vector=USART_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    103          __interrupt void USART_TX_interrupt( void )
   \                     USART_TX_interrupt:
    104          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
    105            unsigned char tmptail;
    106          
    107            /* Check if all data is transmitted */
    108            tmptail = USART_TxTail;
   \   0000000C   9100....           LDS     R16, USART_TxTail
    109            if ( USART_TxHead != tmptail )
   \   00000010   9110....           LDS     R17, USART_TxHead
   \   00000014   1710               CP      R17, R16
   \   00000016   F069               BREQ    ??USART_TX_interrupt_0
    110            {
    111              /* Calculate buffer index */
    112              tmptail = ( USART_TxTail + 1 ) & USART_TX_BUFFER_MASK;
   \   00000018   9100....           LDS     R16, USART_TxTail
   \   0000001C   9503               INC     R16
   \   0000001E   710F               ANDI    R16, 0x1F
    113              USART_TxTail = tmptail;      /* Store new index */
   \   00000020   9300....           STS     USART_TxTail, R16
    114          
    115              UDR = USART_TxBuf[tmptail];  /* Start transmition */
   \   00000024   E0F0               LDI     R31, 0
   \   00000026   2FE0               MOV     R30, R16
   \   00000028   ....               SUBI    R30, LOW((-(USART_TxBuf) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(USART_TxBuf) & 0xFFFF) >> 8
   \   0000002C   8100               LD      R16, Z
   \   0000002E   B90C               OUT     0x0C, R16
   \   00000030   C001               RJMP    ??USART_TX_interrupt_1
    116            }
    117            else
    118            {
    119              UCSRB &= ~(1<<UDRIE);         /* Disable UDRE interrupt */
   \                     ??USART_TX_interrupt_0:
   \   00000032   9855               CBI     0x0A, 0x05
    120            }
    121          }
   \                     ??USART_TX_interrupt_1:
   \   00000034   BF2F               OUT     0x3F, R18
   \   00000036   9109               LD      R16, Y+
   \   00000038   9119               LD      R17, Y+
   \   0000003A   9129               LD      R18, Y+
   \   0000003C   ....               RJMP    ?Subroutine0
   \   0000003E                      REQUIRE _A_UDR
   \   0000003E                      REQUIRE _A_UCSRB
    122          
    123          /* Read and write functions */

   \                                 In  segment CODE, align 2, keep-with-next
    124          unsigned char USART_Receive( void )
   \                     USART_Receive:
    125          {
    126            unsigned char tmptail;
    127          
    128          
    129            tmptail =  USART_RxTail;
   \   00000000   9100....           LDS     R16, USART_RxTail
    130            while ( USART_RxHead == tmptail );
   \                     ??USART_Receive_0:
   \   00000004   9110....           LDS     R17, USART_RxHead
   \   00000008   1710               CP      R17, R16
   \   0000000A   F3E1               BREQ    ??USART_Receive_0
    131            tmptail = ( USART_RxTail + 1 ) & USART_RX_BUFFER_MASK;/* Calculate buffer index */
   \   0000000C   9100....           LDS     R16, USART_RxTail
   \   00000010   9503               INC     R16
   \   00000012   710F               ANDI    R16, 0x1F
    132          
    133            USART_RxTail = tmptail;                /* Store new index */
   \   00000014   9300....           STS     USART_RxTail, R16
    134          
    135            return USART_RxBuf[tmptail];           /* Return data */
   \   00000018   E0F0               LDI     R31, 0
   \   0000001A   2FE0               MOV     R30, R16
   \   0000001C   ....               SUBI    R30, LOW((-(USART_RxBuf) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(USART_RxBuf) & 0xFFFF) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   9508               RET
    136          }
    137          

   \                                 In  segment CODE, align 2, keep-with-next
    138          void USART_Transmit( unsigned char data )
   \                     USART_Transmit:
    139          {
    140            unsigned char tmphead;
    141            /* Calculate buffer index */
    142            tmphead = ( USART_TxHead + 1 ) & USART_TX_BUFFER_MASK; /* Wait for free space in buffer */
   \   00000000   9120....           LDS     R18, USART_TxHead
   \   00000004   9523               INC     R18
   \   00000006   712F               ANDI    R18, 0x1F
    143            while ( tmphead == USART_TxTail );
   \                     ??USART_Transmit_0:
   \   00000008   9110....           LDS     R17, USART_TxTail
   \   0000000C   1721               CP      R18, R17
   \   0000000E   F3E1               BREQ    ??USART_Transmit_0
    144          
    145            USART_TxBuf[tmphead] = data;           /* Store data in buffer */
   \   00000010   E0F0               LDI     R31, 0
   \   00000012   2FE2               MOV     R30, R18
   \   00000014   ....               SUBI    R30, LOW((-(USART_TxBuf) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(USART_TxBuf) & 0xFFFF) >> 8
   \   00000018   8300               ST      Z, R16
    146            USART_TxHead = tmphead;                /* Store new index */
   \   0000001A   9320....           STS     USART_TxHead, R18
    147          
    148            UCSRB |= (1<<UDRIE);                   /* Enable UDRE interrupt */
   \   0000001E   9A55               SBI     0x0A, 0x05
    149            tx_complete = 1;
   \   00000020   E001               LDI     R16, 1
   \   00000022   9300....           STS     tx_complete, R16
    150          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_UCSRB
    151          

   \                                 In  segment CODE, align 2, keep-with-next
    152          unsigned char DataInReceiveBuffer( void )
   \                     DataInReceiveBuffer:
    153          {
    154            unsigned char tmptail;
    155          
    156            tmptail =  USART_RxTail;
   \   00000000   9100....           LDS     R16, USART_RxTail
    157            return ( USART_RxHead != tmptail ); /* Return 0 (FALSE) if the receive buffer is empty */
   \   00000004   9110....           LDS     R17, USART_RxHead
   \   00000008   1710               CP      R17, R16
   \   0000000A   F011               BREQ    ??DataInReceiveBuffer_0
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   9508               RET
   \                     ??DataInReceiveBuffer_0:
   \   00000010   E000               LDI     R16, 0
   \   00000012   9508               RET
    158          }
    159          

   \                                 In  segment CODE, align 2, keep-with-next
    160          void USART_sendstr(char *strbuf)
   \                     USART_sendstr:
    161          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   C002               RJMP    ??USART_sendstr_0
    162            while (*strbuf!=0) USART_Transmit(*strbuf++);
   \                     ??USART_sendstr_1:
   \   00000006   9611               ADIW    R27:R26, 1
   \   00000008   ....               RCALL   USART_Transmit
   \                     ??USART_sendstr_0:
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8100               LD      R16, Z
   \   0000000E   2300               TST     R16
   \   00000010   F7D1               BRNE    ??USART_sendstr_1
    163          
    164          }
   \   00000012   E0E4               LDI     R30, 4
   \   00000014   ....               RJMP    ?EPILOGUE_B4_L09

   \                                 In  segment INTVEC, offset 0x16, root
   \                     `??USART_RX_interrupt::??INTVEC 22`:
   \   00000016   ....               RJMP    USART_RX_interrupt

   \                                 In  segment INTVEC, offset 0x18, root
   \                     `??USART_TX_interrupt::??INTVEC 24`:
   \   00000018   ....               RJMP    USART_TX_interrupt

   \                                 In  segment INTVEC, offset 0x1a, root
   \                     `??USART_TXC_interrupt::??INTVEC 26`:
   \   0000001A   ....               RJMP    USART_TXC_interrupt

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   DataInReceiveBuffer
      0      2   USART_Init
      6      2   USART_RX_interrupt
      0      2   USART_Receive
      1      2   USART_TXC_interrupt
      5      2   USART_TX_interrupt
      0      2   USART_Transmit
      0      2   USART_close
      4      2   USART_sendstr
        4      2   -> USART_Transmit
      0      2   wait_until_tx_complete


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?Subroutine0
      20  DataInReceiveBuffer
      36  USART_Init
      52  USART_RX_interrupt
       2  USART_RX_interrupt::??INTVEC 22
      36  USART_Receive
      32  USART_RxBuf
       1  USART_RxHead
       1  USART_RxTail
      16  USART_TXC_interrupt
       2  USART_TXC_interrupt::??INTVEC 26
      62  USART_TX_interrupt
       2  USART_TX_interrupt::??INTVEC 24
      40  USART_Transmit
      32  USART_TxBuf
       1  USART_TxHead
       1  USART_TxTail
      10  USART_close
      22  USART_sendstr
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UCSRC
       1  _A_UDR
       1  tx_complete
      10  wait_until_tx_complete
       6  -- Other

 
   5 bytes in segment ABSOLUTE
 310 bytes in segment CODE
   6 bytes in segment INITTAB
   6 bytes in segment INTVEC
  69 bytes in segment NEAR_Z
 
 310 bytes of CODE memory (+ 12 bytes shared)
  69 bytes of DATA memory (+  5 bytes shared)

Errors: none
Warnings: none

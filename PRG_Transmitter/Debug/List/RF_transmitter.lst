###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       26/Oct/2021  17:01:07
# Copyright 1996-2021 IAR Systems AB.
#
#    Source file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\RF_transmitter.c
#    Command line =  
#        -f C:\Users\aly\AppData\Local\Temp\EW92E7.tmp
#        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\RF_transmitter.c
#        --cpu=m8 -ms -o
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj
#        -lCN
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
#        -lB
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List
#        --initializers_in_flash --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -Ohz)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\List\RF_transmitter.lst
#    Object file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\Debug\Obj\RF_transmitter.r90
#
###############################################################################

D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Transmitter\RF_transmitter.c
      1          #include <iom8.h>
      2          #include <ina90.h>
      3          #include <string.h>
      4          #include <pgmspace.h>
      5          #include <stdio.h>
      6          #include "main.h"
      7          #include "Timers.h"
      8          #include "RF_transmitter.h"
      9          #include "RF_settings.h"
     10          #include "Util.h"
     11          #include "rc4.h"
     12          
     13          extern TPARAMS wp;   // Рабочие параметры в RAM
     14          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     15          volatile unsigned long   preamble;   // Текущий остаток преамбулы для передачи
   \                     preamble:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          unsigned int   bit_count;  // Счетчик посылаемых бит
   \                     bit_count:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     17          unsigned char  sended_cnt; // Количество посланных байта
   \                     sended_cnt:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     18          volatile char *ptr_pack;   // Указатель на буфер содержащий посылаемый пакет
   \                     ptr_pack:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19          unsigned char  pack_len;   // Длина посылаемого пакета
   \                     pack_len:
   \   00000000                      DS8 1
     20          
     21          extern volatile tflags flags;
     22          extern unsigned int rf_bitrate;
     23          
     24          
     25          /*----------------------------------------------------------------------
     26          Отправка пакета передатчику
     27          
     28          Аргументы:
     29          *buf - указатель на буффер с данным
     30          cnt - количество данных в буфере
     31          
     32          ------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     33          void RF_send(char *buf,unsigned char cnt)
   \                     RF_send:
     34          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01C8               MOVW    R25:R24, R17:R16
   \   00000004   2FA2               MOV     R26, R18
     35            unsigned int crc;
     36            crc=GetBlockCRC((unsigned char*)buf,cnt);
   \   00000006   2F42               MOV     R20, R18
   \   00000008   E050               LDI     R21, 0
   \   0000000A   E060               LDI     R22, 0
   \   0000000C   E070               LDI     R23, 0
   \   0000000E   ....               RCALL   GetBlockCRC
     37            buf[cnt]  =(crc>>8);
   \   00000010   E0B0               LDI     R27, 0
   \   00000012   01FC               MOVW    R31:R30, R25:R24
   \   00000014   0FEA               ADD     R30, R26
   \   00000016   1FFB               ADC     R31, R27
   \   00000018   8310               ST      Z, R17
     38            buf[cnt+1]=(crc & 0xFF);
   \   0000001A   8301               STD     Z+1, R16
     39          
     40            rc4_setup((unsigned char*)&wp.keycode, 4);
   \   0000001C   E024               LDI     R18, 4
   \   0000001E   ....               LDI     R16, LOW((wp + 13))
   \   00000020   ....               LDI     R17, HIGH((wp + 13))
   \   00000022   ....               RCALL   rc4_setup
     41            rc4_crypt((unsigned char*)buf, 11 );
   \   00000024   E02B               LDI     R18, 11
   \   00000026   E030               LDI     R19, 0
   \   00000028   018C               MOVW    R17:R16, R25:R24
   \   0000002A   ....               RCALL   rc4_crypt
     42          
     43            // Назначение глобальных переменных используемых обработчиком прерывания
     44            preamble       = 0xFFFF0000 | wp.preamble;
   \   0000002C   ....               LDI     R30, LOW(wp)
   \   0000002E   ....               LDI     R31, (wp) >> 8
   \   00000030   8541               LDD     R20, Z+9
   \   00000032   8552               LDD     R21, Z+10
   \   00000034   EF6F               LDI     R22, 255
   \   00000036   ....               LDI     R30, LOW(preamble)
   \   00000038   ....               LDI     R31, (preamble) >> 8
   \   0000003A   8340               ST      Z, R20
   \   0000003C   8351               STD     Z+1, R21
   \   0000003E   8362               STD     Z+2, R22
   \   00000040   8363               STD     Z+3, R22
     45            bit_count      = 0;
   \   00000042   ....               LDI     R30, LOW(bit_count)
   \   00000044   ....               LDI     R31, (bit_count) >> 8
   \   00000046   83B0               ST      Z, R27
   \   00000048   83B1               STD     Z+1, R27
     46            sended_cnt     = 0;
   \   0000004A   93B0....           STS     sended_cnt, R27
     47            ptr_pack       = buf;
   \   0000004E   ....               LDI     R30, LOW(ptr_pack)
   \   00000050   ....               LDI     R31, (ptr_pack) >> 8
   \   00000052   8380               ST      Z, R24
   \   00000054   8391               STD     Z+1, R25
     48            pack_len       = cnt + 2; // С учетом добавленной контролльной суммы
   \   00000056   5FAE               SUBI    R26, 254
   \   00000058   93A0....           STS     pack_len, R26
     49          
     50            flags.centre   =0;
   \   0000005C   ....               LDI     R30, LOW(flags)
   \   0000005E   ....               LDI     R31, (flags) >> 8
   \   00000060   8120               LD      R18, Z
   \   00000062   7F2D               ANDI    R18, 0xFD
   \   00000064   8320               ST      Z, R18
     51            flags.lastb    =0;
   \   00000066   8120               LD      R18, Z
   \   00000068   7F27               ANDI    R18, 0xF7
   \   0000006A   8320               ST      Z, R18
     52            flags.done     =0;
   \   0000006C   8120               LD      R18, Z
   \   0000006E   7F2B               ANDI    R18, 0xFB
   \   00000070   8320               ST      Z, R18
     53            flags.preamble =1;
   \   00000072   8120               LD      R18, Z
   \   00000074   6021               ORI     R18, 0x01
   \   00000076   8320               ST      Z, R18
     54          
     55            // Взвести бит на выходе к передатчику
     56            // Разрешить прерывания таймера 1 по каналу A каждые полбита
     57            TIMER1_CTC_Init(wp.rf_bitrate);
   \   00000078   ....               LDI     R30, LOW(wp)
   \   0000007A   ....               LDI     R31, (wp) >> 8
   \   0000007C   8105               LDD     R16, Z+5
   \   0000007E   8116               LDD     R17, Z+6
   \   00000080   ....               RCALL   TIMER1_CTC_Init
     58            //TIMER1_OCB_force_state((unsigned char)PREAMBLE>>15);
     59            TIMER1_OCB_force_state(1);
   \   00000082   E001               LDI     R16, 1
   \   00000084   ....               RCALL   TIMER1_OCB_force_state
     60            TIMER1_OCB_int_en();
   \   00000086   ....               RCALL   TIMER1_OCB_int_en
     61          
     62          }
   \   00000088   E0E4               LDI     R30, 4
   \   0000008A   ....               RJMP    ?EPILOGUE_B4_L09
     63          
     64          #pragma vector=TIMER1_COMPB_vect

   \                                 In  segment CODE, align 2, keep-with-next
     65          __interrupt void TIMER1_COMPB_interrupt( void )
   \                     TIMER1_COMPB_interrupt:
     66          {
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A   93FA               ST      -Y, R31
   \   0000000C   93EA               ST      -Y, R30
   \   0000000E   923A               ST      -Y, R3
   \   00000010   922A               ST      -Y, R2
   \   00000012   921A               ST      -Y, R1
   \   00000014   920A               ST      -Y, R0
   \   00000016   937A               ST      -Y, R23
   \   00000018   936A               ST      -Y, R22
   \   0000001A   935A               ST      -Y, R21
   \   0000001C   934A               ST      -Y, R20
   \   0000001E   933A               ST      -Y, R19
   \   00000020   932A               ST      -Y, R18
   \   00000022   931A               ST      -Y, R17
   \   00000024   930A               ST      -Y, R16
   \   00000026   B64F               IN      R4, 0x3F
   \   00000028                      REQUIRE ?Register_R4_is_cg_reg
     67          
     68            if (flags.preamble)
   \   00000028   9100....           LDS     R16, sended_cnt
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   91E0....           LDS     R30, ptr_pack
   \   00000032   91F0....           LDS     R31, (ptr_pack + 1)
   \   00000036   0FE0               ADD     R30, R16
   \   00000038   1FF1               ADC     R31, R17
   \   0000003A   ....               LDI     R26, LOW(flags)
   \   0000003C   ....               LDI     R27, (flags) >> 8
   \   0000003E   910C               LD      R16, X
   \   00000040   FF00               SBRS    R16, 0
   \   00000042   C04E               RJMP    ??TIMER1_COMPB_interrupt_0
     69            {
     70          
     71              preamble<<=1;
   \   00000044   9100....           LDS     R16, preamble
   \   00000048   9110....           LDS     R17, (preamble + 1)
   \   0000004C   9120....           LDS     R18, (preamble + 2)
   \   00000050   9130....           LDS     R19, (preamble + 3)
   \   00000054   0F00               LSL     R16
   \   00000056   1F11               ROL     R17
   \   00000058   1F22               ROL     R18
   \   0000005A   1F33               ROL     R19
   \   0000005C   9300....           STS     preamble, R16
   \   00000060   9310....           STS     (preamble + 1), R17
   \   00000064   9320....           STS     (preamble + 2), R18
   \   00000068   9330....           STS     (preamble + 3), R19
     72              bit_count++;
   \   0000006C   ....               LDI     R26, LOW(bit_count)
   \   0000006E   ....               LDI     R27, (bit_count) >> 8
   \   00000070   910D               LD      R16, X+
   \   00000072   911C               LD      R17, X
   \   00000074   5F0F               SUBI    R16, 255
   \   00000076   4F1F               SBCI    R17, 255
   \   00000078   931C               ST      X, R17
   \   0000007A   930E               ST      -X, R16
     73              if (bit_count==(PREAMBLE_LEN + 16))
   \   0000007C   9180....           LDS     R24, bit_count
   \   00000080   9190....           LDS     R25, (bit_count + 1)
   \   00000084   9780               SBIW    R25:R24, 32
   \   00000086   F519               BRNE    ??TIMER1_COMPB_interrupt_1
     74              {
     75                flags.preamble=0;
   \   00000088   ....               LDI     R26, LOW(flags)
   \   0000008A   ....               LDI     R27, (flags) >> 8
   \   0000008C   910C               LD      R16, X
   \   0000008E   7F0E               ANDI    R16, 0xFE
   \   00000090   930C               ST      X, R16
     76                bit_count=0;
   \   00000092   E000               LDI     R16, 0
   \   00000094   9300....           STS     bit_count, R16
   \   00000098   9300....           STS     (bit_count + 1), R16
     77                // Запрограммируем так, чтобы по прерыванию был сгенерирован правильный перепад для начала первого бита данных
     78                if ((ptr_pack[sended_cnt] & 0x80)==0)
   \   0000009C   8100               LD      R16, Z
   \   0000009E   FD07               SBRC    R16, 7
   \   000000A0   C06A               RJMP    ??TIMER1_COMPB_interrupt_2
     79                  TIMER1_OCB_outmod_set0();       // Компаратор выставит 0 на выходе после срабатывания
     80                else
     81                  TIMER1_OCB_outmod_set1();       // Компаратор выставит 1 на выходе после срабатывания
     82              }
     83              else
     84              {
     85                if (preamble & 0x80000000ul)
     86                  TIMER1_OCB_outmod_set1();        // Компаратор выставит 1 на выходе после срабатывания
     87                else
     88                  TIMER1_OCB_outmod_set0();        // Компаратор выставит 0 на выходе после срабатывания
     89              }
     90          
     91            }
     92            else
     93            {
     94              if (flags.centre)
     95              {
     96                // Здесь середина передаваемого бита
     97                flags.centre=0;
     98          
     99                bit_count++; // Увиличить счетчик переданных битов
    100                if (bit_count==8)
    101                {
    102                  bit_count=0;
    103                  sended_cnt++;
    104                  if (sended_cnt==pack_len) flags.lastb=1;
    105                }
    106                if (flags.lastb) TIMER1_OCB_outmod_set0();
    107                else
    108                {
    109                  // Определить перепад в начале следующего бита (если 1, то 0->1;  если 0, то 1->0)
    110                  if ((ptr_pack[sended_cnt] & (0x80 >> bit_count))==0)
    111                    TIMER1_OCB_outmod_set0();
    112                  else
    113                    TIMER1_OCB_outmod_set1();
    114                }
    115              }
    116              else
    117              {
    118                // Здесь начало/конец передачи бита
    119          
    120                flags.centre=1;  // Следующее прерывание будет в центре бита
    121          
    122                if  (flags.lastb)
    123                {
    124                  // Здесь закончился последний бит последнего байта
    125                  TIMER1_OCB_int_dis();
    126                  TIMER1_CTC_Stop();
    127                  flags.done=1;
    128                }
    129                else
    130                {
    131                  // Определить перепад в центре бита (если 1, то 1->0;  если 0, то 0->1)
    132                  if ((ptr_pack[sended_cnt] & (0x80 >> bit_count))==0)
    133                    TIMER1_OCB_outmod_set1();
    134                  else
    135                    TIMER1_OCB_outmod_set0();
   \                     ??TIMER1_COMPB_interrupt_3:
   \   000000A2   ....               RCALL   TIMER1_OCB_outmod_set0
    136                }
    137              }
    138            }
    139          }
   \                     ??TIMER1_COMPB_interrupt_4:
   \   000000A4   BE4F               OUT     0x3F, R4
   \   000000A6   9109               LD      R16, Y+
   \   000000A8   9119               LD      R17, Y+
   \   000000AA   9129               LD      R18, Y+
   \   000000AC   9139               LD      R19, Y+
   \   000000AE   9149               LD      R20, Y+
   \   000000B0   9159               LD      R21, Y+
   \   000000B2   9169               LD      R22, Y+
   \   000000B4   9179               LD      R23, Y+
   \   000000B6   9009               LD      R0, Y+
   \   000000B8   9019               LD      R1, Y+
   \   000000BA   9029               LD      R2, Y+
   \   000000BC   9039               LD      R3, Y+
   \   000000BE   91E9               LD      R30, Y+
   \   000000C0   91F9               LD      R31, Y+
   \   000000C2   9189               LD      R24, Y+
   \   000000C4   9199               LD      R25, Y+
   \   000000C6   91A9               LD      R26, Y+
   \   000000C8   91B9               LD      R27, Y+
   \   000000CA   9049               LD      R4, Y+
   \   000000CC   9518               RETI
   \                     ??TIMER1_COMPB_interrupt_1:
   \   000000CE   ....               LDI     R30, LOW(preamble)
   \   000000D0   ....               LDI     R31, (preamble) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   8122               LDD     R18, Z+2
   \   000000D8   8103               LDD     R16, Z+3
   \   000000DA   FD07               SBRC    R16, 7
   \   000000DC   C04C               RJMP    ??TIMER1_COMPB_interrupt_2
   \   000000DE   CFE1               RJMP    ??TIMER1_COMPB_interrupt_3
   \                     ??TIMER1_COMPB_interrupt_0:
   \   000000E0   910C               LD      R16, X
   \   000000E2   FF01               SBRS    R16, 1
   \   000000E4   C033               RJMP    ??TIMER1_COMPB_interrupt_5
   \   000000E6   01FD               MOVW    R31:R30, R27:R26
   \   000000E8   8100               LD      R16, Z
   \   000000EA   7F0D               ANDI    R16, 0xFD
   \   000000EC   8300               ST      Z, R16
   \   000000EE   91E0....           LDS     R30, bit_count
   \   000000F2   91F0....           LDS     R31, (bit_count + 1)
   \   000000F6   9631               ADIW    R31:R30, 1
   \   000000F8   30E8               CPI     R30, 8
   \   000000FA   07F1               CPC     R31, R17
   \   000000FC   F471               BRNE    ??TIMER1_COMPB_interrupt_6
   \   000000FE   E0E0               LDI     R30, 0
   \   00000100   E0F0               LDI     R31, 0
   \   00000102   9100....           LDS     R16, sended_cnt
   \   00000106   9503               INC     R16
   \   00000108   9300....           STS     sended_cnt, R16
   \   0000010C   9110....           LDS     R17, pack_len
   \   00000110   1701               CP      R16, R17
   \   00000112   F419               BRNE    ??TIMER1_COMPB_interrupt_6
   \   00000114   910C               LD      R16, X
   \   00000116   6008               ORI     R16, 0x08
   \   00000118   930C               ST      X, R16
   \                     ??TIMER1_COMPB_interrupt_6:
   \   0000011A   93E0....           STS     bit_count, R30
   \   0000011E   93F0....           STS     (bit_count + 1), R31
   \   00000122   9100....           LDS     R16, flags
   \   00000126   FD03               SBRC    R16, 3
   \   00000128   CFBC               RJMP    ??TIMER1_COMPB_interrupt_3
   \   0000012A   9100....           LDS     R16, sended_cnt
   \   0000012E   E010               LDI     R17, 0
   \   00000130   91E0....           LDS     R30, ptr_pack
   \   00000134   91F0....           LDS     R31, (ptr_pack + 1)
   \   00000138   0FE0               ADD     R30, R16
   \   0000013A   1FF1               ADC     R31, R17
   \   0000013C   8120               LD      R18, Z
   \   0000013E   9140....           LDS     R20, bit_count
   \   00000142   E800               LDI     R16, 128
   \   00000144   ....               RCALL   ?SS_SHR_L02
   \   00000146   2320               AND     R18, R16
   \   00000148   F4B1               BRNE    ??TIMER1_COMPB_interrupt_2
   \   0000014A   CFAB               RJMP    ??TIMER1_COMPB_interrupt_3
   \                     ??TIMER1_COMPB_interrupt_5:
   \   0000014C   910C               LD      R16, X
   \   0000014E   6002               ORI     R16, 0x02
   \   00000150   930C               ST      X, R16
   \   00000152   910C               LD      R16, X
   \   00000154   FF03               SBRS    R16, 3
   \   00000156   C007               RJMP    ??TIMER1_COMPB_interrupt_7
   \   00000158   ....               RCALL   TIMER1_OCB_int_dis
   \   0000015A   ....               RCALL   TIMER1_CTC_Stop
   \   0000015C   01FD               MOVW    R31:R30, R27:R26
   \   0000015E   8100               LD      R16, Z
   \   00000160   6004               ORI     R16, 0x04
   \   00000162   8300               ST      Z, R16
   \   00000164   CF9F               RJMP    ??TIMER1_COMPB_interrupt_4
   \                     ??TIMER1_COMPB_interrupt_7:
   \   00000166   8120               LD      R18, Z
   \   00000168   9140....           LDS     R20, bit_count
   \   0000016C   E800               LDI     R16, 128
   \   0000016E   ....               RCALL   ?SS_SHR_L02
   \   00000170   2320               AND     R18, R16
   \   00000172   F009               BREQ    $+2+2
   \   00000174   CF96               RJMP    ??TIMER1_COMPB_interrupt_3
   \                     ??TIMER1_COMPB_interrupt_2:
   \   00000176   ....               RCALL   TIMER1_OCB_outmod_set1
   \   00000178   CF95               RJMP    ??TIMER1_COMPB_interrupt_4

   \                                 In  segment INTVEC, offset 0xe, root
   \                     `??TIMER1_COMPB_interrupt::??INTVEC 14`:
   \   0000000E   ....               RJMP    TIMER1_COMPB_interrupt
    140          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   RF_send
        4      2   -> GetBlockCRC
        4      2   -> TIMER1_CTC_Init
        4      2   -> TIMER1_OCB_force_state
        4      2   -> TIMER1_OCB_int_en
        4      2   -> rc4_crypt
        4      2   -> rc4_setup
     19      2   TIMER1_COMPB_interrupt
       19      2   -> TIMER1_CTC_Stop
       19      2   -> TIMER1_OCB_int_dis
       19      2   -> TIMER1_OCB_outmod_set0
       19      2   -> TIMER1_OCB_outmod_set1
       19      2 ?SS_SHR_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     140  RF_send
     378  TIMER1_COMPB_interrupt
       2  TIMER1_COMPB_interrupt::??INTVEC 14
       2  bit_count
       1  pack_len
       4  preamble
       2  ptr_pack
       1  sended_cnt
       6  -- Other

 
 518 bytes in segment CODE
   6 bytes in segment INITTAB
   2 bytes in segment INTVEC
  10 bytes in segment NEAR_Z
 
 518 bytes of CODE memory (+ 8 bytes shared)
  10 bytes of DATA memory

Errors: none
Warnings: none

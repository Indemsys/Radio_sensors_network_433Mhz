###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       26/Oct/2021  16:53:18
# Copyright 1996-2021 IAR Systems AB.
#
#    Source file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\RF_receiver.c
#    Command line =  
#        -f C:\Users\aly\AppData\Local\Temp\EW6867.tmp
#        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\RF_receiver.c
#        --cpu=m8 -ms -o
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj
#        -lCN
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
#        -lB
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
#        --initializers_in_flash --debug -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 512 --clib -Ohz)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List\RF_receiver.lst
#    Object file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj\RF_receiver.r90
#
###############################################################################

D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\RF_receiver.c
      1          #include <iom8.h>

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1
      2          #include <ina90.h>
      3          #include <string.h>
      4          #include <pgmspace.h>
      5          #include <stdio.h>
      6          #include "main.h"
      7          #include "Timers.h"
      8          #include "USART.h"
      9          #include "RF_receiver.h"
     10          #include "..\PRG_Transmitter\RF_settings.h"
     11          #include "Util.h"
     12          #include "bin_defines.h"
     13          
     14          extern __no_init TPARAMS wp;
     15          
     16          #define REC_PREAMBLE 0
     17          #define REC_PACK     1
     18          
     19          
     20          extern volatile tflags flags;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     21          unsigned char rec_state;
     22          unsigned char smpls[PREAMBLE_LEN*4/8];
   \                     smpls:
   \   00000000                      DS8 8
     23          unsigned char inbit;
     24          unsigned char hitcnt  = 0;
     25          unsigned char misscnt = 0;
     26          unsigned char ccor1;
     27          unsigned char ccor2;
     28          unsigned char ccor3;
     29          unsigned char smplcnt;
     30          unsigned char gapcnt;
     31          char         *recbuf;
   \                     recbuf:
   \   00000008                      DS8 2
   \                     rec_state:
   \   0000000A                      DS8 1
   \                     inbit:
   \   0000000B                      DS8 1
   \                     hitcnt:
   \   0000000C                      DS8 1
   \                     misscnt:
   \   0000000D                      DS8 1
   \                     ccor1:
   \   0000000E                      DS8 1
   \                     ccor2:
   \   0000000F                      DS8 1
   \                     ccor3:
   \   00000010                      DS8 1
   \                     smplcnt:
   \   00000011                      DS8 1
   \                     gapcnt:
   \   00000012                      DS8 1
     32          unsigned char inbyte;
   \                     inbyte:
   \   00000013                      DS8 1
     33          unsigned char inbytecnt;
   \                     inbytecnt:
   \   00000014                      DS8 1
     34          
     35          unsigned char preamb7;
   \                     preamb7:
   \   00000015                      DS8 1
     36          unsigned char preamb6;
   \                     preamb6:
   \   00000016                      DS8 1
     37          unsigned char preamb5;
   \                     preamb5:
   \   00000017                      DS8 1
     38          unsigned char preamb4;
   \                     preamb4:
   \   00000018                      DS8 1
     39          unsigned char preamb3;
   \                     preamb3:
   \   00000019                      DS8 1
     40          unsigned char preamb2;
   \                     preamb2:
   \   0000001A                      DS8 1
     41          unsigned char preamb1;
   \                     preamb1:
   \   0000001B                      DS8 1
     42          unsigned char preamb0;
   \                     preamb0:
   \   0000001C                      DS8 1
     43          
     44          
     45          
     46          /*
     47          Тестовый массив
     48          unsigned char tstarr[100];
     49          */
     50          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     51          __flash const char corrtbl[256]=
   \                     corrtbl:
   \   00000000   070806070607       DC8 8, 7, 7, 6, 7, 6, 6, 5, 7, 6, 6, 5, 6, 5, 5, 4, 7, 6, 6, 5, 6, 5, 5
   \              050606070506
   \              050604050607
   \              0506050605  
   \   00000017   060405050504       DC8 4, 6, 5, 5, 4, 5, 4, 4, 3, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4
   \              040407030606
   \              060505050604
   \              0505050404  
   \   0000002E   030405060405       DC8 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 7, 6, 6, 5, 6
   \              040503040405
   \              030403040203
   \              0607050606  
   \   00000045   050506040505       DC8 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3
   \              050404040603
   \              050505040404
   \              0503040403  
   \   0000005C   030402030506       DC8 4, 3, 3, 2, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4
   \              040504050304
   \              040503040304
   \              0203040504  
   \   00000073   040303030402       DC8 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5
   \              030303020202
   \              070106060605
   \              0505060405  
   \   0000008A   040504050304       DC8 5, 4, 5, 4, 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 6
   \              050604050405
   \              030404050304
   \              0304020306  
   \   000000A1   050505040404       DC8 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4, 3, 4, 3, 3, 2
   \              050304040403
   \              030305020404
   \              0403030302  
   \   000000B8   030402030203       DC8 4, 3, 3, 2, 3, 2, 2, 1, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3
   \              010205060405
   \              040503040405
   \              0304030403  
   \   000000CF   050204040403       DC8 2, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 5, 4, 4, 3, 4, 3
   \              030304020303
   \              030202020501
   \              0404040303  
   \   000000E6   020303040203       DC8 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2
   \              020301020304
   \              020302030102
   \              0203010202  
   \   000000FD   010100             DC8 1, 1, 0
     52          {
     53          0x08, 0x07, 0x07, 0x06, 0x07, 0x06, 0x06, 0x05,
     54          0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
     55          0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
     56          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     57          0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
     58          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     59          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     60          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     61          0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
     62          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     63          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     64          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     65          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     66          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     67          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     68          0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
     69          0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
     70          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     71          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     72          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     73          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     74          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     75          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     76          0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
     77          0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
     78          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     79          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     80          0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
     81          0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
     82          0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
     83          0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
     84          0x03, 0x02, 0x02, 0x01, 0x02, 0x01, 0x01, 0x00,
     85          };
     86          
     87          void prepare_preamble(void);
     88          

   \                                 In  segment CODE, align 2, keep-with-next
     89          void RF_receiver_init(char *buf)
   \                     RF_receiver_init:
     90          {
     91            flags.done = 0;
   \   00000000   ....               LDI     R30, LOW(flags)
   \   00000002   ....               LDI     R31, (flags) >> 8
   \   00000004   8120               LD      R18, Z
   \   00000006   7F2B               ANDI    R18, 0xFB
   \   00000008   8320               ST      Z, R18
     92            rec_state  = REC_PREAMBLE;
   \   0000000A   ....               LDI     R30, LOW(smpls)
   \   0000000C   ....               LDI     R31, (smpls) >> 8
   \   0000000E   E020               LDI     R18, 0
   \   00000010   8722               STD     Z+10, R18
     93            recbuf     = buf;
   \   00000012   8700               STD     Z+8, R16
   \   00000014   8711               STD     Z+9, R17
     94            prepare_preamble();
   \   00000016   ....               RCALL   prepare_preamble
     95            TIMER1_CTC_Init(wp.rf_bitrate/4); // Чтение состояний каждую 1/4 полубита
   \   00000018   ....               LDI     R30, LOW(wp)
   \   0000001A   ....               LDI     R31, (wp) >> 8
   \   0000001C   8102               LDD     R16, Z+2
   \   0000001E   8113               LDD     R17, Z+3
   \   00000020   9516               LSR     R17
   \   00000022   9507               ROR     R16
   \   00000024   9516               LSR     R17
   \   00000026   9507               ROR     R16
   \   00000028   ....               RCALL   TIMER1_CTC_Init
     96            TIMER1_OCB_int_en();
   \   0000002A   ....               RJMP    TIMER1_OCB_int_en
     97          }
     98          

   \                                 In  segment CODE, align 2, keep-with-next
     99          void prepare_preamble(void)
   \                     prepare_preamble:
    100          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
    101          /* пример
    102          #define PREAMB7  b11111111
    103          #define PREAMB6  b00001111
    104          #define PREAMB5  b11110000
    105          #define PREAMB4  b00001111
    106          #define PREAMB3  b11111111
    107          #define PREAMB2  b00000000
    108          #define PREAMB1  b00000000
    109          #define PREAMB0  b11110000
    110          */
    111            preamb7 = 0;
   \   00000002   ....               LDI     R30, LOW(smpls)
   \   00000004   ....               LDI     R31, (smpls) >> 8
   \   00000006   E000               LDI     R16, 0
   \   00000008   8B05               STD     Z+21, R16
    112            preamb6 = 0;
   \   0000000A   8B06               STD     Z+22, R16
    113            preamb5 = 0;
   \   0000000C   8B07               STD     Z+23, R16
    114            preamb4 = 0;
   \   0000000E   8F00               STD     Z+24, R16
    115            preamb3 = 0;
   \   00000010   8F01               STD     Z+25, R16
    116            preamb2 = 0;
   \   00000012   8F02               STD     Z+26, R16
    117            preamb1 = 0;
   \   00000014   8F03               STD     Z+27, R16
    118            preamb0 = 0;
   \   00000016   8F04               STD     Z+28, R16
    119          
    120            if (wp.preamble & 0x8000) preamb7 |= b11110000;
   \   00000018   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_7:
   \   0000001A   FF07               SBRS    R16, 7
   \   0000001C   C002               RJMP    ??prepare_preamble_0
   \   0000001E   EF00               LDI     R16, 240
   \   00000020   8B05               STD     Z+21, R16
    121            if (wp.preamble & 0x4000) preamb7 |= b00001111;
   \                     ??prepare_preamble_0:
   \   00000022   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_8:
   \   00000024   FF06               SBRS    R16, 6
   \   00000026   C003               RJMP    ??prepare_preamble_1
   \   00000028   8905               LDD     R16, Z+21
   \   0000002A   600F               ORI     R16, 0x0F
   \   0000002C   8B05               STD     Z+21, R16
    122          
    123            if (wp.preamble & 0x2000) preamb6 |= b11110000;
   \                     ??prepare_preamble_1:
   \   0000002E   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_9:
   \   00000030   FF05               SBRS    R16, 5
   \   00000032   C002               RJMP    ??prepare_preamble_2
   \   00000034   EF00               LDI     R16, 240
   \   00000036   8B06               STD     Z+22, R16
    124            if (wp.preamble & 0x1000) preamb6 |= b00001111;
   \                     ??prepare_preamble_2:
   \   00000038   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_10:
   \   0000003A   FF04               SBRS    R16, 4
   \   0000003C   C003               RJMP    ??prepare_preamble_3
   \   0000003E   8906               LDD     R16, Z+22
   \   00000040   600F               ORI     R16, 0x0F
   \   00000042   8B06               STD     Z+22, R16
    125          
    126            if (wp.preamble & 0x0800) preamb5 |= b11110000;
   \                     ??prepare_preamble_3:
   \   00000044   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_11:
   \   00000046   FF03               SBRS    R16, 3
   \   00000048   C002               RJMP    ??prepare_preamble_4
   \   0000004A   EF00               LDI     R16, 240
   \   0000004C   8B07               STD     Z+23, R16
    127            if (wp.preamble & 0x0400) preamb5 |= b00001111;
   \                     ??prepare_preamble_4:
   \   0000004E   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_12:
   \   00000050   FF02               SBRS    R16, 2
   \   00000052   C003               RJMP    ??prepare_preamble_5
   \   00000054   8907               LDD     R16, Z+23
   \   00000056   600F               ORI     R16, 0x0F
   \   00000058   8B07               STD     Z+23, R16
    128          
    129            if (wp.preamble & 0x0200) preamb4 |= b11110000;
   \                     ??prepare_preamble_5:
   \   0000005A   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_13:
   \   0000005C   FF01               SBRS    R16, 1
   \   0000005E   C002               RJMP    ??prepare_preamble_6
   \   00000060   EF00               LDI     R16, 240
   \   00000062   8F00               STD     Z+24, R16
    130            if (wp.preamble & 0x0100) preamb4 |= b00001111;
   \                     ??prepare_preamble_6:
   \   00000064   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_14:
   \   00000066   FF00               SBRS    R16, 0
   \   00000068   C003               RJMP    ??prepare_preamble_7
   \   0000006A   8D00               LDD     R16, Z+24
   \   0000006C   600F               ORI     R16, 0x0F
   \   0000006E   8F00               STD     Z+24, R16
    131          
    132            if (wp.preamble & 0x0080) preamb3 |= b11110000;
   \                     ??prepare_preamble_7:
   \   00000070   ....               LDI     R26, LOW((wp + 6))
   \   00000072   ....               LDI     R27, HIGH((wp + 6))
   \   00000074   910C               LD      R16, X
   \   00000076   FF07               SBRS    R16, 7
   \   00000078   C002               RJMP    ??prepare_preamble_8
   \   0000007A   EF00               LDI     R16, 240
   \   0000007C   8F01               STD     Z+25, R16
    133            if (wp.preamble & 0x0040) preamb3 |= b00001111;
   \                     ??prepare_preamble_8:
   \   0000007E   910C               LD      R16, X
   \   00000080   FF06               SBRS    R16, 6
   \   00000082   C003               RJMP    ??prepare_preamble_9
   \   00000084   8D01               LDD     R16, Z+25
   \   00000086   600F               ORI     R16, 0x0F
   \   00000088   8F01               STD     Z+25, R16
    134          
    135            if (wp.preamble & 0x0020) preamb2 |= b11110000;
   \                     ??prepare_preamble_9:
   \   0000008A   910C               LD      R16, X
   \   0000008C   FF05               SBRS    R16, 5
   \   0000008E   C002               RJMP    ??prepare_preamble_10
   \   00000090   EF00               LDI     R16, 240
   \   00000092   8F02               STD     Z+26, R16
    136            if (wp.preamble & 0x0010) preamb2 |= b00001111;
   \                     ??prepare_preamble_10:
   \   00000094   910C               LD      R16, X
   \   00000096   FF04               SBRS    R16, 4
   \   00000098   C003               RJMP    ??prepare_preamble_11
   \   0000009A   8D02               LDD     R16, Z+26
   \   0000009C   600F               ORI     R16, 0x0F
   \   0000009E   8F02               STD     Z+26, R16
    137          
    138            if (wp.preamble & 0x0008) preamb1 |= b11110000;
   \                     ??prepare_preamble_11:
   \   000000A0   910C               LD      R16, X
   \   000000A2   FF03               SBRS    R16, 3
   \   000000A4   C002               RJMP    ??prepare_preamble_12
   \   000000A6   EF00               LDI     R16, 240
   \   000000A8   8F03               STD     Z+27, R16
    139            if (wp.preamble & 0x0004) preamb1 |= b00001111;
   \                     ??prepare_preamble_12:
   \   000000AA   910C               LD      R16, X
   \   000000AC   FF02               SBRS    R16, 2
   \   000000AE   C003               RJMP    ??prepare_preamble_13
   \   000000B0   8D03               LDD     R16, Z+27
   \   000000B2   600F               ORI     R16, 0x0F
   \   000000B4   8F03               STD     Z+27, R16
    140          
    141            if (wp.preamble & 0x0002) preamb0 |= b11110000;
   \                     ??prepare_preamble_13:
   \   000000B6   910C               LD      R16, X
   \   000000B8   FF01               SBRS    R16, 1
   \   000000BA   C002               RJMP    ??prepare_preamble_14
   \   000000BC   EF00               LDI     R16, 240
   \   000000BE   8F04               STD     Z+28, R16
    142            if (wp.preamble & 0x0001) preamb0 |= b00001111;
   \                     ??prepare_preamble_14:
   \   000000C0   910C               LD      R16, X
   \   000000C2   FF00               SBRS    R16, 0
   \   000000C4   C003               RJMP    ??prepare_preamble_15
   \   000000C6   8D04               LDD     R16, Z+28
   \   000000C8   600F               ORI     R16, 0x0F
   \   000000CA   8F04               STD     Z+28, R16
    143          }
   \                     ??prepare_preamble_15:
   \   000000CC   E0E4               LDI     R30, 4
   \   000000CE   ....               RJMP    ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9100....           LDS     R16, (wp + 7)
   \   00000004   9508               RET
    144          
    145          
    146          
    147          
    148          #pragma vector=TIMER1_COMPB_vect

   \                                 In  segment CODE, align 2, keep-with-next
    149          __interrupt void TIMER1_COMPB_interrupt( void )
   \                     TIMER1_COMPB_interrupt:
    150          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   934A               ST      -Y, R20
   \   0000000A   933A               ST      -Y, R19
   \   0000000C   932A               ST      -Y, R18
   \   0000000E   931A               ST      -Y, R17
   \   00000010   930A               ST      -Y, R16
   \   00000012   B74F               IN      R20, 0x3F
    151          
    152          unsigned char ccor;
    153          
    154            PORTC |= P_TST;
   \   00000014   9AAD               SBI     0x15, 0x05
    155          
    156            inbit = (PIND >> P_DIN_OFS) & 1;
   \   00000016   E010               LDI     R17, 0
   \   00000018   9983               SBIC    0x10, 0x03
   \   0000001A   E011               LDI     R17, 1
   \                     ??TIMER1_COMPB_interrupt_0:
   \   0000001C   ....               LDI     R26, LOW(smpls)
   \   0000001E   ....               LDI     R27, (smpls) >> 8
   \   00000020   9310....           STS     (smpls + 11), R17
    157          
    158            switch (rec_state)
   \   00000024   9100....           LDS     R16, smpls
   \   00000028   0F00               LSL     R16
   \   0000002A   2B01               OR      R16, R17
   \   0000002C   9110....           LDS     R17, (smpls + 10)
   \   00000030   5010               SUBI    R17, 0
   \   00000032   F021               BREQ    ??TIMER1_COMPB_interrupt_1
   \   00000034   951A               DEC     R17
   \   00000036   F409               BRNE    $+2+2
   \   00000038   C082               RJMP    ??TIMER1_COMPB_interrupt_2
   \   0000003A   C0C8               RJMP    ??TIMER1_COMPB_interrupt_3
    159            {
    160            case REC_PREAMBLE:
    161              // Принимаем отсчет бита преамбулы
    162              smpls[7] = (smpls[7] << 1) | (smpls[6] >> 7);
   \                     ??TIMER1_COMPB_interrupt_1:
   \   0000003C   9110....           LDS     R17, (smpls + 7)
   \   00000040   0F11               LSL     R17
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   8126               LDD     R18, Z+6
   \   00000046   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000048   8317               STD     Z+7, R17
    163              smpls[6] = (smpls[6] << 1) | (smpls[5] >> 7);
   \   0000004A   8116               LDD     R17, Z+6
   \   0000004C   0F11               LSL     R17
   \   0000004E   8125               LDD     R18, Z+5
   \   00000050   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000052   8316               STD     Z+6, R17
    164              smpls[5] = (smpls[5] << 1) | (smpls[4] >> 7);
   \   00000054   8115               LDD     R17, Z+5
   \   00000056   0F11               LSL     R17
   \   00000058   8124               LDD     R18, Z+4
   \   0000005A   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_2:
   \   0000005C   8315               STD     Z+5, R17
    165              smpls[4] = (smpls[4] << 1) | (smpls[3] >> 7);
   \   0000005E   8114               LDD     R17, Z+4
   \   00000060   0F11               LSL     R17
   \   00000062   8123               LDD     R18, Z+3
   \   00000064   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_3:
   \   00000066   8314               STD     Z+4, R17
    166              smpls[3] = (smpls[3] << 1) | (smpls[2] >> 7);
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   0F11               LSL     R17
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_4:
   \   00000070   8313               STD     Z+3, R17
    167              smpls[2] = (smpls[2] << 1) | (smpls[1] >> 7);
   \   00000072   8112               LDD     R17, Z+2
   \   00000074   0F11               LSL     R17
   \   00000076   8121               LDD     R18, Z+1
   \   00000078   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_5:
   \   0000007A   8312               STD     Z+2, R17
    168              smpls[1] = (smpls[1] << 1) | (smpls[0] >> 7);
   \   0000007C   8111               LDD     R17, Z+1
   \   0000007E   0F11               LSL     R17
   \   00000080   8120               LD      R18, Z
   \   00000082   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_6:
   \   00000084   8311               STD     Z+1, R17
    169              smpls[0] = (smpls[0] << 1) | inbit;
   \   00000086   8300               ST      Z, R16
    170              // Вычисляем корреляцию с эталонной преамбулой
    171              ccor  = corrtbl[(smpls[7] ^ preamb7)&0xFF];
    172              ccor += corrtbl[(smpls[6] ^ preamb6)&0xFF];
    173              ccor += corrtbl[(smpls[5] ^ preamb5)&0xFF];
    174              ccor += corrtbl[(smpls[4] ^ preamb4)&0xFF];
    175              ccor += corrtbl[(smpls[3] ^ preamb3)&0xFF];
    176              ccor += corrtbl[(smpls[2] ^ preamb2)&0xFF];
    177              ccor += corrtbl[(smpls[1] ^ preamb1)&0xFF];
    178              ccor += corrtbl[(smpls[0] ^ preamb0)&0xFF];
   \   00000088   91E0....           LDS     R30, (smpls + 7)
   \   0000008C   9100....           LDS     R16, (smpls + 21)
   \   00000090   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_22:
   \   00000092   9114               LPM     R17, Z
   \   00000094   91E0....           LDS     R30, (smpls + 6)
   \   00000098   9100....           LDS     R16, (smpls + 22)
   \   0000009C   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_15:
   \   0000009E   91E0....           LDS     R30, (smpls + 5)
   \   000000A2   9100....           LDS     R16, (smpls + 23)
   \   000000A6   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_16:
   \   000000A8   91E0....           LDS     R30, (smpls + 4)
   \   000000AC   9100....           LDS     R16, (smpls + 24)
   \   000000B0   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_17:
   \   000000B2   91E0....           LDS     R30, (smpls + 3)
   \   000000B6   9100....           LDS     R16, (smpls + 25)
   \   000000BA   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_18:
   \   000000BC   91E0....           LDS     R30, (smpls + 2)
   \   000000C0   9100....           LDS     R16, (smpls + 26)
   \   000000C4   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_19:
   \   000000C6   91E0....           LDS     R30, (smpls + 1)
   \   000000CA   9100....           LDS     R16, (smpls + 27)
   \   000000CE   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_20:
   \   000000D0   91E0....           LDS     R30, smpls
   \   000000D4   9100....           LDS     R16, (smpls + 28)
   \   000000D8   ....               RCALL   ?Subroutine2
    179          
    180              if (ccor >= DECISLEV)
   \                     ??CrossCallReturnLabel_21:
   \   000000DA   3314               CPI     R17, 52
   \   000000DC   F120               BRCS    ??TIMER1_COMPB_interrupt_4
    181              {
    182                misscnt = 0;
   \   000000DE   E020               LDI     R18, 0
   \   000000E0   9320....           STS     (smpls + 13), R18
    183                hitcnt++;
    184                ccor3 = ccor2;
   \   000000E4   9120....           LDS     R18, (smpls + 15)
   \   000000E8   9320....           STS     (smpls + 16), R18
    185                ccor2 = ccor1;
   \   000000EC   9130....           LDS     R19, (smpls + 14)
   \   000000F0   9330....           STS     (smpls + 15), R19
    186                ccor1 = ccor;
   \   000000F4   9310....           STS     (smpls + 14), R17
    187          
    188                if ((hitcnt > 2) && (ccor2 > ccor3))
   \   000000F8   01FD               MOVW    R31:R30, R27:R26
   \   000000FA   8504               LDD     R16, Z+12
   \   000000FC   9503               INC     R16
   \   000000FE   8704               STD     Z+12, R16
   \   00000100   3003               CPI     R16, 3
   \   00000102   F408               BRCC    $+2+2
   \   00000104   C063               RJMP    ??TIMER1_COMPB_interrupt_3
   \   00000106   1723               CP      R18, R19
   \   00000108   F008               BRCS    $+2+2
   \   0000010A   C060               RJMP    ??TIMER1_COMPB_interrupt_3
    189                {
    190                  if ((ccor2 > ccor1) || (ccor2 == ccor1))
   \   0000010C   1713               CP      R17, R19
   \   0000010E   F018               BRCS    ??TIMER1_COMPB_interrupt_5
   \   00000110   1731               CP      R19, R17
   \   00000112   F009               BREQ    $+2+2
   \   00000114   C05B               RJMP    ??TIMER1_COMPB_interrupt_3
    191                  {
    192                    // Нашли саксимум на 3-х осчетах. Считаем его пиком корреляции, означающем конец приамбулы
    193                    rec_state = REC_PACK; // Переходим в режим приема битов пакета
   \                     ??TIMER1_COMPB_interrupt_5:
   \   00000116   E001               LDI     R16, 1
   \   00000118   8702               STD     Z+10, R16
    194                    gapcnt    = 5;        // Выборка 1-го бита на 5-ом отсчете.
   \   0000011A   E005               LDI     R16, 5
   \   0000011C   8B02               STD     Z+18, R16
    195                    inbytecnt = 0;
   \   0000011E   E000               LDI     R16, 0
   \   00000120   8B04               STD     Z+20, R16
    196                    smplcnt   = 0;
   \   00000122   8B01               STD     Z+17, R16
   \   00000124   C053               RJMP    ??TIMER1_COMPB_interrupt_3
    197                  }
    198                }
    199              }
    200              else
    201              {
    202                hitcnt = 0;
   \                     ??TIMER1_COMPB_interrupt_4:
   \   00000126   E000               LDI     R16, 0
   \   00000128   9300....           STS     (smpls + 12), R16
    203                if (misscnt<255) misscnt ++;
   \   0000012C   9100....           LDS     R16, (smpls + 13)
   \   00000130   3F0F               CPI     R16, 255
   \   00000132   F409               BRNE    $+2+2
   \   00000134   C04B               RJMP    ??TIMER1_COMPB_interrupt_3
   \   00000136   01FD               MOVW    R31:R30, R27:R26
   \   00000138   9503               INC     R16
   \   0000013A   8705               STD     Z+13, R16
   \   0000013C   C047               RJMP    ??TIMER1_COMPB_interrupt_3
    204              }
    205              break;
    206            case REC_PACK:
    207              // Принимаем отсчет бита пакета
    208              smpls[0] = (smpls[0] << 1) | inbit;
   \                     ??TIMER1_COMPB_interrupt_2:
   \   0000013E   9300....           STS     smpls, R16
    209              ccor = corrtbl[(smpls[0] ^ 0xF0)& 0xFE]; // Коррелируем с шаблоном единицы
    210          
    211              if (gapcnt==0)
   \   00000142   9100....           LDS     R16, (smpls + 18)
   \   00000146   2300               TST     R16
   \   00000148   F5F1               BRNE    ??TIMER1_COMPB_interrupt_6
    212              {
    213                gapcnt = 7;
   \   0000014A   E007               LDI     R16, 7
   \   0000014C   9300....           STS     (smpls + 18), R16
    214          
    215                // Выборка значения бита
    216                inbyte = (inbyte << 1);
   \   00000150   9100....           LDS     R16, (smpls + 19)
   \   00000154   0F00               LSL     R16
    217                if (ccor>4)
   \   00000156   91E0....           LDS     R30, smpls
   \   0000015A   E0F0               LDI     R31, 0
   \   0000015C   EF10               LDI     R17, 240
   \   0000015E   27E1               EOR     R30, R17
   \   00000160   7FEE               ANDI    R30, 0xFE
   \   00000162   ....               SUBI    R30, LOW((-(corrtbl) & 0xFFFF))
   \   00000164   ....               SBCI    R31, (-(corrtbl) & 0xFFFF) >> 8
   \   00000166   9114               LPM     R17, Z
   \   00000168   3015               CPI     R17, 5
   \   0000016A   F008               BRCS    ??TIMER1_COMPB_interrupt_7
    218                {
    219                   // Бит = 1
    220                   inbyte |= 1;
   \   0000016C   6001               ORI     R16, 0x01
   \                     ??TIMER1_COMPB_interrupt_7:
   \   0000016E   9300....           STS     (smpls + 19), R16
    221                }
    222          /*
    223                else
    224                {
    225                   // Бит = 0
    226          
    227                }
    228          */
    229                smplcnt++;
   \   00000172   01FD               MOVW    R31:R30, R27:R26
   \   00000174   8901               LDD     R16, Z+17
   \   00000176   9503               INC     R16
   \   00000178   8B01               STD     Z+17, R16
    230                if (smplcnt == 8)
   \   0000017A   3008               CPI     R16, 8
   \   0000017C   F539               BRNE    ??TIMER1_COMPB_interrupt_3
    231                {
    232                  smplcnt = 0;
   \   0000017E   E000               LDI     R16, 0
   \   00000180   8B01               STD     Z+17, R16
    233                  // Принят полный байт
    234                  recbuf[inbytecnt] = inbyte;
   \   00000182   9120....           LDS     R18, (smpls + 19)
   \   00000186   9618               ADIW    R27:R26, 8
   \   00000188   91ED               LD      R30, X+
   \   0000018A   91FC               LD      R31, X
   \   0000018C   9719               SBIW    R27:R26, 9
   \   0000018E   9100....           LDS     R16, (smpls + 20)
   \   00000192   E010               LDI     R17, 0
   \   00000194   0FE0               ADD     R30, R16
   \   00000196   1FF1               ADC     R31, R17
   \   00000198   8320               ST      Z, R18
    235                  inbytecnt++;
   \   0000019A   01FD               MOVW    R31:R30, R27:R26
   \   0000019C   8904               LDD     R16, Z+20
   \   0000019E   9503               INC     R16
   \   000001A0   8B04               STD     Z+20, R16
    236                  if (inbytecnt == PACK_LEN)
   \   000001A2   300B               CPI     R16, 11
   \   000001A4   F499               BRNE    ??TIMER1_COMPB_interrupt_3
    237                  {
    238                    // Принят весь пакет
    239                    rec_state = REC_PREAMBLE;
   \   000001A6   8712               STD     Z+10, R17
    240                    smpls[7] = 0;
   \   000001A8   8317               STD     Z+7, R17
    241                    smpls[6] = 0;
   \   000001AA   8316               STD     Z+6, R17
    242                    smpls[5] = 0;
   \   000001AC   8315               STD     Z+5, R17
    243                    smpls[4] = 0;
   \   000001AE   8314               STD     Z+4, R17
    244                    smpls[3] = 0;
   \   000001B0   8313               STD     Z+3, R17
    245                    smpls[2] = 0;
   \   000001B2   8312               STD     Z+2, R17
    246                    smpls[1] = 0;
   \   000001B4   8311               STD     Z+1, R17
    247                    smpls[0] = 0;
   \   000001B6   8310               ST      Z, R17
    248                    hitcnt   = 0;
   \   000001B8   8714               STD     Z+12, R17
    249          
    250                    flags.done = 1;
   \   000001BA   ....               LDI     R30, LOW(flags)
   \   000001BC   ....               LDI     R31, (flags) >> 8
   \   000001BE   8100               LD      R16, Z
   \   000001C0   6004               ORI     R16, 0x04
   \   000001C2   8300               ST      Z, R16
   \   000001C4   C003               RJMP    ??TIMER1_COMPB_interrupt_3
    251          //          TIMER1_OCB_int_dis();
    252                  }
    253                }
    254              }
    255              else gapcnt--;
   \                     ??TIMER1_COMPB_interrupt_6:
   \   000001C6   01FD               MOVW    R31:R30, R27:R26
   \   000001C8   950A               DEC     R16
   \   000001CA   8B02               STD     Z+18, R16
    256          
    257          /* Тестовый блок. Начало---------------------------------------------------------------------------------
    258          
    259              tstarr[smplcnt] = ccor;
    260              smplcnt++;
    261          
    262              if (smplcnt == 100)
    263              {
    264                rec_state = REC_PREAMBLE;
    265                smpls[7] = 0;
    266                smpls[6] = 0;
    267                smpls[5] = 0;
    268                smpls[4] = 0;
    269                smpls[3] = 0;
    270                smpls[2] = 0;
    271                smpls[1] = 0;
    272                smpls[0] = 0;
    273                hitcnt   = 0;
    274          
    275                flags.done = 1;
    276                TIMER1_OCB_int_dis();
    277              }
    278          
    279             Тестовый блок. Конец----------------------------------------------------------------------------------
    280          */
    281              break;
    282            }
    283          
    284            PORTC &= ~P_TST;
   \                     ??TIMER1_COMPB_interrupt_3:
   \   000001CC   98AD               CBI     0x15, 0x05
    285          
    286          }
   \   000001CE   BF4F               OUT     0x3F, R20
   \   000001D0   9109               LD      R16, Y+
   \   000001D2   9119               LD      R17, Y+
   \   000001D4   9129               LD      R18, Y+
   \   000001D6   9139               LD      R19, Y+
   \   000001D8   9149               LD      R20, Y+
   \   000001DA   91E9               LD      R30, Y+
   \   000001DC   91F9               LD      R31, Y+
   \   000001DE   91A9               LD      R26, Y+
   \   000001E0   91B9               LD      R27, Y+
   \   000001E2   9518               RETI
   \   000001E4                      REQUIRE _A_PORTC
   \   000001E4                      REQUIRE _A_PIND

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_23:
   \   00000002   9104               LPM     R16, Z
   \   00000004   0F10               ADD     R17, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   27E0               EOR     R30, R16
   \   00000002   E0F0               LDI     R31, 0
   \   00000004   ....               SUBI    R30, LOW((-(corrtbl) & 0xFFFF))
   \   00000006   ....               SBCI    R31, (-(corrtbl) & 0xFFFF) >> 8
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   FB27               BST     R18, 7
   \   00000002   E020               LDI     R18, 0
   \   00000004   F920               BLD     R18, 0
   \   00000006   2B12               OR      R17, R18
   \   00000008   9508               RET

   \                                 In  segment INTVEC, offset 0xe, root
   \                     `??TIMER1_COMPB_interrupt::??INTVEC 14`:
   \   0000000E   ....               RJMP    TIMER1_COMPB_interrupt

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   RF_receiver_init
        0      2   -> TIMER1_CTC_Init
        0      2   -> TIMER1_OCB_int_en
        0      2   -> prepare_preamble
      9      2   TIMER1_COMPB_interrupt
      4      2   prepare_preamble


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
       6  ?Subroutine1
       8  ?Subroutine2
      10  ?Subroutine3
      44  RF_receiver_init
     484  TIMER1_COMPB_interrupt
       2  TIMER1_COMPB_interrupt::??INTVEC 14
       1  _A_PIND
       1  _A_PORTC
     256  corrtbl
     208  prepare_preamble
      29  smpls
          recbuf
          rec_state
          inbit
          hitcnt
          misscnt
          ccor1
          ccor2
          ccor3
          smplcnt
          gapcnt
          inbyte
          inbytecnt
          preamb7
          preamb6
          preamb5
          preamb4
          preamb3
          preamb2
          preamb1
          preamb0
       6  -- Other

 
   2 bytes in segment ABSOLUTE
 770 bytes in segment CODE
   6 bytes in segment INITTAB
   2 bytes in segment INTVEC
 256 bytes in segment NEAR_F
  29 bytes in segment NEAR_Z
 
 1 026 bytes of CODE memory (+ 8 bytes shared)
    29 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none

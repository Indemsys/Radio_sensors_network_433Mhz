///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR      26/Oct/2021  16:53:18
// Copyright 1996-2021 IAR Systems AB.
//
//    Source file  =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\RF_receiver.c
//    Command line =  
//        -f C:\Users\aly\AppData\Local\Temp\EW6867.tmp
//        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\RF_receiver.c
//        --cpu=m8 -ms -o
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj
//        -lCN
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
//        -lB
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
//        --initializers_in_flash --debug -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 512 --clib -Ohz)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List\RF_receiver.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME RF_receiver

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??TIMER1_COMPB_interrupt::??INTVEC 14`
        PUBLIC RF_receiver_init
        PUBLIC TIMER1_COMPB_interrupt
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTC
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC ccor1
        PUBLIC ccor2
        PUBLIC ccor3
        PUBLIC corrtbl
        PUBLIC gapcnt
        PUBLIC hitcnt
        PUBLIC inbit
        PUBLIC inbyte
        PUBLIC inbytecnt
        PUBLIC misscnt
        PUBLIC preamb0
        PUBLIC preamb1
        PUBLIC preamb2
        PUBLIC preamb3
        PUBLIC preamb4
        PUBLIC preamb5
        PUBLIC preamb6
        PUBLIC preamb7
        PUBLIC prepare_preamble
        PUBLIC rec_state
        PUBLIC recbuf
        PUBLIC smplcnt
        PUBLIC smpls

TIMER1_COMPB_interrupt SYMBOL "TIMER1_COMPB_interrupt"
`??TIMER1_COMPB_interrupt::??INTVEC 14` SYMBOL "??INTVEC 14", TIMER1_COMPB_interrupt

        EXTERN TIMER1_CTC_Init
        EXTERN TIMER1_OCB_int_en
        EXTERN flags
        EXTERN wp

// D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\RF_receiver.c
//    1 #include <iom8.h>

        ASEGN ABSOLUTE:DATA:NOROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,030H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1
//    2 #include <ina90.h>
//    3 #include <string.h>
//    4 #include <pgmspace.h>
//    5 #include <stdio.h>
//    6 #include "main.h"
//    7 #include "Timers.h"
//    8 #include "USART.h"
//    9 #include "RF_receiver.h"
//   10 #include "..\PRG_Transmitter\RF_settings.h"
//   11 #include "Util.h"
//   12 #include "bin_defines.h"
//   13 
//   14 extern __no_init TPARAMS wp;
//   15 
//   16 #define REC_PREAMBLE 0
//   17 #define REC_PACK     1
//   18 
//   19 
//   20 extern volatile tflags flags;

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   21 unsigned char rec_state;
//   22 unsigned char smpls[PREAMBLE_LEN*4/8];
smpls:
        DS8 8
//   23 unsigned char inbit;
//   24 unsigned char hitcnt  = 0;
//   25 unsigned char misscnt = 0;
//   26 unsigned char ccor1;
//   27 unsigned char ccor2;
//   28 unsigned char ccor3;
//   29 unsigned char smplcnt;
//   30 unsigned char gapcnt;
//   31 char         *recbuf;
recbuf:
        DS8 2
rec_state:
        DS8 1
inbit:
        DS8 1
hitcnt:
        DS8 1
misscnt:
        DS8 1
ccor1:
        DS8 1
ccor2:
        DS8 1
ccor3:
        DS8 1
smplcnt:
        DS8 1
gapcnt:
        DS8 1
//   32 unsigned char inbyte;
inbyte:
        DS8 1
//   33 unsigned char inbytecnt;
inbytecnt:
        DS8 1
//   34 
//   35 unsigned char preamb7;
preamb7:
        DS8 1
//   36 unsigned char preamb6;
preamb6:
        DS8 1
//   37 unsigned char preamb5;
preamb5:
        DS8 1
//   38 unsigned char preamb4;
preamb4:
        DS8 1
//   39 unsigned char preamb3;
preamb3:
        DS8 1
//   40 unsigned char preamb2;
preamb2:
        DS8 1
//   41 unsigned char preamb1;
preamb1:
        DS8 1
//   42 unsigned char preamb0;
preamb0:
        DS8 1
//   43 
//   44 
//   45 
//   46 /*
//   47 Тестовый массив
//   48 unsigned char tstarr[100];
//   49 */
//   50 

        RSEG NEAR_F:CODE:NOROOT(0)
        DATA
//   51 __flash const char corrtbl[256]=
corrtbl:
        DC8 8, 7, 7, 6, 7, 6, 6, 5, 7, 6, 6, 5, 6, 5, 5, 4, 7, 6, 6, 5, 6, 5, 5
        DC8 4, 6, 5, 5, 4, 5, 4, 4, 3, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4
        DC8 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 7, 6, 6, 5, 6
        DC8 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3
        DC8 4, 3, 3, 2, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4
        DC8 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5
        DC8 5, 4, 5, 4, 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 6
        DC8 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4, 3, 4, 3, 3, 2
        DC8 4, 3, 3, 2, 3, 2, 2, 1, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3
        DC8 2, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 5, 4, 4, 3, 4, 3
        DC8 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2
        DC8 1, 1, 0

        RSEG `CODE`:CODE:NOROOT(1)
prepare_preamble:
        CODE
        RCALL   ?PROLOGUE4_L09
        LDI     R30, LOW(smpls)
        LDI     R31, (smpls) >> 8
        LDI     R16, 0
        STD     Z+21, R16
        STD     Z+22, R16
        STD     Z+23, R16
        STD     Z+24, R16
        STD     Z+25, R16
        STD     Z+26, R16
        STD     Z+27, R16
        STD     Z+28, R16
        RCALL   ?Subroutine1
??CrossCallReturnLabel_7:
        SBRS    R16, 7
        RJMP    ??prepare_preamble_0
        LDI     R16, 240
        STD     Z+21, R16
??prepare_preamble_0:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_8:
        SBRS    R16, 6
        RJMP    ??prepare_preamble_1
        LDD     R16, Z+21
        ORI     R16, 0x0F
        STD     Z+21, R16
??prepare_preamble_1:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_9:
        SBRS    R16, 5
        RJMP    ??prepare_preamble_2
        LDI     R16, 240
        STD     Z+22, R16
??prepare_preamble_2:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_10:
        SBRS    R16, 4
        RJMP    ??prepare_preamble_3
        LDD     R16, Z+22
        ORI     R16, 0x0F
        STD     Z+22, R16
??prepare_preamble_3:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_11:
        SBRS    R16, 3
        RJMP    ??prepare_preamble_4
        LDI     R16, 240
        STD     Z+23, R16
??prepare_preamble_4:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_12:
        SBRS    R16, 2
        RJMP    ??prepare_preamble_5
        LDD     R16, Z+23
        ORI     R16, 0x0F
        STD     Z+23, R16
??prepare_preamble_5:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_13:
        SBRS    R16, 1
        RJMP    ??prepare_preamble_6
        LDI     R16, 240
        STD     Z+24, R16
??prepare_preamble_6:
        RCALL   ?Subroutine1
??CrossCallReturnLabel_14:
        SBRS    R16, 0
        RJMP    ??prepare_preamble_7
        LDD     R16, Z+24
        ORI     R16, 0x0F
        STD     Z+24, R16
??prepare_preamble_7:
        LDI     R26, LOW((wp + 6))
        LDI     R27, HIGH((wp + 6))
        LD      R16, X
        SBRS    R16, 7
        RJMP    ??prepare_preamble_8
        LDI     R16, 240
        STD     Z+25, R16
??prepare_preamble_8:
        LD      R16, X
        SBRS    R16, 6
        RJMP    ??prepare_preamble_9
        LDD     R16, Z+25
        ORI     R16, 0x0F
        STD     Z+25, R16
??prepare_preamble_9:
        LD      R16, X
        SBRS    R16, 5
        RJMP    ??prepare_preamble_10
        LDI     R16, 240
        STD     Z+26, R16
??prepare_preamble_10:
        LD      R16, X
        SBRS    R16, 4
        RJMP    ??prepare_preamble_11
        LDD     R16, Z+26
        ORI     R16, 0x0F
        STD     Z+26, R16
??prepare_preamble_11:
        LD      R16, X
        SBRS    R16, 3
        RJMP    ??prepare_preamble_12
        LDI     R16, 240
        STD     Z+27, R16
??prepare_preamble_12:
        LD      R16, X
        SBRS    R16, 2
        RJMP    ??prepare_preamble_13
        LDD     R16, Z+27
        ORI     R16, 0x0F
        STD     Z+27, R16
??prepare_preamble_13:
        LD      R16, X
        SBRS    R16, 1
        RJMP    ??prepare_preamble_14
        LDI     R16, 240
        STD     Z+28, R16
??prepare_preamble_14:
        LD      R16, X
        SBRS    R16, 0
        RJMP    ??prepare_preamble_15
        LDD     R16, Z+28
        ORI     R16, 0x0F
        STD     Z+28, R16
??prepare_preamble_15:
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine1:
        LDS     R16, (wp + 7)
        RET
//   52 {
//   53 0x08, 0x07, 0x07, 0x06, 0x07, 0x06, 0x06, 0x05,
//   54 0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
//   55 0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
//   56 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   57 0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
//   58 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   59 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   60 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   61 0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
//   62 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   63 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   64 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   65 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   66 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   67 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   68 0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
//   69 0x07, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x04,
//   70 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   71 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   72 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   73 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   74 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   75 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   76 0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
//   77 0x06, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x03,
//   78 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   79 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   80 0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
//   81 0x05, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x02,
//   82 0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
//   83 0x04, 0x03, 0x03, 0x02, 0x03, 0x02, 0x02, 0x01,
//   84 0x03, 0x02, 0x02, 0x01, 0x02, 0x01, 0x01, 0x00,
//   85 };
//   86 
//   87 void prepare_preamble(void);
//   88 

        RSEG `CODE`:CODE:NOROOT(1)
//   89 void RF_receiver_init(char *buf)
RF_receiver_init:
        CODE
//   90 {
//   91   flags.done = 0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R18, Z
        ANDI    R18, 0xFB
        ST      Z, R18
//   92   rec_state  = REC_PREAMBLE;
        LDI     R30, LOW(smpls)
        LDI     R31, (smpls) >> 8
        LDI     R18, 0
        STD     Z+10, R18
//   93   recbuf     = buf;
        STD     Z+8, R16
        STD     Z+9, R17
//   94   prepare_preamble();
        RCALL   prepare_preamble
//   95   TIMER1_CTC_Init(wp.rf_bitrate/4); // Чтение состояний каждую 1/4 полубита
        LDI     R30, LOW(wp)
        LDI     R31, (wp) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        LSR     R17
        ROR     R16
        LSR     R17
        ROR     R16
        RCALL   TIMER1_CTC_Init
//   96   TIMER1_OCB_int_en();
        RJMP    TIMER1_OCB_int_en
//   97 }
//   98 
//   99 void prepare_preamble(void)
//  100 {
//  101 /* пример
//  102 #define PREAMB7  b11111111
//  103 #define PREAMB6  b00001111
//  104 #define PREAMB5  b11110000
//  105 #define PREAMB4  b00001111
//  106 #define PREAMB3  b11111111
//  107 #define PREAMB2  b00000000
//  108 #define PREAMB1  b00000000
//  109 #define PREAMB0  b11110000
//  110 */
//  111   preamb7 = 0;
//  112   preamb6 = 0;
//  113   preamb5 = 0;
//  114   preamb4 = 0;
//  115   preamb3 = 0;
//  116   preamb2 = 0;
//  117   preamb1 = 0;
//  118   preamb0 = 0;
//  119 
//  120   if (wp.preamble & 0x8000) preamb7 |= b11110000;
//  121   if (wp.preamble & 0x4000) preamb7 |= b00001111;
//  122 
//  123   if (wp.preamble & 0x2000) preamb6 |= b11110000;
//  124   if (wp.preamble & 0x1000) preamb6 |= b00001111;
//  125 
//  126   if (wp.preamble & 0x0800) preamb5 |= b11110000;
//  127   if (wp.preamble & 0x0400) preamb5 |= b00001111;
//  128 
//  129   if (wp.preamble & 0x0200) preamb4 |= b11110000;
//  130   if (wp.preamble & 0x0100) preamb4 |= b00001111;
//  131 
//  132   if (wp.preamble & 0x0080) preamb3 |= b11110000;
//  133   if (wp.preamble & 0x0040) preamb3 |= b00001111;
//  134 
//  135   if (wp.preamble & 0x0020) preamb2 |= b11110000;
//  136   if (wp.preamble & 0x0010) preamb2 |= b00001111;
//  137 
//  138   if (wp.preamble & 0x0008) preamb1 |= b11110000;
//  139   if (wp.preamble & 0x0004) preamb1 |= b00001111;
//  140 
//  141   if (wp.preamble & 0x0002) preamb0 |= b11110000;
//  142   if (wp.preamble & 0x0001) preamb0 |= b00001111;
//  143 }
//  144 
//  145 
//  146 
//  147 
//  148 #pragma vector=TIMER1_COMPB_vect

        RSEG `CODE`:CODE:NOROOT(1)
        CALL_GRAPH_ROOT TIMER1_COMPB_interrupt, "interrupt"
//  149 __interrupt void TIMER1_COMPB_interrupt( void )
TIMER1_COMPB_interrupt:
        CODE
//  150 {
        ST      -Y, R27
        ST      -Y, R26
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R20
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R20, 0x3F
//  151 
//  152 unsigned char ccor;
//  153 
//  154   PORTC |= P_TST;
        SBI     0x15, 0x05
//  155 
//  156   inbit = (PIND >> P_DIN_OFS) & 1;
        LDI     R17, 0
        SBIC    0x10, 0x03
        LDI     R17, 1
??TIMER1_COMPB_interrupt_0:
        LDI     R26, LOW(smpls)
        LDI     R27, (smpls) >> 8
        STS     (smpls + 11), R17
//  157 
//  158   switch (rec_state)
        LDS     R16, smpls
        LSL     R16
        OR      R16, R17
        LDS     R17, (smpls + 10)
        SUBI    R17, 0
        BREQ    ??TIMER1_COMPB_interrupt_1
        DEC     R17
        BRNE    $+2+2
        RJMP    ??TIMER1_COMPB_interrupt_2
        RJMP    ??TIMER1_COMPB_interrupt_3
//  159   {
//  160   case REC_PREAMBLE:
//  161     // Принимаем отсчет бита преамбулы
//  162     smpls[7] = (smpls[7] << 1) | (smpls[6] >> 7);
??TIMER1_COMPB_interrupt_1:
        LDS     R17, (smpls + 7)
        LSL     R17
        MOVW    R31:R30, R27:R26
        LDD     R18, Z+6
        RCALL   ?Subroutine0
??CrossCallReturnLabel_0:
        STD     Z+7, R17
//  163     smpls[6] = (smpls[6] << 1) | (smpls[5] >> 7);
        LDD     R17, Z+6
        LSL     R17
        LDD     R18, Z+5
        RCALL   ?Subroutine0
??CrossCallReturnLabel_1:
        STD     Z+6, R17
//  164     smpls[5] = (smpls[5] << 1) | (smpls[4] >> 7);
        LDD     R17, Z+5
        LSL     R17
        LDD     R18, Z+4
        RCALL   ?Subroutine0
??CrossCallReturnLabel_2:
        STD     Z+5, R17
//  165     smpls[4] = (smpls[4] << 1) | (smpls[3] >> 7);
        LDD     R17, Z+4
        LSL     R17
        LDD     R18, Z+3
        RCALL   ?Subroutine0
??CrossCallReturnLabel_3:
        STD     Z+4, R17
//  166     smpls[3] = (smpls[3] << 1) | (smpls[2] >> 7);
        LDD     R17, Z+3
        LSL     R17
        LDD     R18, Z+2
        RCALL   ?Subroutine0
??CrossCallReturnLabel_4:
        STD     Z+3, R17
//  167     smpls[2] = (smpls[2] << 1) | (smpls[1] >> 7);
        LDD     R17, Z+2
        LSL     R17
        LDD     R18, Z+1
        RCALL   ?Subroutine0
??CrossCallReturnLabel_5:
        STD     Z+2, R17
//  168     smpls[1] = (smpls[1] << 1) | (smpls[0] >> 7);
        LDD     R17, Z+1
        LSL     R17
        LD      R18, Z
        RCALL   ?Subroutine0
??CrossCallReturnLabel_6:
        STD     Z+1, R17
//  169     smpls[0] = (smpls[0] << 1) | inbit;
        ST      Z, R16
//  170     // Вычисляем корреляцию с эталонной преамбулой
//  171     ccor  = corrtbl[(smpls[7] ^ preamb7)&0xFF];
//  172     ccor += corrtbl[(smpls[6] ^ preamb6)&0xFF];
//  173     ccor += corrtbl[(smpls[5] ^ preamb5)&0xFF];
//  174     ccor += corrtbl[(smpls[4] ^ preamb4)&0xFF];
//  175     ccor += corrtbl[(smpls[3] ^ preamb3)&0xFF];
//  176     ccor += corrtbl[(smpls[2] ^ preamb2)&0xFF];
//  177     ccor += corrtbl[(smpls[1] ^ preamb1)&0xFF];
//  178     ccor += corrtbl[(smpls[0] ^ preamb0)&0xFF];
        LDS     R30, (smpls + 7)
        LDS     R16, (smpls + 21)
        RCALL   ?Subroutine3
??CrossCallReturnLabel_22:
        LPM     R17, Z
        LDS     R30, (smpls + 6)
        LDS     R16, (smpls + 22)
        RCALL   ?Subroutine2
??CrossCallReturnLabel_15:
        LDS     R30, (smpls + 5)
        LDS     R16, (smpls + 23)
        RCALL   ?Subroutine2
??CrossCallReturnLabel_16:
        LDS     R30, (smpls + 4)
        LDS     R16, (smpls + 24)
        RCALL   ?Subroutine2
??CrossCallReturnLabel_17:
        LDS     R30, (smpls + 3)
        LDS     R16, (smpls + 25)
        RCALL   ?Subroutine2
??CrossCallReturnLabel_18:
        LDS     R30, (smpls + 2)
        LDS     R16, (smpls + 26)
        RCALL   ?Subroutine2
??CrossCallReturnLabel_19:
        LDS     R30, (smpls + 1)
        LDS     R16, (smpls + 27)
        RCALL   ?Subroutine2
??CrossCallReturnLabel_20:
        LDS     R30, smpls
        LDS     R16, (smpls + 28)
        RCALL   ?Subroutine2
//  179 
//  180     if (ccor >= DECISLEV)
??CrossCallReturnLabel_21:
        CPI     R17, 52
        BRCS    ??TIMER1_COMPB_interrupt_4
//  181     {
//  182       misscnt = 0;
        LDI     R18, 0
        STS     (smpls + 13), R18
//  183       hitcnt++;
//  184       ccor3 = ccor2;
        LDS     R18, (smpls + 15)
        STS     (smpls + 16), R18
//  185       ccor2 = ccor1;
        LDS     R19, (smpls + 14)
        STS     (smpls + 15), R19
//  186       ccor1 = ccor;
        STS     (smpls + 14), R17
//  187 
//  188       if ((hitcnt > 2) && (ccor2 > ccor3))
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+12
        INC     R16
        STD     Z+12, R16
        CPI     R16, 3
        BRCC    $+2+2
        RJMP    ??TIMER1_COMPB_interrupt_3
        CP      R18, R19
        BRCS    $+2+2
        RJMP    ??TIMER1_COMPB_interrupt_3
//  189       {
//  190         if ((ccor2 > ccor1) || (ccor2 == ccor1))
        CP      R17, R19
        BRCS    ??TIMER1_COMPB_interrupt_5
        CP      R19, R17
        BREQ    $+2+2
        RJMP    ??TIMER1_COMPB_interrupt_3
//  191         {
//  192           // Нашли саксимум на 3-х осчетах. Считаем его пиком корреляции, означающем конец приамбулы
//  193           rec_state = REC_PACK; // Переходим в режим приема битов пакета
??TIMER1_COMPB_interrupt_5:
        LDI     R16, 1
        STD     Z+10, R16
//  194           gapcnt    = 5;        // Выборка 1-го бита на 5-ом отсчете.
        LDI     R16, 5
        STD     Z+18, R16
//  195           inbytecnt = 0;
        LDI     R16, 0
        STD     Z+20, R16
//  196           smplcnt   = 0;
        STD     Z+17, R16
        RJMP    ??TIMER1_COMPB_interrupt_3
//  197         }
//  198       }
//  199     }
//  200     else
//  201     {
//  202       hitcnt = 0;
??TIMER1_COMPB_interrupt_4:
        LDI     R16, 0
        STS     (smpls + 12), R16
//  203       if (misscnt<255) misscnt ++;
        LDS     R16, (smpls + 13)
        CPI     R16, 255
        BRNE    $+2+2
        RJMP    ??TIMER1_COMPB_interrupt_3
        MOVW    R31:R30, R27:R26
        INC     R16
        STD     Z+13, R16
        RJMP    ??TIMER1_COMPB_interrupt_3
//  204     }
//  205     break;
//  206   case REC_PACK:
//  207     // Принимаем отсчет бита пакета
//  208     smpls[0] = (smpls[0] << 1) | inbit;
??TIMER1_COMPB_interrupt_2:
        STS     smpls, R16
//  209     ccor = corrtbl[(smpls[0] ^ 0xF0)& 0xFE]; // Коррелируем с шаблоном единицы
//  210 
//  211     if (gapcnt==0)
        LDS     R16, (smpls + 18)
        TST     R16
        BRNE    ??TIMER1_COMPB_interrupt_6
//  212     {
//  213       gapcnt = 7;
        LDI     R16, 7
        STS     (smpls + 18), R16
//  214 
//  215       // Выборка значения бита
//  216       inbyte = (inbyte << 1);
        LDS     R16, (smpls + 19)
        LSL     R16
//  217       if (ccor>4)
        LDS     R30, smpls
        LDI     R31, 0
        LDI     R17, 240
        EOR     R30, R17
        ANDI    R30, 0xFE
        SUBI    R30, LOW((-(corrtbl) & 0xFFFF))
        SBCI    R31, (-(corrtbl) & 0xFFFF) >> 8
        LPM     R17, Z
        CPI     R17, 5
        BRCS    ??TIMER1_COMPB_interrupt_7
//  218       {
//  219          // Бит = 1
//  220          inbyte |= 1;
        ORI     R16, 0x01
??TIMER1_COMPB_interrupt_7:
        STS     (smpls + 19), R16
//  221       }
//  222 /*
//  223       else
//  224       {
//  225          // Бит = 0
//  226 
//  227       }
//  228 */
//  229       smplcnt++;
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+17
        INC     R16
        STD     Z+17, R16
//  230       if (smplcnt == 8)
        CPI     R16, 8
        BRNE    ??TIMER1_COMPB_interrupt_3
//  231       {
//  232         smplcnt = 0;
        LDI     R16, 0
        STD     Z+17, R16
//  233         // Принят полный байт
//  234         recbuf[inbytecnt] = inbyte;
        LDS     R18, (smpls + 19)
        ADIW    R27:R26, 8
        LD      R30, X+
        LD      R31, X
        SBIW    R27:R26, 9
        LDS     R16, (smpls + 20)
        LDI     R17, 0
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
//  235         inbytecnt++;
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+20
        INC     R16
        STD     Z+20, R16
//  236         if (inbytecnt == PACK_LEN)
        CPI     R16, 11
        BRNE    ??TIMER1_COMPB_interrupt_3
//  237         {
//  238           // Принят весь пакет
//  239           rec_state = REC_PREAMBLE;
        STD     Z+10, R17
//  240           smpls[7] = 0;
        STD     Z+7, R17
//  241           smpls[6] = 0;
        STD     Z+6, R17
//  242           smpls[5] = 0;
        STD     Z+5, R17
//  243           smpls[4] = 0;
        STD     Z+4, R17
//  244           smpls[3] = 0;
        STD     Z+3, R17
//  245           smpls[2] = 0;
        STD     Z+2, R17
//  246           smpls[1] = 0;
        STD     Z+1, R17
//  247           smpls[0] = 0;
        ST      Z, R17
//  248           hitcnt   = 0;
        STD     Z+12, R17
//  249 
//  250           flags.done = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        ORI     R16, 0x04
        ST      Z, R16
        RJMP    ??TIMER1_COMPB_interrupt_3
//  251 //          TIMER1_OCB_int_dis();
//  252         }
//  253       }
//  254     }
//  255     else gapcnt--;
??TIMER1_COMPB_interrupt_6:
        MOVW    R31:R30, R27:R26
        DEC     R16
        STD     Z+18, R16
//  256 
//  257 /* Тестовый блок. Начало---------------------------------------------------------------------------------
//  258 
//  259     tstarr[smplcnt] = ccor;
//  260     smplcnt++;
//  261 
//  262     if (smplcnt == 100)
//  263     {
//  264       rec_state = REC_PREAMBLE;
//  265       smpls[7] = 0;
//  266       smpls[6] = 0;
//  267       smpls[5] = 0;
//  268       smpls[4] = 0;
//  269       smpls[3] = 0;
//  270       smpls[2] = 0;
//  271       smpls[1] = 0;
//  272       smpls[0] = 0;
//  273       hitcnt   = 0;
//  274 
//  275       flags.done = 1;
//  276       TIMER1_OCB_int_dis();
//  277     }
//  278 
//  279    Тестовый блок. Конец----------------------------------------------------------------------------------
//  280 */
//  281     break;
//  282   }
//  283 
//  284   PORTC &= ~P_TST;
??TIMER1_COMPB_interrupt_3:
        CBI     0x15, 0x05
//  285 
//  286 }
        OUT     0x3F, R20
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R20, Y+
        LD      R30, Y+
        LD      R31, Y+
        LD      R26, Y+
        LD      R27, Y+
        RETI
        REQUIRE _A_PORTC
        REQUIRE _A_PIND

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine2:
        RCALL   ?Subroutine3
??CrossCallReturnLabel_23:
        LPM     R16, Z
        ADD     R17, R16
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine3:
        EOR     R30, R16
        LDI     R31, 0
        SUBI    R30, LOW((-(corrtbl) & 0xFFFF))
        SBCI    R31, (-(corrtbl) & 0xFFFF) >> 8
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine0:
        BST     R18, 7
        LDI     R18, 0
        BLD     R18, 0
        OR      R17, R18
        RET

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 14
`??TIMER1_COMPB_interrupt::??INTVEC 14`:
        CODE
        RJMP    TIMER1_COMPB_interrupt

        RSEG INITTAB:CODE:NOROOT(0)
        DATA
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//   2 bytes in segment ABSOLUTE
// 770 bytes in segment CODE
//   6 bytes in segment INITTAB
//   2 bytes in segment INTVEC
// 256 bytes in segment NEAR_F
//  29 bytes in segment NEAR_Z
// 
// 1 026 bytes of CODE memory (+ 8 bytes shared)
//    29 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none

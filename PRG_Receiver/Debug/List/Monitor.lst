###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       26/Oct/2021  16:53:18
# Copyright 1996-2021 IAR Systems AB.
#
#    Source file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Monitor.c
#    Command line =  
#        -f C:\Users\aly\AppData\Local\Temp\EW686A.tmp
#        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Monitor.c
#        --cpu=m8 -ms -o
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj
#        -lCN
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
#        -lB
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
#        --initializers_in_flash --debug -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 512 --clib -Ohz)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List\Monitor.lst
#    Object file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj\Monitor.r90
#
###############################################################################

D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Monitor.c
      1          #include <iom8.h>
      2          #include <ina90.h>
      3          #include <string.h>
      4          #include <pgmspace.h>
      5          #include <stdio.h>
      6          #include <stdlib.h>
      7          #include <ctype.h>
      8          #include "main.h"
      9          #include "USART.h"
     10          #include "Monitor.h"
     11          #include "wrk_params.h"
     12          #include "Timers.h"
     13          #include "..\PRG_Transmitter\RF_settings.h"
     14          #include "RF_receiver.h"
     15          #include "Util.h"
     16          
     17          extern __no_init D1W_device devices[MAX_DEVICES];
     18          
     19          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     20          char strbuf[INBUF_LEN];
   \                     strbuf:
   \   00000000                      DS8 100
     21          
     22          
     23          unsigned char exec_cmd(void);
     24          
     25          /*--------------------------------------------------------------------------------------
     26            Процедура работы через последовательный интерфейс
     27            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     28          void terminal(void)
   \                     terminal:
     29          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
     30            char ch;
     31            unsigned char k = 0;
   \   00000002   C00A               RJMP    ??terminal_0
     32          
     33          
     34            do
     35            {
     36              if (DataInReceiveBuffer())
     37              {
     38                unsigned char res;
     39                ch = USART_Receive();
     40                if (ch=='\r')
     41                {
     42                  crlf();
   \                     ??terminal_1:
   \   00000004   ....               RCALL   crlf
     43                  USART_Transmit(' ');
   \   00000006   E200               LDI     R16, 32
   \   00000008   ....               RCALL   USART_Transmit
     44                  res = exec_cmd();
   \   0000000A   ....               RCALL   exec_cmd
   \   0000000C   2F80               MOV     R24, R16
     45                  crlf();
   \   0000000E   ....               RCALL   crlf
     46                  if (res==0)
   \   00000010   2388               TST     R24
   \   00000012   F069               BREQ    ??terminal_2
     47                  {
     48                    break;
     49                  }
     50                  USART_Transmit('>');
   \   00000014   E30E               LDI     R16, 62
   \   00000016   ....               RCALL   USART_Transmit
     51                  k = 0;
   \                     ??terminal_0:
   \   00000018   E0A0               LDI     R26, 0
     52                }
   \                     ??terminal_3:
   \   0000001A   ....               RCALL   DataInReceiveBuffer
   \   0000001C   2300               TST     R16
   \   0000001E   F3E9               BREQ    ??terminal_3
   \   00000020   ....               RCALL   USART_Receive
   \   00000022   2F80               MOV     R24, R16
   \   00000024   300D               CPI     R16, 13
   \   00000026   F371               BREQ    ??terminal_1
     53                else if (ch==0x1B)
   \   00000028   310B               CPI     R16, 27
   \   0000002A   F419               BRNE    ??terminal_4
     54                {
     55                  crlf();
   \   0000002C   ....               RCALL   crlf
     56                  break;
     57                }
     58                else
     59                {
     60                  // Отправить эхо
     61                  USART_Transmit(ch);
     62                  strbuf[k] = ch;
     63                  k++;
     64                  strbuf[k] = 0;
     65                  if (k == (INBUF_LEN-1))
     66                  {
     67                    USART_sendstr("\n\rIn buf. overflow!\n\r>");
     68                    k = 0;
     69                  }
     70                }
     71              }
     72          
     73            }
     74            while (1);
     75          }
   \                     ??terminal_2:
   \   0000002E   E0E4               LDI     R30, 4
   \   00000030   ....               RJMP    ?EPILOGUE_B4_L09
   \                     ??terminal_4:
   \   00000032   ....               RCALL   USART_Transmit
   \   00000034   E0B0               LDI     R27, 0
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   ....               SUBI    R30, LOW((-(strbuf) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(strbuf) & 0xFFFF) >> 8
   \   0000003C   8380               ST      Z, R24
   \   0000003E   95A3               INC     R26
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   ....               SUBI    R30, LOW((-(strbuf) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(strbuf) & 0xFFFF) >> 8
   \   00000046   83B0               ST      Z, R27
   \   00000048   36A3               CPI     R26, 99
   \   0000004A   F739               BRNE    ??terminal_3
   \   0000004C   ....               LDI     R16, LOW(`?<Constant "\\n\\rIn buf. overflow!\\n\\r>">`)
   \   0000004E   ....               LDI     R17, (`?<Constant "\\n\\rIn buf. overflow!\\n\\r>">`) >> 8
   \   00000050   ....               RCALL   USART_sendstr
   \   00000052   CFE2               RJMP    ??terminal_0
     76          	
     77          
     78          /*--------------------------------------------------------------------------------------
     79             Выполнение поступившей команды
     80            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     81          unsigned char exec_cmd(void)
   \                     exec_cmd:
     82          {
   \   00000000   ....               RCALL   ?PROLOGUE5_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
     83            unsigned char i,j,k;
     84            char* cname;
     85            char ch;
     86          
     87            i=0;
   \   00000002   E080               LDI     R24, 0
   \   00000004   E090               LDI     R25, 0
   \   00000006   C001               RJMP    ??exec_cmd_0
     88          
     89            while (isalnum(strbuf[i])!=0) i++;
   \                     ??exec_cmd_1:
   \   00000008   9583               INC     R24
   \                     ??exec_cmd_0:
   \   0000000A   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   0000000C   0F08               ADD     R16, R24
   \   0000000E   1F19               ADC     R17, R25
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   81A0               LD      R26, Z
   \   00000014   2FEA               MOV     R30, R26
   \   00000016   E0F0               LDI     R31, 0
   \   00000018   ....               SUBI    R30, LOW((-(_Small_Ctype + 1) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, HIGH((-(_Small_Ctype + 1) & 0xFFFF))
   \   0000001C   9124               LPM     R18, Z
   \   0000001E   7027               ANDI    R18, 0x07
   \   00000020   F799               BRNE    ??exec_cmd_1
     90          
     91            k = i;
     92            ch = strbuf[k];
     93            strbuf[k] = 0;  // Обозначим конец строки имени параметра
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8390               ST      Z, R25
     94            k++;
   \   00000026   9583               INC     R24
   \   00000028   2E48               MOV     R4, R24
     95          
     96            // Искать параметр с заданным именем
     97            for (i=0;i < get_params_num(); i++)
   \   0000002A   E080               LDI     R24, 0
   \   0000002C   C001               RJMP    ??exec_cmd_2
   \                     ??exec_cmd_3:
   \   0000002E   9583               INC     R24
   \                     ??exec_cmd_2:
   \   00000030   ....               RCALL   get_params_num
   \   00000032   1780               CP      R24, R16
   \   00000034   0791               CPC     R25, R17
   \   00000036   F524               BRGE    ??exec_cmd_4
     98            {
     99              cname = get_params_name(i);
   \   00000038   2F08               MOV     R16, R24
   \   0000003A   ....               RCALL   get_params_name
    100              if (strcmp(strbuf, cname)==0)
   \   0000003C   0198               MOVW    R19:R18, R17:R16
   \   0000003E   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000040   ....               RCALL   strcmp
   \   00000042   2B01               OR      R16, R17
   \   00000044   F7A1               BRNE    ??exec_cmd_3
    101              {
    102                // Найден параметр
    103                if (ch=='=')
   \   00000046   33AD               CPI     R26, 61
   \   00000048   F791               BRNE    ??exec_cmd_3
    104                {
    105                  j = k;
   \   0000004A   2D04               MOV     R16, R4
   \   0000004C   C001               RJMP    ??exec_cmd_5
    106                  // Обнаружена команда записи, прочитать аргумент
    107                  while (isalnum(strbuf[j])!=0) j++;
   \                     ??exec_cmd_6:
   \   0000004E   9503               INC     R16
   \                     ??exec_cmd_5:
   \   00000050   E0F0               LDI     R31, 0
   \   00000052   2FE0               MOV     R30, R16
   \   00000054   ....               SUBI    R30, LOW((-(strbuf) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(strbuf) & 0xFFFF) >> 8
   \   00000058   81E0               LD      R30, Z
   \   0000005A   E0F0               LDI     R31, 0
   \   0000005C   ....               SUBI    R30, LOW((-(_Small_Ctype + 1) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, HIGH((-(_Small_Ctype + 1) & 0xFFFF))
   \   00000060   9114               LPM     R17, Z
   \   00000062   7017               ANDI    R17, 0x07
   \   00000064   F7A1               BRNE    ??exec_cmd_6
    108                  Str_to_param((unsigned char*)&strbuf[k],i);
   \   00000066   019C               MOVW    R19:R18, R25:R24
   \   00000068   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_4:
   \   0000006A   0D04               ADD     R16, R4
   \   0000006C   1F13               ADC     R17, R19
   \   0000006E   ....               RCALL   Str_to_param
    109                  Param_to_str((unsigned char*)strbuf,i);
   \   00000070   ....               RCALL   ?Subroutine0
    110                  USART_Transmit('=');
   \                     ??CrossCallReturnLabel_1:
   \   00000072   E30D               LDI     R16, 61
   \   00000074   ....               RCALL   USART_Transmit
    111                  USART_sendstr(strbuf);
   \   00000076   ....               RCALL   ?Subroutine1
    112                  return 1;
    113                }
    114          
    115              }
    116            }
   \                     ??CrossCallReturnLabel_5:
   \   00000078   ....               RCALL   USART_sendstr
    117            // Если не нашли такой параметр, то проверить не запрос ли это всех параметров
    118            if (ch=='?')
    119            {
    120              for (i=0;i < get_params_num(); i++)
    121              {
    122                USART_Transmit('\n');
    123                USART_Transmit('\r');
    124                cname = get_params_name(i);
    125                USART_sendstr(cname);
    126                USART_Transmit('=');
    127                Param_to_str((unsigned char*)strbuf,i);
    128                USART_sendstr(strbuf);
    129              }
    130              return 1;
    131            }
    132          
    133            if (ch=='+')  // Сохраним все параметры в EEPROM
    134            {
    135              Save_Params_To_EEPROM();
    136              USART_sendstr("All parameters saved!");
    137              return 1;
    138            }
    139          
    140            if (ch=='-')  // Восстановим параметры из EEPROM
    141            {
    142              Restore_settings_from_eeprom();
    143              USART_sendstr("Restored from EEPROM!");
    144              return 1;
    145            }
    146          
    147            if (ch=='*')  // Восстановим параметры по умолчанию
    148            {
    149              Restore_default_settings();
    150              USART_sendstr("Restored defaults!");
    151              return 1;
    152            }
    153          
    154            if (ch=='.')  // Восстановим параметры по умолчанию
    155            {
    156              return 0;
    157            }
    158          
    159          
    160          /*
    161            if (ch=='!')
    162            {
    163              unsigned int temperature;
    164              for (i=0;i<MAX_DEVICES;i++)
    165              {
    166                if (devices[i].id[0] == DS1820_FAMILY_ID)
    167                {
    168                  temperature = DS1820_ReadTemperature(devices[i].id);
    169                  sprintf((char*)strbuf,"%f",(float)temperature/2);
    170                  strcat(strbuf,"\n\r");
    171                  USART_sendstr(strbuf);
    172                }
    173          
    174              }
    175              return 1;
    176            }
    177          */
    178          
    179          
    180          
    181            return 1;
   \                     ??exec_cmd_7:
   \   0000007A   E001               LDI     R16, 1
   \                     ??exec_cmd_8:
   \   0000007C   E0E5               LDI     R30, 5
   \   0000007E   ....               RJMP    ?EPILOGUE_B5_L09
   \                     ??exec_cmd_4:
   \   00000080   33AF               CPI     R26, 63
   \   00000082   F499               BRNE    ??exec_cmd_9
   \   00000084   E080               LDI     R24, 0
   \                     ??exec_cmd_10:
   \   00000086   ....               RCALL   get_params_num
   \   00000088   1780               CP      R24, R16
   \   0000008A   0791               CPC     R25, R17
   \   0000008C   F7B4               BRGE    ??exec_cmd_7
   \   0000008E   E00A               LDI     R16, 10
   \   00000090   ....               RCALL   USART_Transmit
   \   00000092   E00D               LDI     R16, 13
   \   00000094   ....               RCALL   USART_Transmit
   \   00000096   2F08               MOV     R16, R24
   \   00000098   ....               RCALL   get_params_name
   \   0000009A   ....               RCALL   USART_sendstr
   \   0000009C   E30D               LDI     R16, 61
   \   0000009E   ....               RCALL   USART_Transmit
   \   000000A0   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000000A2   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_6:
   \   000000A4   ....               RCALL   USART_sendstr
   \   000000A6   9583               INC     R24
   \   000000A8   CFEE               RJMP    ??exec_cmd_10
   \                     ??exec_cmd_9:
   \   000000AA   32AB               CPI     R26, 43
   \   000000AC   F421               BRNE    ??exec_cmd_11
   \   000000AE   ....               RCALL   Save_Params_To_EEPROM
   \   000000B0   ....               LDI     R16, LOW(`?<Constant "All parameters saved!">`)
   \   000000B2   ....               LDI     R17, (`?<Constant "All parameters saved!">`) >> 8
   \   000000B4   CFE1               RJMP    ??CrossCallReturnLabel_5
   \                     ??exec_cmd_11:
   \   000000B6   32AD               CPI     R26, 45
   \   000000B8   F421               BRNE    ??exec_cmd_12
   \   000000BA   ....               RCALL   Restore_settings_from_eeprom
   \   000000BC   ....               LDI     R16, LOW((`?<Constant "All parameters saved!">` + 22))
   \   000000BE   ....               LDI     R17, HIGH((`?<Constant "All parameters saved!">` + 22))
   \   000000C0   CFDB               RJMP    ??CrossCallReturnLabel_5
   \                     ??exec_cmd_12:
   \   000000C2   32AA               CPI     R26, 42
   \   000000C4   F421               BRNE    ??exec_cmd_13
   \   000000C6   ....               RCALL   Restore_default_settings
   \   000000C8   ....               LDI     R16, LOW((`?<Constant "All parameters saved!">` + 44))
   \   000000CA   ....               LDI     R17, HIGH((`?<Constant "All parameters saved!">` + 44))
   \   000000CC   CFD5               RJMP    ??CrossCallReturnLabel_5
   \                     ??exec_cmd_13:
   \   000000CE   32AE               CPI     R26, 46
   \   000000D0   F6A1               BRNE    ??exec_cmd_7
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   CFD3               RJMP    ??exec_cmd_8
    182          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               LDI     R16, LOW(strbuf)
   \   00000002   ....               LDI     R17, (strbuf) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   019C               MOVW    R19:R18, R25:R24
   \   00000002   ....               LDI     R16, LOW(strbuf)
   \   00000004   ....               LDI     R17, (strbuf) >> 8
   \   00000006   ....               RJMP    Param_to_str

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\n\\rIn buf. overf`:
   \   00000000   0D0A6E496220       DC8 "\012\015In buf. overflow!\012\015>"
   \              6675202E766F
   \              72656C66776F
   \              0A213E0D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "All parameters sa`:
   \   00000000   6C41206C6170       DC8 "All parameters saved!"
   \              6172656D6574
   \              737273207661
   \              64650021    
   \                     `?<Initializer for <Constant "Restored from EEP`:
   \   00000016   65527473726F       DC8 "Restored from EEPROM!"
   \              646566206F72
   \              206D45455250
   \              4D4F0021    
   \                     `?<Initializer for <Constant "Restored defaults`:
   \   0000002C   65527473726F       DC8 "Restored defaults!"
   \              646564206665
   \              7561746C2173
   \              00          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "\\n\\rIn buf. overflow!\\n\\r>">`:
   \   00000000                      DS8 23
   \   00000017                      REQUIRE `?<Initializer for <Constant "\\n\\rIn buf. overf`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "All parameters saved!">`:
   \   00000000                      DS8 22
   \   00000016                      REQUIRE `?<Initializer for <Constant "All parameters sa`
   \   00000016                      DS8 22
   \   0000002C                      REQUIRE `?<Initializer for <Constant "Restored from EEP`
   \   0000002C                      DS8 19
   \   0000003F                      REQUIRE `?<Initializer for <Constant "Restored defaults`
    183          
    184          
    185          
    186          
    187          
    188          
    189          
    190          
    191          	
    192          	

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      5      2   exec_cmd
        5      2   -> Param_to_str
        5      2   -> Restore_default_settings
        5      2   -> Restore_settings_from_eeprom
        5      2   -> Save_Params_To_EEPROM
        5      2   -> Str_to_param
        5      2   -> USART_Transmit
        5      2   -> USART_sendstr
        5      2   -> get_params_name
        5      2   -> get_params_num
        5      2   -> strcmp
      4      2   terminal
        4      2   -> DataInReceiveBuffer
        4      2   -> USART_Receive
        4      2   -> USART_Transmit
        4      2   -> USART_sendstr
        4      2   -> crlf
        4      2   -> exec_cmd


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      63  ?<Constant "All parameters saved!">
      23  ?<Constant "\n\rIn buf. overflow!\n\r>">
      63  ?<Initializer for <Constant "All parameters sa
      23  ?<Initializer for <Constant "\n\rIn buf. overf
       8  ?Subroutine0
       6  ?Subroutine1
     214  exec_cmd
     100  strbuf
      84  terminal
      12  -- Other

 
 312 bytes in segment CODE
  12 bytes in segment INITTAB
  86 bytes in segment NEAR_I
  86 bytes in segment NEAR_ID
 100 bytes in segment NEAR_Z
 
 398 bytes of CODE memory (+ 12 bytes shared)
 186 bytes of DATA memory

Errors: none
Warnings: none

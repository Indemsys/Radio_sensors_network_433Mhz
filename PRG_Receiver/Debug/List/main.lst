###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       26/Oct/2021  16:53:18
# Copyright 1996-2021 IAR Systems AB.
#
#    Source file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\main.c
#    Command line =  
#        -f C:\Users\aly\AppData\Local\Temp\EW686C.tmp
#        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\main.c
#        --cpu=m8 -ms -o
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj
#        -lCN
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
#        -lB
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
#        --initializers_in_flash --debug -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 512 --clib -Ohz)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List\main.lst
#    Object file  =  
#        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj\main.r90
#
###############################################################################

D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\main.c
      1          /*
      2            Программа центрального приемника на ATMEGA8
      3          */
      4          #include <iom8.h>

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      5          #include <ina90.h>
      6          #include <string.h>
      7          #include <pgmspace.h>
      8          #include <stdio.h>
      9          #include "main.h"
     10          #include "USART.h"
     11          #include "Monitor.h"
     12          #include "Wrk_params.h"
     13          #include "Timers.h"
     14          #include "..\PRG_Transmitter\RF_settings.h"
     15          #include "RF_receiver.h"
     16          #include "Util.h"
     17          #include "bin_defines.h"
     18          #include "lcd.h"
     19          #include "rc4.h"
     20          #include "modbus.h"
     21          
     22          
     23          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     24          __flash char TEST[] = "Test";
   \                     TEST:
   \   00000000   6554747300         DC8 "Test"
     25          
     26          extern __no_init TPARAMS wp;   // Рабочие параметры в RAM
     27          extern char strbuf[INBUF_LEN];
     28          extern unsigned char ccor1;
     29          extern unsigned char ccor2;
     30          extern unsigned char ccor3;
     31          
     32          extern volatile unsigned int  modb_timeout;
     33          
     34          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     35          char rf_packet[20];
   \                     rf_packet:
   \   00000000                      DS8 20
     36          
     37          volatile tflags flags;
     38          
     39          int temperature;
     40          
     41          
     42          D1W_device    nodes_temperatures[MAX_NODES][MAX_DEVICES];
     43          unsigned int  nodes_an_inputs[MAX_NODES][MAX_AN_IN]; // Массив состояний аналоговых входов
     44          
     45          unsigned char nodes_btns[MAX_NODES];
     46          
     47          unsigned int  led_timeout;
   \                     led_timeout:
   \   00000014                      DS8 2
   \                     flags:
   \   00000016                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     temperature:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     nodes_temperatures:
   \   00000000                      DS8 160

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     nodes_an_inputs:
   \   00000000                      DS8 48

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     nodes_btns:
   \   00000000                      DS8 4
     48          
     49          
     50          unsigned char check_packet_crc(void);
     51          unsigned char save_temperature(unsigned char node);
     52          unsigned char save_an_inputs(unsigned char node);
     53          void          read_buttons(unsigned char node);
     54          unsigned char get_node_num(void);
     55          
     56          
     57          void          temperature_to_com(unsigned char node);
     58          void          analog_in_to_com(unsigned char node);
     59          void          buttons_in_to_com(unsigned char node);
     60          
     61          void          corr_val_to_lcd(void);
     62          /*--------------------------------------------------------------------------------------
     63          
     64               MAIN
     65          
     66            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     67          void main( void )
   \                     main:
     68          {
   \   00000000   938A               ST      -Y, R24
     69          /*
     70            P_OUT1    (0x04)   Управляемый выход 1
     71            P_OUT2    (0x04)   Управляемый выход 2
     72            P_BT1     (0x04)   Кнопка 1
     73            P_BT2     (0x08)   Кнопка 2
     74            P_BT3     (0x10)   Кнопка 3
     75            P_BT4     (0x20)   Кнопка 4
     76          */
     77            DDRB  = P_OUT1 | P_OUT2;
   \   00000002   E003               LDI     R16, 3
   \   00000004   BB07               OUT     0x17, R16
     78            PORTB = b11111111 & (~P_OUT1) & (~P_OUT2);
   \   00000006   EF0C               LDI     R16, 252
   \   00000008   BB08               OUT     0x18, R16
     79          
     80          /*
     81            P_RS      (0x01)   Сигнал выбора регистра LCD
     82            P_RW      (0x02)   Сигнал чтения-записи   LCD
     83            P_E       (0x04)   Сигнал разрешения      LCD
     84            P_TST     (0x20)   Вспомогательный сигнал 
     85          */
     86            DDRC  = P_RS | P_RW | P_E | P_TST;
   \   0000000A   E207               LDI     R16, 39
   \   0000000C   BB04               OUT     0x14, R16
     87            PORTC = b11111111 & (~P_RW) & (~P_E);
   \   0000000E   EF09               LDI     R16, 249
   \   00000010   BB05               OUT     0x15, R16
     88          
     89          /*
     90            P_RXD     (0x01)
     91            P_TXD     (0x02)
     92            P_LED     (0x04)  Управление светодиодом  
     93            P_DIN     (0x08)  Вход сигнала с приемника
     94            P_D0      (0x10)  Сигнал данных LCD
     95            P_D1      (0x20)  Сигнал данных LCD
     96            P_D2      (0x40)  Сигнал данных LCD
     97            P_D3      (0x80)  Сигнал данных LCD
     98          */
     99            DDRD  = P_TXD | P_LED | P_D0 |  P_D1 |  P_D2 |  P_D3;
   \   00000012   EF06               LDI     R16, 246
   \   00000014   BB01               OUT     0x11, R16
    100            PORTD = 0xFF & (~P_DIN) & (~P_D0) & (~P_D1) & (~P_D2) & (~P_D3) ;
   \   00000016   E007               LDI     R16, 7
   \   00000018   BB02               OUT     0x12, R16
    101          
    102            TIMER0_init();
   \   0000001A   ....               RCALL   TIMER0_init
    103            USART_Init( 16 );  // 115200 при кварце 16 Мгц
   \   0000001C   E100               LDI     R16, 16
   \   0000001E   E010               LDI     R17, 0
   \   00000020   ....               RCALL   USART_Init
    104            _SEI();           /* Enable interrupts => enable UART interrupts */
   \   00000022   9478               SEI
    105          
    106            // Инициализируем оперативные переменные из EEPROM
    107            if (Restore_settings_from_eeprom()== 0)
   \   00000024   ....               RCALL   Restore_settings_from_eeprom
   \   00000026   2300               TST     R16
   \   00000028   F419               BRNE    ??main_0
    108            {
    109              Restore_default_settings();
   \   0000002A   ....               RCALL   Restore_default_settings
    110              USART_Transmit('c');
   \   0000002C   E603               LDI     R16, 99
   \   0000002E   C00B               RJMP    ??main_1
    111            }
    112            else
    113            {
    114              if (wp.version != PRG_VERSION)
   \                     ??main_0:
   \   00000030   ....               LDI     R30, LOW(wp)
   \   00000032   ....               LDI     R31, (wp) >> 8
   \   00000034   8100               LD      R16, Z
   \   00000036   8111               LDD     R17, Z+1
   \   00000038   3607               CPI     R16, 103
   \   0000003A   4010               SBCI    R17, 0
   \   0000003C   F019               BREQ    ??main_2
    115              {
    116                Restore_default_settings();
   \   0000003E   ....               RCALL   Restore_default_settings
    117                USART_Transmit('v');
   \   00000040   E706               LDI     R16, 118
   \   00000042   C001               RJMP    ??main_1
    118              }
    119              else
    120              {
    121                USART_Transmit('.');
   \                     ??main_2:
   \   00000044   E20E               LDI     R16, 46
   \                     ??main_1:
   \   00000046   ....               RCALL   USART_Transmit
    122              }
    123            }
    124          
    125          
    126          
    127            __delay_cycles(1600000);
   \   00000048   EF0F               LDI     R16, 255
   \   0000004A   EE11               LDI     R17, 225
   \   0000004C   E024               LDI     R18, 4
   \   0000004E   5001               SUBI    R16, 1
   \   00000050   4010               SBCI    R17, 0
   \   00000052   4020               SBCI    R18, 0
   \   00000054   F7E1               BRNE    $-6
   \   00000056   C000               RJMP    $+2
   \   00000058   0000               NOP
    128          
    129            lcdInit();
   \   0000005A   ....               RCALL   lcdInit
    130            lcdPrintData_P(TEST);
   \   0000005C   ....               LDI     R16, LOW(TEST)
   \   0000005E   ....               LDI     R17, (TEST) >> 8
   \   00000060   ....               RCALL   lcdPrintData_P
    131          
    132          
    133            RF_receiver_init(rf_packet);
   \   00000062   ....               LDI     R16, LOW(rf_packet)
   \   00000064   ....               LDI     R17, (rf_packet) >> 8
   \   00000066   ....               RCALL   RF_receiver_init
   \   00000068   C00F               RJMP    ??main_3
    134          
    135          
    136            for( ; ; )        /* Forever */
    137            {
    138              if (flags.done)
    139              {
    140                unsigned char node;
    141          
    142                flags.done = 0;
    143          
    144                corr_val_to_lcd();
    145                lcdGotoXY(7,0);
    146                
    147                PORTD &= ~P_LED;
    148                led_timeout = 200;
    149          
    150                rc4_setup((unsigned char*)&wp.keycode, 4 );
    151                rc4_crypt((unsigned char*)rf_packet, 11 );
    152          
    153                node = get_node_num();
    154                if (node < MAX_NODES)
    155                {
    156                  // Проверим контрольную сумму
    157                  if (check_packet_crc())
    158                  {
    159                    switch (rf_packet[0] >> 4)
    160                    {
    161                    case PACK_TEMPER:
    162                      save_temperature(node);
    163          //            temperature_to_com(node);
    164                      break;
    165                    case PACK_BUTTONS:
    166                      read_buttons(node);
    167          //            buttons_in_to_com(node);
    168                      break;
    169                    case PACK_ADC:
    170                      save_an_inputs(node);
    171          //            analog_in_to_com(node);
    172                      break;
    173                    }
    174                    lcdDataWrite('+'); // Контрольная сумма корректная 
    175                  }
    176                  else
    177                  {
    178                    lcdDataWrite('-'); // Ошибка контрольной суммы 
   \                     ??main_4:
   \   0000006A   E20D               LDI     R16, 45
   \                     ??main_5:
   \   0000006C   ....               RCALL   lcdDataWrite
    179                    
    180                  }  
    181                }
    182          
    183              }
    184          
    185              if (DataInReceiveBuffer())
   \                     ??main_6:
   \   0000006E   ....               RCALL   DataInReceiveBuffer
   \   00000070   2300               TST     R16
   \   00000072   F051               BREQ    ??main_3
    186              {
    187                char ch;
    188                ch = USART_Receive();
   \   00000074   ....               RCALL   USART_Receive
   \   00000076   2F80               MOV     R24, R16
    189          
    190                if (ch == 0x1B)
   \   00000078   310B               CPI     R16, 27
   \   0000007A   F421               BRNE    ??main_7
    191                {
    192                  crlf();
   \   0000007C   ....               RCALL   crlf
    193                  USART_Transmit('>');
   \   0000007E   E30E               LDI     R16, 62
   \   00000080   ....               RCALL   USART_Transmit
    194                  terminal();
   \   00000082   ....               RCALL   terminal
    195                }
    196                
    197                modbus_task(ch);
   \                     ??main_7:
   \   00000084   2F08               MOV     R16, R24
   \   00000086   ....               RCALL   modbus_task
    198                
    199              }
   \                     ??main_3:
   \   00000088   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_7:
   \   0000008A   8906               LDD     R16, Z+22
   \   0000008C   FF02               SBRS    R16, 2
   \   0000008E   CFEF               RJMP    ??main_6
   \   00000090   8906               LDD     R16, Z+22
   \   00000092   7F0B               ANDI    R16, 0xFB
   \   00000094   8B06               STD     Z+22, R16
   \   00000096   ....               RCALL   corr_val_to_lcd
   \   00000098   E010               LDI     R17, 0
   \   0000009A   E007               LDI     R16, 7
   \   0000009C   ....               RCALL   lcdGotoXY
   \   0000009E   9892               CBI     0x12, 0x02
   \   000000A0   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   000000A2   EC08               LDI     R16, 200
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   8B04               STD     Z+20, R16
   \   000000A8   8B15               STD     Z+21, R17
   \   000000AA   E024               LDI     R18, 4
   \   000000AC   ....               LDI     R16, LOW((wp + 8))
   \   000000AE   ....               LDI     R17, HIGH((wp + 8))
   \   000000B0   ....               RCALL   rc4_setup
   \   000000B2   E02B               LDI     R18, 11
   \   000000B4   E030               LDI     R19, 0
   \   000000B6   ....               LDI     R16, LOW(rf_packet)
   \   000000B8   ....               LDI     R17, (rf_packet) >> 8
   \   000000BA   ....               RCALL   rc4_crypt
   \   000000BC   9180....           LDS     R24, rf_packet
   \   000000C0   7087               ANDI    R24, 0x07
   \   000000C2   3084               CPI     R24, 4
   \   000000C4   F6A0               BRCC    ??main_6
   \   000000C6   ....               RCALL   check_packet_crc
   \   000000C8   2300               TST     R16
   \   000000CA   F279               BREQ    ??main_4
   \   000000CC   9100....           LDS     R16, rf_packet
   \   000000D0   9502               SWAP    R16
   \   000000D2   700F               ANDI    R16, 0x0F
   \   000000D4   F029               BREQ    ??main_8
   \   000000D6   950A               DEC     R16
   \   000000D8   F031               BREQ    ??main_9
   \   000000DA   950A               DEC     R16
   \   000000DC   F039               BREQ    ??main_10
   \   000000DE   C008               RJMP    ??main_11
   \                     ??main_8:
   \   000000E0   2F08               MOV     R16, R24
   \   000000E2   ....               RCALL   save_temperature
   \   000000E4   C005               RJMP    ??main_11
   \                     ??main_9:
   \   000000E6   2F08               MOV     R16, R24
   \   000000E8   ....               RCALL   read_buttons
   \   000000EA   C002               RJMP    ??main_11
   \                     ??main_10:
   \   000000EC   2F08               MOV     R16, R24
   \   000000EE   ....               RCALL   save_an_inputs
   \                     ??main_11:
   \   000000F0   E20B               LDI     R16, 43
   \   000000F2   CFBC               RJMP    ??main_5
   \   000000F4                      REQUIRE _A_DDRB
   \   000000F4                      REQUIRE _A_PORTB
   \   000000F4                      REQUIRE _A_DDRC
   \   000000F4                      REQUIRE _A_PORTC
   \   000000F4                      REQUIRE _A_DDRD
   \   000000F4                      REQUIRE _A_PORTD
    200          
    201            }
    202          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   ....               LDI     R30, LOW(rf_packet)
   \   00000002   ....               LDI     R31, (rf_packet) >> 8
   \   00000004   9508               RET
    203          
    204          
    205          /*--------------------------------------------------------------------------------------
    206             Проверка контрольной суммы полученного пакета
    207            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    208          unsigned char check_packet_crc(void)
   \                     check_packet_crc:
    209          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    210            unsigned int crc;
    211            crc = ((unsigned int)rf_packet[9] << 8) | rf_packet[10];
   \   00000002   9190....           LDS     R25, (rf_packet + 9)
   \   00000006   9180....           LDS     R24, (rf_packet + 10)
    212          
    213            if (crc == GetBlockCRC((unsigned char*)rf_packet,9))
   \   0000000A   E049               LDI     R20, 9
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   E060               LDI     R22, 0
   \   00000010   E070               LDI     R23, 0
   \   00000012   ....               LDI     R16, LOW(rf_packet)
   \   00000014   ....               LDI     R17, (rf_packet) >> 8
   \   00000016   ....               RCALL   GetBlockCRC
   \   00000018   1780               CP      R24, R16
   \   0000001A   0791               CPC     R25, R17
   \   0000001C   F411               BRNE    ??check_packet_crc_0
    214              return 1;
   \   0000001E   E001               LDI     R16, 1
   \   00000020   C001               RJMP    ??check_packet_crc_1
    215            else
    216              return 0;
   \                     ??check_packet_crc_0:
   \   00000022   E000               LDI     R16, 0
   \                     ??check_packet_crc_1:
   \   00000024   E0E2               LDI     R30, 2
   \   00000026   ....               RJMP    ?EPILOGUE_B2_L09
    217          }
    218          
    219          /*--------------------------------------------------------------------------------------
    220            Запись в память принятого пакета с температурой
    221            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ??Subroutine16_0
   \   00000002                      ;               // Fall through to label ??Subroutine16_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine16_0:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ....               RJMP    ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine17_0:
   \   00000000   E050               LDI     R21, 0
   \   00000002   ....               RJMP    ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
    222          unsigned char save_temperature(unsigned char node)
   \                     save_temperature:
    223          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
    224            unsigned char i,k;
    225            unsigned char res;
    226          
    227            // Ищем зарегистрированный идентификатор
    228            for (i=0;i<MAX_DEVICES;i++)
   \   00000002   E020               LDI     R18, 0
   \   00000004   E064               LDI     R22, 4
   \   00000006   E010               LDI     R17, 0
   \   00000008   E248               LDI     R20, 40
   \   0000000A   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_25:
   \   0000000C   ....               LDI     R26, LOW(nodes_temperatures)
   \   0000000E   ....               LDI     R27, (nodes_temperatures) >> 8
   \   00000010   0FA0               ADD     R26, R16
   \   00000012   1FB1               ADC     R27, R17
    229            {
    230               if (nodes_temperatures[node][i].id[0]!=0)
   \                     ??save_temperature_0:
   \   00000014   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000016   8130               LD      R19, Z
   \   00000018   2333               TST     R19
   \   0000001A   F079               BREQ    ??save_temperature_1
    231               {
    232                  res = 0;
    233                  for (k=0;k<6;k++)
   \   0000001C   E040               LDI     R20, 0
   \   0000001E   E036               LDI     R19, 6
    234                  {
    235                    if (nodes_temperatures[node][i].id[k]!= rf_packet[k+1])
   \                     ??save_temperature_2:
   \   00000020   E050               LDI     R21, 0
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   8170               LD      R23, Z
   \   0000002A   ....               RCALL   ?Subroutine3
    236                    {
    237                      res = 1;
    238                      break;
    239                    }
    240                  }
   \                     ??CrossCallReturnLabel_4:
   \   0000002C   8151               LDD     R21, Z+1
   \   0000002E   1775               CP      R23, R21
   \   00000030   F421               BRNE    ??save_temperature_1
   \   00000032   9543               INC     R20
   \   00000034   953A               DEC     R19
   \   00000036   F0B1               BREQ    ??save_temperature_3
   \   00000038   CFF3               RJMP    ??save_temperature_2
    241                  if (res == 0)
    242                  {
    243                    // Идентификатор уже зарегистрирован, запишем температуру для данного идентификатора
    244                    nodes_temperatures[node][i].temperature =
    245                      ((unsigned int)rf_packet[7] << 8) | rf_packet[8];
    246                    return 1;
    247                  }
    248               }
    249            }
   \                     ??save_temperature_1:
   \   0000003A   9523               INC     R18
   \   0000003C   956A               DEC     R22
   \   0000003E   F751               BRNE    ??save_temperature_0
    250            // Ищем пустой идентификатор
    251            for (i=0;i<MAX_DEVICES;i++)
   \   00000040   E020               LDI     R18, 0
   \   00000042   E034               LDI     R19, 4
    252            {
    253              if (nodes_temperatures[node][i].id[0]==0)
   \                     ??save_temperature_4:
   \   00000044   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000046   8140               LD      R20, Z
   \   00000048   2344               TST     R20
   \   0000004A   F4D1               BRNE    ??save_temperature_5
    254              {
    255                // Нашли. Запишем идентификатор и температуру
    256                for (k=0;k<6;k++) nodes_temperatures[node][i].id[k]= rf_packet[k+1];
   \   0000004C   E040               LDI     R20, 0
   \   0000004E   E036               LDI     R19, 6
   \   00000050   E050               LDI     R21, 0
   \                     ??save_temperature_6:
   \   00000052   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   00000054   8161               LDD     R22, Z+1
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   0FE4               ADD     R30, R20
   \   0000005A   1FF5               ADC     R31, R21
   \   0000005C   8360               ST      Z, R22
   \   0000005E   9543               INC     R20
   \   00000060   953A               DEC     R19
   \   00000062   F7B9               BRNE    ??save_temperature_6
   \                     ??save_temperature_3:
   \   00000064   9170....           LDS     R23, (rf_packet + 7)
   \   00000068   E010               LDI     R17, 0
   \   0000006A   9160....           LDS     R22, (rf_packet + 8)
   \   0000006E   2F02               MOV     R16, R18
   \   00000070   E04A               LDI     R20, 10
   \   00000072   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_26:
   \   00000074   0FA0               ADD     R26, R16
   \   00000076   1FB1               ADC     R27, R17
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8760               STD     Z+8, R22
   \   0000007C   8771               STD     Z+9, R23
    257                nodes_temperatures[node][i].temperature =
    258                    ((unsigned int)rf_packet[7] << 8) | rf_packet[8];
    259                return 1;
   \   0000007E   C003               RJMP    ??save_temperature_7
    260              }
    261            }
   \                     ??save_temperature_5:
   \   00000080   9523               INC     R18
   \   00000082   953A               DEC     R19
   \   00000084   F6F9               BRNE    ??save_temperature_4
    262            return 1;
   \                     ??save_temperature_7:
   \   00000086   ....               RJMP    ?Subroutine14
    263          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ....               LDI     R30, LOW(rf_packet)
   \   00000002   ....               LDI     R31, (rf_packet) >> 8
   \   00000004   0FE4               ADD     R30, R20
   \   00000006   1FF5               ADC     R31, R21
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   2F02               MOV     R16, R18
   \   00000002   E010               LDI     R17, 0
   \   00000004   E04A               LDI     R20, 10
   \   00000006   E050               LDI     R21, 0
   \   00000008   ....               RCALL   ?S_EC_MUL_L02
   \   0000000A   01A8               MOVW    R21:R20, R17:R16
   \   0000000C   018D               MOVW    R17:R16, R27:R26
   \   0000000E   0F04               ADD     R16, R20
   \   00000010   1F15               ADC     R17, R21
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   9508               RET
    264          
    265          
    266          /*--------------------------------------------------------------------------------------
    267          
    268            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    269          unsigned char save_an_inputs(unsigned char node)
   \                     save_an_inputs:
    270          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
    271            unsigned char i,j,k, bitcnt;
    272          
    273            bitcnt = 0;
   \   00000002   E020               LDI     R18, 0
    274            k      = 0;
   \   00000004   E030               LDI     R19, 0
    275          
    276            // Очистим предварительно
    277            for (i=0;i<MAX_AN_IN;i++) nodes_an_inputs[node][i]=0;
   \   00000006   E060               LDI     R22, 0
   \   00000008   E076               LDI     R23, 6
   \   0000000A   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_28:
   \   0000000C   ....               LDI     R24, LOW(nodes_an_inputs)
   \   0000000E   ....               LDI     R25, (nodes_an_inputs) >> 8
   \   00000010   0F80               ADD     R24, R16
   \   00000012   1F91               ADC     R25, R17
   \   00000014   E002               LDI     R16, 2
   \                     ??save_an_inputs_0:
   \   00000016   9F60               MUL     R22, R16
   \   00000018   01FC               MOVW    R31:R30, R25:R24
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8320               ST      Z, R18
   \   00000020   8321               STD     Z+1, R18
   \   00000022   9563               INC     R22
   \   00000024   957A               DEC     R23
   \   00000026   F7B9               BRNE    ??save_an_inputs_0
    278          
    279            // Распакуем результат
    280            for (i=1;i<9;i++)     // Проходим все байты пакета с результатами АЦП
   \   00000028   E061               LDI     R22, 1
   \   0000002A   E058               LDI     R21, 8
    281            {
    282              for (j=0;j<8;j++)   // Проходим все биты в байте
   \                     ??save_an_inputs_1:
   \   0000002C   E048               LDI     R20, 8
   \   0000002E   E070               LDI     R23, 0
   \   00000030   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_6:
   \   00000032   0FE6               ADD     R30, R22
   \   00000034   1FF7               ADC     R31, R23
    283              {
    284                if (bitcnt == 10) // В результате 10 бит
   \                     ??save_an_inputs_2:
   \   00000036   302A               CPI     R18, 10
   \   00000038   F429               BRNE    ??save_an_inputs_3
    285                {
    286                  k++;  // Перейдем к следующему результату
   \   0000003A   9533               INC     R19
    287                  if (k==MAX_AN_IN) return 1;
   \   0000003C   3036               CPI     R19, 6
   \   0000003E   F0C9               BREQ    ??save_an_inputs_4
    288                  bitcnt=0;
   \   00000040   E021               LDI     R18, 1
   \   00000042   C007               RJMP    ??save_an_inputs_5
    289                }
    290                else
    291                {
    292                  nodes_an_inputs[node][k] <<=1;
   \                     ??save_an_inputs_3:
   \   00000044   ....               RCALL   ?Subroutine1
    293                }
   \                     ??CrossCallReturnLabel_2:
   \   00000046   9711               SBIW    R27:R26, 1
   \   00000048   0F00               LSL     R16
   \   0000004A   1F11               ROL     R17
   \   0000004C   930D               ST      X+, R16
   \   0000004E   931C               ST      X, R17
   \   00000050   9523               INC     R18
    294                if ((rf_packet[i] & 0x80)!=0)  nodes_an_inputs[node][k]++;
   \                     ??save_an_inputs_5:
   \   00000052   8100               LD      R16, Z
   \   00000054   FF07               SBRS    R16, 7
   \   00000056   C005               RJMP    ??save_an_inputs_6
   \   00000058   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   0000005A   5F0F               SUBI    R16, 255
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   931C               ST      X, R17
   \   00000060   930E               ST      -X, R16
    295                rf_packet[i] <<=1;
   \                     ??save_an_inputs_6:
   \   00000062   8100               LD      R16, Z
   \   00000064   0F00               LSL     R16
   \   00000066   8300               ST      Z, R16
    296          
    297                bitcnt++;
    298          
    299              }
   \   00000068   954A               DEC     R20
   \   0000006A   F729               BRNE    ??save_an_inputs_2
    300            }
   \   0000006C   9563               INC     R22
   \   0000006E   955A               DEC     R21
   \   00000070   F6E9               BRNE    ??save_an_inputs_1
    301            return 1;
   \                     ??save_an_inputs_4:
   \   00000072                      REQUIRE ?Subroutine14
   \   00000072                      ;               // Fall through to label ?Subroutine14
    302          
    303          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E04C               LDI     R20, 12
   \   00000004                      REQUIRE ??Subroutine17_0
   \   00000004                      ;               // Fall through to label ??Subroutine17_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9F30               MUL     R19, R16
   \   00000004   01DC               MOVW    R27:R26, R25:R24
   \   00000006   0DA0               ADD     R26, R0
   \   00000008   1DB1               ADC     R27, R1
   \   0000000A   910D               LD      R16, X+
   \   0000000C   911C               LD      R17, X
   \   0000000E   9508               RET
    304          
    305          
    306          /*--------------------------------------------------------------------------------------
    307             Выставить состояние внешних выходов в соответствии с нажатыми кнопками
    308            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    309          void read_buttons(unsigned char node)
   \                     read_buttons:
    310          {
    311            if (rf_packet[1]!=0) PORTB ^= P_OUT1;
   \   00000000   9100....           LDS     R16, (rf_packet + 1)
   \   00000004   2300               TST     R16
   \   00000006   F021               BREQ    ??read_buttons_0
   \   00000008   B318               IN      R17, 0x18
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   2710               EOR     R17, R16
   \   0000000E   BB18               OUT     0x18, R17
    312            if (rf_packet[2]!=0) PORTB ^= P_OUT2;
   \                     ??read_buttons_0:
   \   00000010   9100....           LDS     R16, (rf_packet + 2)
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??read_buttons_1
   \   00000018   B318               IN      R17, 0x18
   \   0000001A   E002               LDI     R16, 2
   \   0000001C   2710               EOR     R17, R16
   \   0000001E   BB18               OUT     0x18, R17
    313          }
   \                     ??read_buttons_1:
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_PORTB
    314          
    315          /*--------------------------------------------------------------------------------------
    316             Получить номер узла приславшего пакет
    317            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    318          unsigned char get_node_num(void)
   \                     get_node_num:
    319          {
    320            return rf_packet[0] & 0x07;
   \   00000000   9100....           LDS     R16, rf_packet
   \   00000004   7007               ANDI    R16, 0x07
   \   00000006   9508               RET
    321          }
    322          
    323          
    324          /*--------------------------------------------------------------------------------------
    325             Выдать информацию о замерах температуры для заданного узла в последовательный порт
    326            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    327          void temperature_to_com(unsigned char node)
   \                     temperature_to_com:
    328          {
   \   00000000   ....               RCALL   ?PROLOGUE9_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002   2E80               MOV     R8, R16
    329            unsigned char i,j;
    330            float tmp;
    331          
    332            crlf();
   \   00000004   ....               RCALL   ?Subroutine9
    333            USART_sendstr("Node ");
    334            USART_Transmit(hex_to_ascii(node>>4));
   \                     ??CrossCallReturnLabel_19:
   \   00000006   2D08               MOV     R16, R8
   \   00000008   ....               RCALL   ?Subroutine12
    335            USART_Transmit(hex_to_ascii(node));
   \                     ??CrossCallReturnLabel_36:
   \   0000000A   2D08               MOV     R16, R8
   \   0000000C   ....               RCALL   ?Subroutine10
    336            crlf();
    337            for (i=0;i<MAX_DEVICES;i++)
   \                     ??CrossCallReturnLabel_22:
   \   0000000E   2466               CLR     R6
   \   00000010   E004               LDI     R16, 4
   \   00000012   2E70               MOV     R7, R16
    338            {
    339               for (j=0;j<6;j++)
   \                     ??temperature_to_com_0:
   \   00000014   2444               CLR     R4
   \   00000016   E006               LDI     R16, 6
   \   00000018   2E50               MOV     R5, R16
   \   0000001A   2D08               MOV     R16, R8
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E248               LDI     R20, 40
   \   00000020   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_27:
   \   00000022   ....               LDI     R24, LOW(nodes_temperatures)
   \   00000024   ....               LDI     R25, (nodes_temperatures) >> 8
   \   00000026   0F80               ADD     R24, R16
   \   00000028   1F91               ADC     R25, R17
   \   0000002A   2D06               MOV     R16, R6
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E04A               LDI     R20, 10
   \   00000030   ....               RCALL   ?S_EC_MUL_L02
   \   00000032   0F80               ADD     R24, R16
   \   00000034   1F91               ADC     R25, R17
    340               {
    341                 USART_Transmit(hex_to_ascii(nodes_temperatures[node][i].id[j]>>4));
   \                     ??temperature_to_com_1:
   \   00000036   E010               LDI     R17, 0
   \   00000038   01DC               MOVW    R27:R26, R25:R24
   \   0000003A   0DA4               ADD     R26, R4
   \   0000003C   ....               RCALL   ?Subroutine5
    342                 USART_Transmit(hex_to_ascii(nodes_temperatures[node][i].id[j]));
    343               }
   \                     ??CrossCallReturnLabel_10:
   \   0000003E   9443               INC     R4
   \   00000040   945A               DEC     R5
   \   00000042   F7C9               BRNE    ??temperature_to_com_1
    344               USART_Transmit('=');
   \   00000044   E30D               LDI     R16, 61
   \   00000046   ....               RCALL   USART_Transmit
    345               tmp = ((float)nodes_temperatures[node][i].temperature)/2;
    346               float_conversion(tmp,3,(unsigned char*)strbuf,'E',1,1);
   \   00000048   E001               LDI     R16, 1
   \   0000004A   930A               ST      -Y, R16
   \   0000004C   930A               ST      -Y, R16
   \   0000004E   E405               LDI     R16, 69
   \   00000050   930A               ST      -Y, R16
   \   00000052   E050               LDI     R21, 0
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   8500               LDD     R16, Z+8
   \   00000058   8511               LDD     R17, Z+9
   \   0000005A   E020               LDI     R18, 0
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   ....               RCALL   ?UL2F_L04
   \   00000060   E040               LDI     R20, 0
   \   00000062   E060               LDI     R22, 0
   \   00000064   E37F               LDI     R23, 63
   \   00000066   ....               RCALL   ?F_MUL_L04
   \   00000068   ....               LDI     R22, LOW(strbuf)
   \   0000006A   ....               LDI     R23, (strbuf) >> 8
   \   0000006C   E043               LDI     R20, 3
   \   0000006E   E050               LDI     R21, 0
   \   00000070   ....               RCALL   float_conversion
    347               USART_sendstr(strbuf);
   \   00000072   ....               LDI     R16, LOW(strbuf)
   \   00000074   ....               LDI     R17, (strbuf) >> 8
   \   00000076   ....               RCALL   USART_sendstr
    348               crlf();
   \   00000078   ....               RCALL   crlf
    349            }
   \   0000007A   9463               INC     R6
   \   0000007C   947A               DEC     R7
   \   0000007E   F651               BRNE    ??temperature_to_com_0
    350          }
   \   00000080   E0E9               LDI     R30, 9
   \   00000082   ....               RJMP    ?EPILOGUE_B9_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ??Subroutine18_0
   \                     ??CrossCallReturnLabel_30:
   \   00000002   ....               RJMP    crlf

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   ....               RCALL   crlf
   \   00000002   ....               LDI     R16, LOW(`?<Constant "Node ">`)
   \   00000004   ....               LDI     R17, (`?<Constant "Node ">`) >> 8
   \   00000006   ....               RJMP    USART_sendstr

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   9502               SWAP    R16
   \   00000002   700F               ANDI    R16, 0x0F
   \   00000004                      REQUIRE ??Subroutine18_0
   \   00000004                      ;               // Fall through to label ??Subroutine18_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine18_0:
   \   00000000   ....               RCALL   hex_to_ascii
   \   00000002   ....               RJMP    USART_Transmit

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   1FB1               ADC     R27, R17
   \   00000002   910C               LD      R16, X
   \   00000004   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_34:
   \   00000006   910C               LD      R16, X
   \   00000008   ....               RJMP    ??Subroutine18_0
    351          
    352          /*--------------------------------------------------------------------------------------
    353             Выдать информацию о аналоговых входах для заданного узла в последовательный порт
    354            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    355          void analog_in_to_com(unsigned char node)
   \                     analog_in_to_com:
    356          {
   \   00000000   ....               RCALL   ?PROLOGUE5_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002   2E40               MOV     R4, R16
    357            unsigned char i;
    358          
    359            crlf();
   \   00000004   ....               RCALL   ?Subroutine9
    360            USART_sendstr("Node ");
    361            USART_Transmit(hex_to_ascii(node>>4));
   \                     ??CrossCallReturnLabel_18:
   \   00000006   2D04               MOV     R16, R4
   \   00000008   ....               RCALL   ?Subroutine12
    362            USART_Transmit(hex_to_ascii(node));
   \                     ??CrossCallReturnLabel_37:
   \   0000000A   2D04               MOV     R16, R4
   \   0000000C   ....               RCALL   ?Subroutine10
    363            crlf();
    364            for (i=0;i<MAX_AN_IN;i++)
   \                     ??CrossCallReturnLabel_21:
   \   0000000E   E080               LDI     R24, 0
   \   00000010   E096               LDI     R25, 6
    365            {
    366               USART_Transmit(hex_to_ascii(i>>4));
   \                     ??analog_in_to_com_0:
   \   00000012   ....               RCALL   ?Subroutine7
    367               USART_Transmit(hex_to_ascii(i));
    368               USART_Transmit('=');
   \                     ??CrossCallReturnLabel_15:
   \   00000014   E30D               LDI     R16, 61
   \   00000016   ....               RCALL   USART_Transmit
    369               USART_Transmit(hex_to_ascii(nodes_an_inputs[node][i]>>12));
   \   00000018   2D04               MOV     R16, R4
   \   0000001A   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_29:
   \   0000001C   ....               LDI     R26, LOW(nodes_an_inputs)
   \   0000001E   ....               LDI     R27, (nodes_an_inputs) >> 8
   \   00000020   0FA0               ADD     R26, R16
   \   00000022   1FB1               ADC     R27, R17
   \   00000024   E002               LDI     R16, 2
   \   00000026   9F80               MUL     R24, R16
   \   00000028   0DA0               ADD     R26, R0
   \   0000002A   1DB1               ADC     R27, R1
   \   0000002C   9611               ADIW    R27:R26, 1
   \   0000002E   910C               LD      R16, X
   \   00000030   9506               LSR     R16
   \   00000032   9506               LSR     R16
   \   00000034   9506               LSR     R16
   \   00000036   9506               LSR     R16
   \   00000038   ....               RCALL   ??Subroutine18_0
    370               USART_Transmit(hex_to_ascii(nodes_an_inputs[node][i]>>8));
   \                     ??CrossCallReturnLabel_31:
   \   0000003A   910C               LD      R16, X
   \   0000003C   9711               SBIW    R27:R26, 1
   \   0000003E   ....               RCALL   ??Subroutine18_0
    371               USART_Transmit(hex_to_ascii(nodes_an_inputs[node][i]>>4));
   \                     ??CrossCallReturnLabel_32:
   \   00000040   E044               LDI     R20, 4
   \   00000042   910D               LD      R16, X+
   \   00000044   911C               LD      R17, X
   \   00000046   9711               SBIW    R27:R26, 1
   \   00000048   ....               RCALL   ?US_SHR_L02
   \   0000004A   ....               RCALL   ??Subroutine18_0
    372               USART_Transmit(hex_to_ascii(nodes_an_inputs[node][i]));
   \                     ??CrossCallReturnLabel_33:
   \   0000004C   910D               LD      R16, X+
   \   0000004E   ....               RCALL   ?Subroutine10
    373               crlf();
    374            }
   \                     ??CrossCallReturnLabel_20:
   \   00000050   9583               INC     R24
   \   00000052   959A               DEC     R25
   \   00000054   F6F1               BRNE    ??analog_in_to_com_0
    375          
    376          
    377          }
   \   00000056   E0E5               LDI     R30, 5
   \   00000058   ....               RJMP    ?EPILOGUE_B5_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   2F08               MOV     R16, R24
   \   00000002   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_35:
   \   00000004   2F08               MOV     R16, R24
   \   00000006   ....               RJMP    ??Subroutine18_0
    378          
    379          /*--------------------------------------------------------------------------------------
    380             Выдать информацию о пакете с информацией о нажатых кнопках
    381            --------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    382          void buttons_in_to_com(unsigned char node)
   \                     buttons_in_to_com:
    383          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   2F80               MOV     R24, R16
    384            unsigned char i;
    385          
    386            crlf();
   \   00000004   ....               RCALL   ?Subroutine9
    387            USART_sendstr("Node ");
    388            USART_Transmit(hex_to_ascii(node>>4));
   \                     ??CrossCallReturnLabel_17:
   \   00000006   ....               RCALL   ?Subroutine7
    389            USART_Transmit(hex_to_ascii(node));
    390            crlf();
   \                     ??CrossCallReturnLabel_16:
   \   00000008   ....               RCALL   crlf
    391            for (i=1;i<9;i++)
   \   0000000A   E081               LDI     R24, 1
   \   0000000C   E098               LDI     R25, 8
    392            {
    393               USART_Transmit(hex_to_ascii(rf_packet[i]>>4));
   \                     ??buttons_in_to_com_0:
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ....               LDI     R26, LOW(rf_packet)
   \   00000012   ....               LDI     R27, (rf_packet) >> 8
   \   00000014   0FA8               ADD     R26, R24
   \   00000016   ....               RCALL   ?Subroutine5
    394               USART_Transmit(hex_to_ascii(rf_packet[i]));
    395               USART_Transmit(' ');
   \                     ??CrossCallReturnLabel_11:
   \   00000018   E200               LDI     R16, 32
   \   0000001A   ....               RCALL   USART_Transmit
    396            }
   \   0000001C   9583               INC     R24
   \   0000001E   959A               DEC     R25
   \   00000020   F7B1               BRNE    ??buttons_in_to_com_0
    397            crlf();
   \   00000022   ....               RCALL   crlf
    398          }
   \   00000024   ....               RJMP    ??Subroutine16_0
    399          
    400          

   \                                 In  segment CODE, align 2, keep-with-next
    401          void crlf(void)
   \                     crlf:
    402          {
    403            USART_Transmit('\n');
   \   00000000   E00A               LDI     R16, 10
   \   00000002   ....               RCALL   USART_Transmit
    404            USART_Transmit('\r');
   \   00000004   E00D               LDI     R16, 13
   \   00000006   ....               RJMP    USART_Transmit
    405          }
    406          
    407          

   \                                 In  segment CODE, align 2, keep-with-next
    408          void corr_val_to_lcd(void)
   \                     corr_val_to_lcd:
    409          {
    410            lcdGotoXY(0,1);
   \   00000000   E011               LDI     R17, 1
   \   00000002   E000               LDI     R16, 0
   \   00000004   ....               RCALL   lcdGotoXY
    411            lcdDataWrite(hex_to_ascii(ccor1>>4));
   \   00000006   9100....           LDS     R16, ccor1
   \   0000000A   ....               RCALL   ?Subroutine6
    412            lcdDataWrite(hex_to_ascii(ccor1));
   \                     ??CrossCallReturnLabel_12:
   \   0000000C   9100....           LDS     R16, ccor1
   \   00000010   ....               RCALL   ?Subroutine15
    413            lcdDataWrite(hex_to_ascii(ccor2>>4));
   \                     ??CrossCallReturnLabel_24:
   \   00000012   9100....           LDS     R16, ccor2
   \   00000016   ....               RCALL   ?Subroutine6
    414            lcdDataWrite(hex_to_ascii(ccor2));
   \                     ??CrossCallReturnLabel_13:
   \   00000018   9100....           LDS     R16, ccor2
   \   0000001C   ....               RCALL   ?Subroutine15
    415            lcdDataWrite(hex_to_ascii(ccor3>>4));
   \                     ??CrossCallReturnLabel_23:
   \   0000001E   9100....           LDS     R16, ccor3
   \   00000022   ....               RCALL   ?Subroutine6
    416            lcdDataWrite(hex_to_ascii(ccor3));
   \                     ??CrossCallReturnLabel_14:
   \   00000024   9100....           LDS     R16, ccor3
   \   00000028                      REQUIRE ?Subroutine15
   \   00000028                      ;               // Fall through to label ?Subroutine15
    417          
    418          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               RCALL   hex_to_ascii
   \   00000002   ....               RJMP    lcdDataWrite

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9502               SWAP    R16
   \   00000002   700F               ANDI    R16, 0x0F
   \   00000004   ....               RJMP    ?Subroutine15
    419          
    420          
    421          /*--------------------------------------------------------------------------------------
    422             Прерывания таймера 0 используються для формирования временных интервалов
    423             Период прерываний = 0.001024 мс
    424            --------------------------------------------------------------------------------------*/
    425          #pragma vector=TIMER0_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
    426          __interrupt void TIMER0_OVF_vect_interrupt( void )
   \                     TIMER0_OVF_vect_interrupt:
    427          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
    428           __watchdog_reset(); // Не забываем сбрасывать WDT
   \   0000000C   95A8               WDR
    429          
    430            if (led_timeout)
   \   0000000E   9100....           LDS     R16, (rf_packet + 20)
   \   00000012   9110....           LDS     R17, (rf_packet + 21)
   \   00000016   2B01               OR      R16, R17
   \   00000018   F039               BREQ    ??TIMER0_OVF_vect_interrupt_0
    431            {
    432              led_timeout--;
   \   0000001A   ....               RCALL   ?Subroutine4
    433            }
   \                     ??CrossCallReturnLabel_9:
   \   0000001C   8904               LDD     R16, Z+20
   \   0000001E   5001               SUBI    R16, 1
   \   00000020   4010               SBCI    R17, 0
   \   00000022   8B04               STD     Z+20, R16
   \   00000024   8B15               STD     Z+21, R17
   \   00000026   C001               RJMP    ??TIMER0_OVF_vect_interrupt_1
    434            else
    435              PORTD |= P_LED;
   \                     ??TIMER0_OVF_vect_interrupt_0:
   \   00000028   9A92               SBI     0x12, 0x02
    436          
    437          
    438            // Отработка таймаута modbus протокола
    439            if (modb_timeout)
   \                     ??TIMER0_OVF_vect_interrupt_1:
   \   0000002A   9100....           LDS     R16, modb_timeout
   \   0000002E   9110....           LDS     R17, (modb_timeout + 1)
   \   00000032   2B01               OR      R16, R17
   \   00000034   F041               BREQ    ??TIMER0_OVF_vect_interrupt_2
    440            {
    441              modb_timeout--;
   \   00000036   ....               LDI     R30, LOW(modb_timeout)
   \   00000038   ....               LDI     R31, (modb_timeout) >> 8
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   5001               SUBI    R16, 1
   \   00000040   4010               SBCI    R17, 0
   \   00000042   8300               ST      Z, R16
   \   00000044   8311               STD     Z+1, R17
    442            }
    443          
    444          
    445          }
   \                     ??TIMER0_OVF_vect_interrupt_2:
   \   00000046   BF2F               OUT     0x3F, R18
   \   00000048   9109               LD      R16, Y+
   \   0000004A   9119               LD      R17, Y+
   \   0000004C   9129               LD      R18, Y+
   \   0000004E   91E9               LD      R30, Y+
   \   00000050   91F9               LD      R31, Y+
   \   00000052   9518               RETI
   \   00000054                      REQUIRE _A_PORTD

   \                                 In  segment INTVEC, offset 0x12, root
   \                     `??TIMER0_OVF_vect_interrupt::??INTVEC 18`:
   \   00000012   ....               RJMP    TIMER0_OVF_vect_interrupt

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Node ">>`:
   \   00000000   6F4E65640020       DC8 "Node "

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "Node ">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "Node ">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      5      2   TIMER0_OVF_vect_interrupt
      5      2   analog_in_to_com
        5      2   -> USART_Transmit
        5      4   -> USART_Transmit
        5      2   -> USART_sendstr
        5      2   -> crlf
        5      4   -> crlf
        5      4   -> hex_to_ascii
        5      6   -> hex_to_ascii
        5      2 ?S_EC_MUL_L02
        5      2 ?US_SHR_L02
      4      2   buttons_in_to_com
        4      2   -> USART_Transmit
        4      4   -> USART_Transmit
        4      2   -> USART_sendstr
        4      2   -> crlf
        4      4   -> crlf
        4      4   -> hex_to_ascii
        4      6   -> hex_to_ascii
      2      2   check_packet_crc
        2      2   -> GetBlockCRC
      0      2   corr_val_to_lcd
        0      2   -> hex_to_ascii
        0      4   -> hex_to_ascii
        0      2   -> lcdDataWrite
        0      2   -> lcdGotoXY
      0      2   crlf
        0      2   -> USART_Transmit
      0      2   get_node_num
      1      2   main
        1      2   -> DataInReceiveBuffer
        1      2   -> RF_receiver_init
        1      2   -> Restore_default_settings
        1      2   -> Restore_settings_from_eeprom
        1      2   -> TIMER0_init
        1      2   -> USART_Init
        1      2   -> USART_Receive
        1      2   -> USART_Transmit
        1      2   -> check_packet_crc
        1      2   -> corr_val_to_lcd
        1      2   -> crlf
        1      2   -> lcdDataWrite
        1      2   -> lcdGotoXY
        1      2   -> lcdInit
        1      2   -> lcdPrintData_P
        1      2   -> modbus_task
        1      2   -> rc4_crypt
        1      2   -> rc4_setup
        1      2   -> read_buttons
        1      2   -> save_an_inputs
        1      2   -> save_temperature
        1      2   -> terminal
      0      2   read_buttons
      4      2   save_an_inputs
        4      2 ?S_EC_MUL_L02
      4      2   save_temperature
        4      2 ?S_EC_MUL_L02
        4      4 ?S_EC_MUL_L02
     12      2   temperature_to_com
        9      2   -> USART_Transmit
        9      4   -> USART_Transmit
        9      2   -> USART_sendstr
        9      2   -> crlf
        9      4   -> crlf
        9      2   -> float_conversion
        9      4   -> hex_to_ascii
        9      6   -> hex_to_ascii
       12      2 ?F_MUL_L04
        9      2 ?S_EC_MUL_L02
       12      2 ?UL2F_L04


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "Node ">
       6  ?<Initializer for <Constant "Node ">>
       4  ??Subroutine16_0
       4  ??Subroutine17_0
       4  ??Subroutine18_0
      22  ?Subroutine0
      16  ?Subroutine1
       4  ?Subroutine10
       4  ?Subroutine12
       2  ?Subroutine14
       4  ?Subroutine15
       4  ?Subroutine2
      10  ?Subroutine3
       6  ?Subroutine4
      10  ?Subroutine5
       6  ?Subroutine6
       8  ?Subroutine7
       8  ?Subroutine9
       5  TEST
      84  TIMER0_OVF_vect_interrupt
       2  TIMER0_OVF_vect_interrupt::??INTVEC 18
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
      90  analog_in_to_com
      38  buttons_in_to_com
      40  check_packet_crc
      40  corr_val_to_lcd
       8  crlf
       8  get_node_num
     244  main
      48  nodes_an_inputs
       4  nodes_btns
     160  nodes_temperatures
      34  read_buttons
      23  rf_packet
          led_timeout
          flags
     114  save_an_inputs
     136  save_temperature
       2  temperature
     132  temperature_to_com
      12  -- Other

 
     6 bytes in segment ABSOLUTE
 1 084 bytes in segment CODE
    12 bytes in segment INITTAB
     2 bytes in segment INTVEC
     5 bytes in segment NEAR_F
     6 bytes in segment NEAR_I
     6 bytes in segment NEAR_ID
   237 bytes in segment NEAR_Z
 
 1 095 bytes of CODE memory (+ 14 bytes shared)
   243 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none

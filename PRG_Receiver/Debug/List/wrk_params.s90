///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR      26/Oct/2021  16:53:18
// Copyright 1996-2021 IAR Systems AB.
//
//    Source file  =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\wrk_params.c
//    Command line =  
//        -f C:\Users\aly\AppData\Local\Temp\EW6868.tmp
//        (D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\wrk_params.c
//        --cpu=m8 -ms -o
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\Obj
//        -lCN
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
//        -lB
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List
//        --initializers_in_flash --debug -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 512 --clib -Ohz)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\Debug\List\wrk_params.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME wrk_params

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?CV_SWITCH_L06
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B5_L09
        EXTERN ?EPILOGUE_B8_L09
        EXTERN ?F2SL_L04
        EXTERN ?F2UL_L04
        EXTERN ?F_CMP_LT_L04
        EXTERN ?ML_EEPROM_SRAM_16_16_L07
        EXTERN ?ML_SRAM_EEPROM_16_16_L07
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE5_L09
        EXTERN ?PROLOGUE8_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?SS_SHR_L02
        EXTERN ?S_EC_MUL_L02
        EXTERN ?UL_SHR_L03
        EXTERN ?US_SHR_L02
        EXTERN ?need_segment_init
        EXTERN __eeget16_16
        EXTERN __eeput16_16

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBLIC Param_to_str
        PUBLIC Restore_default_settings
        PUBLIC Restore_settings_from_eeprom
        PUBLIC Save_Params_To_EEPROM
        PUBLIC Str_to_param
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC dwvar
        PUBLIC ee_crc
        PUBLIC ee_wp
        PUBLIC get_params_name
        PUBLIC get_params_num
        PUBLIC wp

        EXTERN GetBlockCRC
        EXTERN atof
        EXTERN hex_to_ascii
        EXTERN strtol

// D:\Embedded\Projects\OpenSource\Radio_network_433Mhz\PRG_Receiver\wrk_params.c
//    1 #include <iom8.h>
//    2 #include <ina90.h>
//    3 #include <string.h>
//    4 #include <pgmspace.h>
//    5 #include <stdio.h>
//    6 #include <stdlib.h>
//    7 #include "main.h"
//    8 #include "Util.h"
//    9 #include "..\PRG_Transmitter\RF_settings.h"
//   10 #include "wrk_params.h"
//   11 
//   12 /*
//   13   Объявления рабочих параметров
//   14 */
//   15 

        RSEG EEPROM_N:XDATA:NOROOT(0)
//   16 __no_init __eeprom TPARAMS ee_wp;       // Рабочие параметры в EEPROM
//   17 __no_init __eeprom unsigned int ee_crc; // Контрольная сумма в EEPROM
ee_crc:
        DS8 2
ee_wp:
        DS8 13
//   18 

        RSEG NEAR_N:DATA:NOROOT(0)
//   19 __no_init TPARAMS wp;                   // Рабочие параметры в RAM
wp:
        DS8 13
//   20 
//   21 
//   22 

        RSEG NEAR_F:CODE:NOROOT(0)
        DATA
//   23 __flash DWAR_TYPE dwvar[]=
dwvar:
        DC16 `?<Constant "SFLAGS">`, ee_wp + 4H, wp + 4H
        DC8 2
        DD 0H, 0H, 477FFF00H
        DC8 0, 0
        DC16 0H
        DC8 2
        DC16 `?<Constant "PREAMB">`, ee_wp + 6H, wp + 6H
        DC8 2
        DD 4759C200H, 0H, 477FFF00H
        DC8 0, 0
        DC16 0H
        DC8 2
        DC16 `?<Constant "BTRATE">`, ee_wp + 2H, wp + 2H
        DC8 2
        DD 467A0000H, 457A0000H, 477FFF00H
        DC8 0, 0
        DC16 0H
        DC8 2
        DC16 `?<Constant "KEYCOD">`, ee_wp + 8H, wp + 8H
        DC8 4
        DD 4479C000H, 0H, 477FFF00H
        DC8 0, 0
        DC16 0H
        DC8 4
        DC16 `?<Constant "DEVADR">`, ee_wp + 0CH, wp + 0CH
        DC8 0
        DD 3F800000H, 0H, 437F0000H
        DC8 0, 0
        DC16 0H
        DC8 1
//   24 {
//   25   {                     
//   26     "SFLAGS",               // Строковое описание
//   27     &ee_wp.flags,           // Указатель на значение переменной в EEPROM
//   28     &wp.flags,              // Указатель на значение переменной в RAM
//   29     tunsigned_int,          // Идентификатор типа переменной
//   30     0,                      // Значение по умолчанию
//   31     0,                      // Минимальное возможное значение
//   32     65535,                  // Максимальное возможное значение
//   33     0,                      // Количество знаков после запятой
//   34     0,                      // Аттрибуты переменной
//   35     0,                      // Указатель на функцию выполняемую после редактирования
//   36     sizeof(unsigned int)    // Длинна переменной
//   37   },                    
//   38   {                     
//   39     "PREAMB",           
//   40     &ee_wp.preamble,    
//   41     &wp.preamble,       
//   42     tunsigned_int,      
//   43     PREAMBLE,           
//   44     0,                  
//   45     65535,              
//   46     0,                  
//   47     0,                  
//   48     0,                  
//   49     sizeof(unsigned int)
//   50   },                    
//   51   {
//   52     "BTRATE",
//   53     &ee_wp.rf_bitrate,
//   54     &wp.rf_bitrate,
//   55     tunsigned_int,
//   56     16000,
//   57     4000,
//   58     65535,
//   59     0,
//   60     0,
//   61     0,
//   62     sizeof(unsigned int)
//   63   },
//   64   {
//   65     "KEYCOD",
//   66     &ee_wp.keycode,
//   67     &wp.keycode,
//   68     tunsigned_long,
//   69     999,
//   70     0,
//   71     65535,
//   72     0,
//   73     0,
//   74     0,
//   75     sizeof(unsigned long)
//   76   },
//   77   {
//   78     "DEVADR",
//   79     &ee_wp.devaddr,
//   80     &wp.devaddr,
//   81     tunsigned_char,
//   82     1,
//   83     0,
//   84     255,
//   85     0,
//   86     0,
//   87     0,
//   88     sizeof(unsigned char)
//   89   },
//   90   
//   91 };
//   92 

        RSEG `CODE`:CODE:NOROOT(1)
//   93 int get_params_num(void)
get_params_num:
        CODE
//   94 {
//   95   return  (sizeof(dwvar)/sizeof(dwvar[0]));
        LDI     R16, 5
        LDI     R17, 0
        RET
//   96 }
//   97 

        RSEG `CODE`:CODE:NOROOT(1)
//   98 char* get_params_name(unsigned char indx)
get_params_name:
        CODE
//   99 {
//  100   return  dwvar[indx].name;
        LDI     R17, 0
        RCALL   ?Subroutine29
??CrossCallReturnLabel_55:
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(dwvar) & 0xFFFF))
        SBCI    R31, (-(dwvar) & 0xFFFF) >> 8
        LPM     R16, Z+
        LPM     R17, Z
        RET
//  101 }
//  102 
//  103 
//  104 /* ==========================================================
//  105    Преобразовать параметр в строку
//  106    ========================================================== */

        RSEG `CODE`:CODE:NOROOT(1)
//  107 void Param_to_str(unsigned char *buf,int indx)
Param_to_str:
        CODE
//  108 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R27:R26, R17:R16
//  109   switch (dwvar[indx].vartype)
        MOVW    R17:R16, R19:R18
        RCALL   ?Subroutine6
??CrossCallReturnLabel_12:
        TST     R16
        BREQ    ??Param_to_str_0
        DEC     R16
        BREQ    ??Param_to_str_0
        DEC     R16
        BREQ    ??Param_to_str_1
        DEC     R16
        BREQ    ??Param_to_str_1
        DEC     R16
        BREQ    ??Param_to_str_2
        DEC     R16
        BREQ    ??Param_to_str_2
        RJMP    ??Param_to_str_3
//  110   {
//  111   case tunsigned_char:
//  112   case tsigned_char:
//  113     *buf++='0';
??Param_to_str_0:
        RCALL   ?Subroutine18
//  114     *buf++='x';
??CrossCallReturnLabel_30:
        RCALL   ?Subroutine14
//  115     *buf++=hex_to_ascii(*(char*)dwvar[indx].val>>4);
??CrossCallReturnLabel_24:
        SWAP    R16
        ANDI    R16, 0x0F
        RJMP    ??Param_to_str_4
//  116     *buf++=hex_to_ascii(*(char*)dwvar[indx].val);
//  117     *buf++=0;
//  118 //    sprintf((char*)buf,"%d",*((unsigned char*)dwvar[indx].val));
//  119     break;
//  120 //    sprintf((char*)buf,"%d",*((signed char*)dwvar[indx].val));
//  121 //    break;
//  122   case tunsigned_int:
//  123   case tsigned_int:
//  124 //    sprintf((char*)buf,"%d",*((unsigned int*)dwvar[indx].val));
//  125     *buf++='0';
??Param_to_str_1:
        RCALL   ?Subroutine18
//  126     *buf++='x';
??CrossCallReturnLabel_31:
        RCALL   ?Subroutine17
//  127     *buf++=hex_to_ascii(*(int*)dwvar[indx].val>>12);
??CrossCallReturnLabel_66:
        LDD     R16, Z+1
        ASR     R16
        ASR     R16
        ASR     R16
        ASR     R16
        RCALL   ?Subroutine1
//  128     *buf++=hex_to_ascii(*(int*)dwvar[indx].val>>8);
//  129     *buf++=hex_to_ascii(*(int*)dwvar[indx].val>>4);
??CrossCallReturnLabel_2:
        RCALL   ?SS_SHR_L02
        RJMP    ??Param_to_str_4
//  130     *buf++=hex_to_ascii(*(int*)dwvar[indx].val);
//  131     *buf++=0;
//  132 
//  133     break;
//  134   case tunsigned_long:
//  135   case tsigned_long:
//  136     *buf++='0';
??Param_to_str_2:
        RCALL   ?Subroutine18
//  137     *buf++='x';
??CrossCallReturnLabel_32:
        RCALL   ?Subroutine15
//  138     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>28);
??CrossCallReturnLabel_26:
        LSR     R16
        LSR     R16
        LSR     R16
        LSR     R16
        RCALL   hex_to_ascii
        RCALL   ?Subroutine15
//  139     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>24);
??CrossCallReturnLabel_27:
        RCALL   ?Subroutine7
//  140     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>20);
??CrossCallReturnLabel_14:
        LDI     R20, 20
        RCALL   ?UL_SHR_L03
        RCALL   hex_to_ascii
        RCALL   ?Subroutine17
//  141     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>16);
??CrossCallReturnLabel_65:
        LDD     R16, Z+2
        RCALL   ?Subroutine7
//  142     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>12);
??CrossCallReturnLabel_15:
        LDI     R20, 12
        RCALL   ?UL_SHR_L03
        RCALL   ?Subroutine1
//  143     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>8);
//  144     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val>>4);
??CrossCallReturnLabel_3:
        RCALL   ?US_SHR_L02
??Param_to_str_4:
        RCALL   hex_to_ascii
        RCALL   ?Subroutine14
//  145     *buf++=hex_to_ascii(*(unsigned long*)dwvar[indx].val);
??CrossCallReturnLabel_25:
        RCALL   hex_to_ascii
        ST      X+, R16
//  146     *buf++=0;
        LDI     R16, 0
        ST      X+, R16
//  147     break;
//  148   case tfloat:
//  149 //    sprintf((char*)buf,"%f",*((float*)dwvar[indx].val));
//  150     break;
//  151   case tdouble:
//  152 //    sprintf((char*)buf,"%f",*((double*)dwvar[indx].val));
//  153     break;
//  154   case tstring:
//  155 //    sprintf((char*)buf,"%s",(char*)(dwvar[indx].val));
//  156     break;
//  157   }
//  158 }
??Param_to_str_3:
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine18:
        LDI     R16, 48
        ST      X+, R16
        LDI     R16, 120
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine17:
        ST      X+, R16
        MOVW    R31:R30, R25:R24
        REQUIRE ??Subroutine34_0
        ;               // Fall through to label ??Subroutine34_0

        RSEG `CODE`:CODE:NOROOT(1)
??Subroutine34_0:
        ADIW    R31:R30, 4
        RJMP    ??Subroutine35_0

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine15:
        RCALL   ?Subroutine24
??CrossCallReturnLabel_43:
        LDD     R16, Z+3
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine24:
        ST      X+, R16
        REQUIRE ?Subroutine31
        ;               // Fall through to label ?Subroutine31

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine31:
        MOVW    R31:R30, R25:R24
        ADIW    R31:R30, 4
        REQUIRE ??Subroutine35_0
        ;               // Fall through to label ??Subroutine35_0

        RSEG `CODE`:CODE:NOROOT(1)
??Subroutine35_0:
        LPM     R16, Z+
        LPM     R31, Z
        MOV     R30, R16
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine14:
        RCALL   ?Subroutine24
??CrossCallReturnLabel_42:
        LD      R16, Z
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine7:
        RCALL   ?Subroutine23
??CrossCallReturnLabel_39:
        LDD     R18, Z+2
        LDD     R19, Z+3
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine1:
        RCALL   hex_to_ascii
        RCALL   ?Subroutine24
??CrossCallReturnLabel_41:
        LDD     R16, Z+1
        RCALL   ?Subroutine23
??CrossCallReturnLabel_40:
        LDI     R20, 4
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine23:
        RCALL   hex_to_ascii
        ST      X+, R16
        RCALL   ?Subroutine31
??CrossCallReturnLabel_72:
        LD      R16, Z
        LDD     R17, Z+1
        RET
//  159 
//  160 /* ==========================================================
//  161    Преобразовать строку в параметр
//  162    ========================================================== */

        RSEG `CODE`:CODE:NOROOT(1)
//  163 void Str_to_param(unsigned char *buf,int indx)
Str_to_param:
        CODE
//  164 {
        RCALL   ?PROLOGUE8_L09
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R25:R24, R17:R16
//  165   unsigned char uch_tmp;
//  166   signed char sch_tmp;
//  167   unsigned int uin_tmp;
//  168   signed int sin_tmp;
//  169   unsigned long ulg_tmp;
//  170   signed long slg_tmp;
//  171   float f_tmp;
//  172   double d_tmp;
//  173   switch (dwvar[indx].vartype)
        MOVW    R17:R16, R19:R18
        RCALL   ?Subroutine29
??CrossCallReturnLabel_56:
        LDI     R26, LOW(dwvar)
        LDI     R27, (dwvar) >> 8
        ADD     R26, R16
        ADC     R27, R17
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 6
        LPM     R16, Z
        LDI     R30, LOW(`?<Jumptable for Str_to_param>_0`)
        LDI     R31, (`?<Jumptable for Str_to_param>_0`) >> 8
        RJMP    ?CV_SWITCH_L06
//  174   {
//  175   case tunsigned_char:
//  176     uch_tmp=strtol((char*)buf,0,0);
??Str_to_param_0:
        RCALL   ?Subroutine3
??CrossCallReturnLabel_6:
        BRCC    ??Str_to_param_1
//  177     if (uch_tmp>((unsigned char)dwvar[indx].max)) uch_tmp=(unsigned char)dwvar[indx].max;
        MOV     R21, R16
??Str_to_param_1:
        RCALL   ?Subroutine11
??CrossCallReturnLabel_20:
        BRCC    ??Str_to_param_2
//  178     if (uch_tmp<((unsigned char)dwvar[indx].min)) uch_tmp=(unsigned char)dwvar[indx].min;
        RJMP    ??Str_to_param_3
//  179     *(unsigned char*)dwvar[indx].val=uch_tmp;
//  180     break;
//  181   case tsigned_char:
//  182     sch_tmp=strtol((char*)buf,0,0);
??Str_to_param_4:
        RCALL   ?Subroutine3
??CrossCallReturnLabel_7:
        BRGE    ??Str_to_param_5
//  183     if (sch_tmp>((signed char)dwvar[indx].max)) sch_tmp=(signed char)dwvar[indx].max;
        MOV     R21, R16
??Str_to_param_5:
        RCALL   ?Subroutine11
??CrossCallReturnLabel_21:
        BRGE    ??Str_to_param_2
//  184     if (sch_tmp<((signed char)dwvar[indx].min)) sch_tmp=(signed char)dwvar[indx].min;
??Str_to_param_3:
        MOV     R21, R16
//  185     *(signed char*)dwvar[indx].val=sch_tmp;
??Str_to_param_2:
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 4
        LPM     R26, Z+
        LPM     R27, Z
        ST      X, R21
//  186     break;
        RJMP    ??Str_to_param_6
//  187   case tunsigned_int:
//  188     uin_tmp=strtol((char*)buf,0,0);
??Str_to_param_7:
        RCALL   ?Subroutine2
??CrossCallReturnLabel_4:
        BRCC    ??Str_to_param_8
//  189     if (uin_tmp>((unsigned int)dwvar[indx].max)) uin_tmp=(unsigned int)dwvar[indx].max;
        MOVW    R23:R22, R17:R16
??Str_to_param_8:
        RCALL   ?Subroutine9
??CrossCallReturnLabel_18:
        BRCC    ??Str_to_param_9
//  190     if (uin_tmp<((unsigned int)dwvar[indx].min)) uin_tmp=(unsigned int)dwvar[indx].min;
        RJMP    ??Str_to_param_10
//  191     *(unsigned int*)dwvar[indx].val=uin_tmp;
//  192     break;
//  193   case tsigned_int:
//  194     sin_tmp=strtol((char*)buf,0,0);
??Str_to_param_11:
        RCALL   ?Subroutine2
??CrossCallReturnLabel_5:
        BRGE    ??Str_to_param_12
//  195     if (sin_tmp>((signed int)dwvar[indx].max)) sin_tmp=(signed int)dwvar[indx].max;
        MOVW    R23:R22, R17:R16
??Str_to_param_12:
        RCALL   ?Subroutine9
??CrossCallReturnLabel_19:
        BRGE    ??Str_to_param_9
//  196     if (sin_tmp<((signed int)dwvar[indx].min)) sin_tmp=(signed int)dwvar[indx].min;
??Str_to_param_10:
        MOVW    R23:R22, R17:R16
//  197     *(signed int*)dwvar[indx].val=sin_tmp;
??Str_to_param_9:
        MOVW    R31:R30, R27:R26
        RCALL   ??Subroutine34_0
??CrossCallReturnLabel_67:
        ST      Z, R22
        STD     Z+1, R23
//  198     break;
        RJMP    ??Str_to_param_6
//  199   case tunsigned_long:
//  200     ulg_tmp=strtol((char*)buf,0,0);
??Str_to_param_13:
        RCALL   ?Subroutine5
??CrossCallReturnLabel_11:
        RCALL   ?F2UL_L04
        RCALL   ?Subroutine19
??CrossCallReturnLabel_33:
        BRCC    ??CrossCallReturnLabel_51
//  201     if (ulg_tmp>((unsigned long)dwvar[indx].max)) ulg_tmp=(unsigned long)dwvar[indx].max;
        RCALL   ?Subroutine28
??CrossCallReturnLabel_51:
        RCALL   ?Subroutine33
??CrossCallReturnLabel_61:
        RCALL   ?Subroutine12
??CrossCallReturnLabel_22:
        RCALL   ?Subroutine20
??CrossCallReturnLabel_35:
        BRCC    ??CrossCallReturnLabel_53
//  202     if (ulg_tmp<((unsigned long)dwvar[indx].min)) ulg_tmp=(unsigned long)dwvar[indx].min;
        RJMP    ??Str_to_param_14
//  203     *(unsigned long*)dwvar[indx].val=ulg_tmp;
//  204     break;
//  205   case tsigned_long:
//  206     slg_tmp=strtol((char*)buf,0,0);
??Str_to_param_15:
        RCALL   ?Subroutine5
??CrossCallReturnLabel_10:
        RCALL   ?F2SL_L04
        RCALL   ?Subroutine19
??CrossCallReturnLabel_34:
        BRGE    ??CrossCallReturnLabel_52
//  207     if (slg_tmp>((signed long)dwvar[indx].max)) slg_tmp=(signed long)dwvar[indx].max;
        RCALL   ?Subroutine28
??CrossCallReturnLabel_52:
        RCALL   ?Subroutine33
??CrossCallReturnLabel_62:
        RCALL   ??Subroutine36_0
??CrossCallReturnLabel_73:
        RCALL   ?Subroutine20
??CrossCallReturnLabel_36:
        BRGE    ??CrossCallReturnLabel_53
//  208     if (slg_tmp<((signed long)dwvar[indx].min)) slg_tmp=(signed long)dwvar[indx].min;
??Str_to_param_14:
        RCALL   ?Subroutine28
//  209     *(signed long*)dwvar[indx].val=slg_tmp;
??CrossCallReturnLabel_53:
        MOVW    R31:R30, R27:R26
        RCALL   ??Subroutine34_0
??CrossCallReturnLabel_68:
        ST      Z, R4
        STD     Z+1, R5
        STD     Z+2, R6
        STD     Z+3, R7
//  210     break;
        RJMP    ??Str_to_param_6
//  211   case tfloat:
//  212     f_tmp=atof((char*)buf);
??Str_to_param_16:
        RCALL   ?Subroutine0
//  213     if (f_tmp>((float)dwvar[indx].max)) f_tmp=(float)dwvar[indx].max;
//  214     if (f_tmp<((float)dwvar[indx].min)) f_tmp=(float)dwvar[indx].min;
//  215     *(float*)dwvar[indx].val=f_tmp;
??CrossCallReturnLabel_0:
        LPM     R26, Z+
        LPM     R27, Z
        ST      X+, R0
        ST      X+, R1
        ST      X+, R2
        ST      X, R3
//  216     break;
        RJMP    ??Str_to_param_6
//  217   case tdouble:
//  218     d_tmp=atof((char*)buf);
??Str_to_param_17:
        RCALL   ?Subroutine0
//  219     if (d_tmp>((double)dwvar[indx].max)) d_tmp=(double)dwvar[indx].max;
//  220     if (d_tmp<((double)dwvar[indx].min)) d_tmp=(double)dwvar[indx].min;
//  221     *(double*)dwvar[indx].val=d_tmp;
??CrossCallReturnLabel_1:
        RCALL   ??Subroutine35_0
??CrossCallReturnLabel_69:
        ST      Z, R0
        STD     Z+1, R1
        STD     Z+2, R2
        STD     Z+3, R3
//  222     break;
//  223   }
//  224 }
??Str_to_param_6:
        LDI     R30, 8
        RJMP    ?EPILOGUE_B8_L09

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine20:
        CP      R4, R16
        CPC     R5, R17
        CPC     R6, R18
        CPC     R7, R19
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine19:
        CP      R16, R4
        CPC     R17, R5
        CPC     R18, R6
        CPC     R19, R7
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine11:
        RCALL   ?Subroutine22
??CrossCallReturnLabel_79:
        CP      R21, R16
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine29:
//  225 
//  226 // ==========================================================
//  227 //  Перезаписать в EEPROM установки по умолчанию. Если нет ошибки то возвращает 0
//  228 // ==========================================================
//  229 void Restore_default_settings(void)
//  230 {
//  231   unsigned int i;
//  232 
//  233   // Загрузить параметры значениями по умолчанию
//  234   for (i=0;i<get_params_num();i++)
//  235   {
//  236     switch (dwvar[i].vartype)
//  237     {
//  238     case tunsigned_char:
//  239       *(unsigned char*)dwvar[i].val= (unsigned char)dwvar[i].defval; break;
//  240     case tsigned_char:
//  241       *(signed char*)dwvar[i].val= (signed char)dwvar[i].defval; break;
//  242     case tunsigned_int:
//  243       *(unsigned int*)dwvar[i].val= (unsigned int)dwvar[i].defval; break;
//  244     case tsigned_int:
//  245       *(signed int*)dwvar[i].val= (signed int)dwvar[i].defval; break;
//  246     case tunsigned_long:
//  247       *(unsigned long*)dwvar[i].val= (unsigned long)dwvar[i].defval; break;
//  248     case tsigned_long:
//  249       *(signed long*)dwvar[i].val=(signed long)dwvar[i].defval; break;
//  250     case tfloat:
//  251       *(float*)dwvar[i].val=dwvar[i].defval; break;
//  252     case tdouble:
//  253       *(double*)dwvar[i].val=dwvar[i].defval; break;
//  254     }
//  255   }
//  256 
//  257   // Выполнение инициализационных функций параметров
//  258   for (i=0;i<get_params_num();i++)
        LDI     R20, 24
        LDI     R21, 0
        RJMP    ?S_EC_MUL_L02

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine9:
        RCALL   ?Subroutine22
??CrossCallReturnLabel_78:
        CP      R22, R16
        CPC     R23, R17
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine5:
        RCALL   ?Subroutine27
??CrossCallReturnLabel_50:
        RCALL   ?Subroutine28
??CrossCallReturnLabel_54:
        RJMP    ?Subroutine25

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine28:
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine25:
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 15
        REQUIRE ?Subroutine32
        ;               // Fall through to label ?Subroutine32

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine32:
        LPM     R16, Z+
        LPM     R17, Z+
        LPM     R18, Z+
        LPM     R19, Z
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine3:
        RCALL   ?Subroutine27
??CrossCallReturnLabel_49:
        MOV     R21, R16
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 15
        RCALL   ??Subroutine36_0
??CrossCallReturnLabel_76:
        CP      R16, R21
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine27:
        LDI     R20, 0
        LDI     R21, 0
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R17:R16, R25:R24
        RJMP    strtol

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine2:
        RCALL   ?Subroutine27
??CrossCallReturnLabel_48:
        MOVW    R23:R22, R17:R16
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 15
        RCALL   ??Subroutine36_0
??CrossCallReturnLabel_75:
        CP      R16, R22
        CPC     R17, R23
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine0:
        MOVW    R17:R16, R25:R24
        RCALL   atof
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        RCALL   ?Subroutine25
??CrossCallReturnLabel_81:
        MOVW    R21:R20, R1:R0
        MOVW    R23:R22, R3:R2
        RCALL   ?F_CMP_LT_L04
        BRCC    ??Subroutine0_0
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
??Subroutine0_0:
        RCALL   ?Subroutine33
??CrossCallReturnLabel_63:
        RCALL   ?Subroutine30
??CrossCallReturnLabel_60:
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        RCALL   ?F_CMP_LT_L04
        BRCC    ??Subroutine0_1
        MOVW    R1:R0, R21:R20
        MOVW    R3:R2, R23:R22
??Subroutine0_1:
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 4
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine33:
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 11
        RET

        RSEG `CODE`:CODE:NOROOT(1)
Save_Params_To_EEPROM:
        CODE
        LDI     R30, LOW(wp)
        LDI     R31, (wp) >> 8
        LDI     R16, 103
        LDI     R17, 0
        ST      Z, R16
        STD     Z+1, R17
        RCALL   ?Subroutine21
??CrossCallReturnLabel_37:
        RCALL   ?ML_SRAM_EEPROM_16_16_L07
        RCALL   ?Subroutine8
??CrossCallReturnLabel_17:
        LDI     R20, LOW(ee_crc)
        LDI     R21, (ee_crc) >> 8
        RJMP    __eeput16_16

        RSEG `CODE`:CODE:NOROOT(1)
Restore_default_settings:
        CODE
        RCALL   ?PROLOGUE5_L09
        REQUIRE ?Register_R4_is_cg_reg
        LDI     R26, 0
        LDI     R27, 0
        LDI     R16, 5
        MOV     R4, R16
??Restore_default_settings_0:
        MOVW    R17:R16, R27:R26
        RCALL   ?Subroutine6
??CrossCallReturnLabel_13:
        LDI     R30, LOW(`?<Jumptable for Restore_default_settings>_0`)
        LDI     R31, (`?<Jumptable for Restore_default_settings>_0`) >> 8
        RJMP    ?CV_SWITCH_L06
??Restore_default_settings_1:
        RCALL   ?Subroutine4
??CrossCallReturnLabel_8:
        RJMP    ??Restore_default_settings_2
??Restore_default_settings_3:
        RCALL   ?Subroutine4
??CrossCallReturnLabel_9:
        STD     Z+1, R17
        RJMP    ??Restore_default_settings_2
??Restore_default_settings_4:
        RCALL   ?Subroutine26
??CrossCallReturnLabel_44:
        RCALL   ?Subroutine12
??CrossCallReturnLabel_23:
        RJMP    ??CrossCallReturnLabel_74
??Restore_default_settings_5:
        RCALL   ?Subroutine26
??CrossCallReturnLabel_45:
        RCALL   ??Subroutine36_0
??CrossCallReturnLabel_74:
        MOV     R20, R16
        RCALL   ?Subroutine16
??CrossCallReturnLabel_28:
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        RJMP    ??Restore_default_settings_2
??Restore_default_settings_6:
        RCALL   ?Subroutine26
??CrossCallReturnLabel_46:
        RCALL   ?Subroutine30
??CrossCallReturnLabel_59:
        RCALL   ?Subroutine16
??CrossCallReturnLabel_29:
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
??Restore_default_settings_2:
        ADIW    R27:R26, 1
        DEC     R4
        BRNE    ??Restore_default_settings_0
        LDI     R26, 0
        LDI     R27, 0
        LDI     R24, 5
??Restore_default_settings_7:
        MOVW    R17:R16, R27:R26
        RCALL   ?Subroutine29
??CrossCallReturnLabel_57:
        LDI     R30, LOW(dwvar)
        LDI     R31, (dwvar) >> 8
        ADD     R30, R16
        ADC     R31, R17
        ADIW    R31:R30, 21
        LPM     R18, Z+
        LPM     R19, Z
        CPI     R18, 0
        CPC     R19, R21
        BREQ    ??Restore_default_settings_8
//  259   {
//  260     if (dwvar[i].func!=0) dwvar[i].func();
        MOVW    R31:R30, R19:R18
        ICALL
//  261   }
??Restore_default_settings_8:
        ADIW    R27:R26, 1
        DEC     R24
        BRNE    ??Restore_default_settings_7
//  262 
//  263   Save_Params_To_EEPROM();
        RCALL   Save_Params_To_EEPROM
//  264 }
        LDI     R30, 5
        RJMP    ?EPILOGUE_B5_L09

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine30:
        LPM     R20, Z+
        LPM     R21, Z+
        LPM     R22, Z+
        LPM     R23, Z
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine16:
        RCALL   ?Subroutine31
??CrossCallReturnLabel_71:
        ST      Z, R20
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine12:
        RCALL   ?Subroutine32
??CrossCallReturnLabel_80:
        RJMP    ?F2UL_L04

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine6:
        RCALL   ?Subroutine29
??CrossCallReturnLabel_58:
        LDI     R24, LOW(dwvar)
        LDI     R25, (dwvar) >> 8
        ADD     R24, R16
        ADC     R25, R17
        MOVW    R31:R30, R25:R24
        ADIW    R31:R30, 6
        LPM     R16, Z
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine4:
        RCALL   ?Subroutine26
??CrossCallReturnLabel_47:
        RCALL   ??Subroutine36_0
??CrossCallReturnLabel_77:
        MOV     R18, R16
        RCALL   ?Subroutine31
??CrossCallReturnLabel_70:
        ST      Z, R18
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine26:
        MOVW    R31:R30, R25:R24
        ADIW    R31:R30, 7
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine22:
        RCALL   ?Subroutine33
??CrossCallReturnLabel_64:
        REQUIRE ??Subroutine36_0
        ;               // Fall through to label ??Subroutine36_0

        RSEG `CODE`:CODE:NOROOT(1)
??Subroutine36_0:
        RCALL   ?Subroutine32
??CrossCallReturnLabel_82:
        RJMP    ?F2SL_L04
//  265 // ==========================================================
//  266 //  Сохранить всю область рабочих параметров в EEPROM
//  267 // ==========================================================
//  268 void Save_Params_To_EEPROM(void)
//  269 {
//  270   wp.version = PRG_VERSION;
//  271   ee_wp      = wp;
//  272   ee_crc     = GetBlockCRC((unsigned char*)&wp,sizeof(wp));
//  273 
//  274 }
//  275 
//  276 
//  277 // ==========================================================
//  278 //  Восстановить область рабочих параметров из EEPROM
//  279 // ==========================================================

        RSEG `CODE`:CODE:NOROOT(1)
//  280 unsigned char Restore_settings_from_eeprom(void)
Restore_settings_from_eeprom:
        CODE
//  281 {
//  282   wp = ee_wp;
        LDI     R30, LOW(wp)
        LDI     R31, (wp) >> 8
        RCALL   ?Subroutine21
??CrossCallReturnLabel_38:
        RCALL   ?ML_EEPROM_SRAM_16_16_L07
//  283   if (ee_crc != GetBlockCRC((unsigned char*)&wp,sizeof(wp)))
        RCALL   ?Subroutine8
??CrossCallReturnLabel_16:
        MOVW    R19:R18, R17:R16
        LDI     R20, LOW(ee_crc)
        LDI     R21, (ee_crc) >> 8
        RCALL   __eeget16_16
        CP      R16, R18
        CPC     R17, R19
        BREQ    ??Restore_settings_from_eeprom_0
//  284     return 0;
        LDI     R16, 0
        RET
//  285   else
//  286     return 1;
??Restore_settings_from_eeprom_0:
        LDI     R16, 1
        RET
//  287 }

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine21:
        LDI     R20, LOW((ee_crc + 2))
        LDI     R21, HIGH((ee_crc + 2))
        LDI     R17, 13
        LDI     R18, 0
        RET

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine8:
        LDI     R20, 13
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, LOW(wp)
        LDI     R17, (wp) >> 8
        RJMP    GetBlockCRC

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "SFLAGS">>`:
        DC8 "SFLAGS"

        RSEG INITTAB:CODE:NOROOT(0)
        DATA
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "PREAMB">>`:
        DC8 "PREAMB"

        RSEG NEAR_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "BTRATE">>`:
        DC8 "BTRATE"

        RSEG NEAR_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "KEYCOD">>`:
        DC8 "KEYCOD"

        RSEG NEAR_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "DEVADR">>`:
        DC8 "DEVADR"

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for Str_to_param>_0`:
        DATA
        DB      0
        DB      0
        DW      (??Str_to_param_6) /2
        DW      8
        DW      (??Str_to_param_0) /2
        DW      (??Str_to_param_4) /2
        DW      (??Str_to_param_7) /2
        DW      (??Str_to_param_11) /2
        DW      (??Str_to_param_13) /2
        DW      (??Str_to_param_15) /2
        DW      (??Str_to_param_16) /2
        DW      (??Str_to_param_17) /2

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for Restore_default_settings>_0`:
        DATA
        DB      0
        DB      0
        DW      (??Restore_default_settings_2) /2
        DW      8
        DW      (??Restore_default_settings_1) /2
        DW      (??Restore_default_settings_1) /2
        DW      (??Restore_default_settings_3) /2
        DW      (??Restore_default_settings_3) /2
        DW      (??Restore_default_settings_4) /2
        DW      (??Restore_default_settings_5) /2
        DW      (??Restore_default_settings_6) /2
        DW      (??Restore_default_settings_6) /2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "SFLAGS">`:
        DS8 7
        REQUIRE `?<Initializer for <Constant "SFLAGS">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "PREAMB">`:
        DS8 7
        REQUIRE `?<Initializer for <Constant "PREAMB">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "BTRATE">`:
        DS8 7
        REQUIRE `?<Initializer for <Constant "BTRATE">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "KEYCOD">`:
        DS8 7
        REQUIRE `?<Initializer for <Constant "KEYCOD">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "DEVADR">`:
        DS8 7
        REQUIRE `?<Initializer for <Constant "DEVADR">>`

        END
//  288 
// 
// 814 bytes in segment CODE
//  15 bytes in segment EEPROM_N
//   6 bytes in segment INITTAB
// 120 bytes in segment NEAR_F
//  35 bytes in segment NEAR_I
//  35 bytes in segment NEAR_ID
//  13 bytes in segment NEAR_N
//  44 bytes in segment SWITCH
// 
// 1 013 bytes of CODE  memory (+ 6 bytes shared)
//    48 bytes of DATA  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
